import { API, Session } from '@novastar/codec';
import { SerialPort } from 'serialport';
import { OpenOptions, PortInfo } from '@serialport/bindings-cpp';
import { TypedEmitter } from 'tiny-typed-emitter';
export type KnownDevice = [vendorId: string, productId: string];
/**
 * Get all known devices
 */
export declare const getKnownDevices: () => ReadonlyArray<KnownDevice>;
/**
 * Add a new known device type
 * @param vendorId
 * @param productId
 */
export declare const addKnownDevice: (vendorId: string | number, productId: string | number) => ReadonlyArray<KnownDevice>;
/**
 * Remove known device by VID,PID
 * @param vendorId
 * @param productId
 */
export declare const removeKnownDevice: (vendorId: string | number, productId: string | number) => ReadonlyArray<KnownDevice>;
/**
 * Clear all known devices
 */
export declare const clearKnownDevices: () => void;
export interface SerialBindingEvents {
    /**
     * @event open Triggered once after opening a connection to a device
     * @param path serial path
     */
    open(path: string): void;
    /**
     * @event close Triggered once after closing a connection to a device
     * @param path serial path
     */
    close(path: string): void;
}
/**
 * Serial Session type
 */
export type SerialSession = Session<SerialPort> & API;
/**
 * Finding serial devices
 * @param known
 * @returns {Promise<PortInfo[]>} - paths to found devices
 */
export declare const findSendingCards: (known?: ReadonlyArray<KnownDevice>) => Promise<PortInfo[]>;
/**
 * @internal For documentation purposes only. Use singleton instance exported as default
 */
export declare class SerialBinding extends TypedEmitter<SerialBindingEvents> {
    private sessions;
    /**
     * Connect to a serial device and open a serial session
     * @param opts
     */
    open(opts: OpenOptions): Promise<SerialSession>;
    /**
     * Close serial session
     * @param path
     */
    close(path: string): boolean;
    /**
     * Get all serial sessions
     */
    getSessions(): SerialSession[];
    /**
     * Close all serial sessions
     */
    release(): void;
}
/**
 * Binding to work with serial devices
 */
declare const serial: SerialBinding;
export default serial;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const serial_1 = __importStar(require("./serial"));
describe('novastar', () => {
    test('serial', async () => {
        const [port] = await (0, serial_1.findSendingCards)();
        console.log({ port });
        const session = await serial_1.default.open({
            path: port.path,
            baudRate: 115200,
        });
        try {
            const readReq = new codec_1.Request(1);
            readReq.deviceType = codec_1.DeviceType.ReceivingCard;
            readReq.address = 0x02000001;
            readReq.port = 0;
            const { data: [value] } = await session.connection.send(readReq);
            console.log({ value });
            // Close all serial sessions
            serial_1.default.release();
        }
        catch (err) {
            console.error(err);
        }
    });
    test('modelId', async () => {
        const [port] = await (0, serial_1.findSendingCards)();
        console.log({ port });
        const session = await serial_1.default.open({
            path: port.path,
            baudRate: 115200,
        });
        try {
            const readReq = new codec_1.Request(2);
            readReq.deviceType = codec_1.DeviceType.SendingCard;
            readReq.address = 2;
            const { data } = await session.connection.send(readReq);
            console.log('modelId', data.readUInt16LE());
            // Close all serial sessions
            serial_1.default.release();
        }
        catch (err) {
            console.error(err);
        }
    });
});
//# sourceMappingURL=test.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const common_1 = require("@novastar/native/common");
const sortBy_1 = __importDefault(require("lodash/sortBy"));
/**
 * ScreenInfoAccessor:NewSoftSpaceReadCompeleteCallBack
 */
function packAndSortCabinets(screenList, index) {
    return (0, sortBy_1.default)(Object.values(screenList.reduce((acc, screen) => {
        const copy = { ...screen };
        if (!copy.UUID)
            throw new TypeError('Unknown screen UUID');
        switch (copy.ScrType) {
            case LEDDisplyType_1.LEDDisplyTypeEnum.SimpleSingleType:
                if (common_1.UInt8.is(index))
                    copy.DeviceID = index;
                break;
            case LEDDisplyType_1.LEDDisplyTypeEnum.StandardType:
            case LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType:
                copy.CabinetInDevice = copy.CabinetInDevice?.map(({ DevID, ...cabinet }) => ({
                    ...cabinet,
                    DevID: DevID !== 255 && common_1.UInt32.is(index) ? index : DevID,
                }));
                break;
            default:
                throw new TypeError('Unknown screen type');
        }
        const { [copy.UUID]: prev, ...other } = acc;
        if (prev && copy.CabinetInDevice) {
            if (!prev.CabinetInDevice)
                prev.CabinetInDevice = copy.CabinetInDevice;
            else
                prev.CabinetInDevice.push(...copy.CabinetInDevice);
        }
        return { [copy.UUID]: prev ?? copy, ...other };
    }, {})).map(({ CabinetInDevice: cabs, ...screen }) => ({
        CabinetInDevice: cabs && (0, sortBy_1.default)(cabs, ['YPos', 'XPos']),
        ...screen,
    })), 'ScreenIndex');
}
exports.default = packAndSortCabinets;
//# sourceMappingURL=packAndSortCabinets.js.map
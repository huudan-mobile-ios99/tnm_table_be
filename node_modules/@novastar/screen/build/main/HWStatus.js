"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HWStatus = void 0;
/* eslint-disable no-bitwise */
const AddressMapping_1 = __importDefault(require("@novastar/native/AddressMapping"));
const typed_struct_1 = __importDefault(require("typed-struct"));
const TempInfo = new typed_struct_1.default('TempInfo')
    .Bits8({ IsValid: [0, 1] })
    .back()
    .Custom('Value', 2, (_, buffer) => ((buffer[0] & 0x7f) === 1 ? -0.5 : 0.5) * buffer[1])
    .compile();
const ValueInfo = new typed_struct_1.default('ValueInfo')
    .Bits8({
    IsValid: [0, 1],
    Value: [1, 7],
})
    .compile();
const VoltageInfo = new typed_struct_1.default('VoltageInfo')
    .Bits8({ IsValid: [0, 1] })
    .back()
    .Custom('Value', 1, (_, buffer) => (buffer[0] & 0x7f) / 10)
    .compile();
const FanSpeedInfo = new typed_struct_1.default('FanSpeedInfo')
    .Bits8({ IsValid: [0, 1] })
    .back()
    .Custom('Value', 1, (_, buffer) => (buffer[0] & 0x7f) * 50)
    .compile();
const moduleStatusLow = {
    offset: AddressMapping_1.default.Scanner_RowLineRelatedInfoOfModuleStatusAddr -
        AddressMapping_1.default.Scanner_AllMonitorDataAddr,
    length: AddressMapping_1.default.Scanner_RowLineRelatedInfoOfModuleStatusOccupancy,
};
const moduleStatusHigh = {
    offset: AddressMapping_1.default.Scanner_ModuleStatusOfMonitorCardAddr -
        AddressMapping_1.default.Scanner_AllMonitorDataAddr,
    length: AddressMapping_1.default.Scanner_ModuleStatusOfMonitorCardBytesCnt,
};
exports.HWStatus = new typed_struct_1.default('HWStatus')
    .Struct('tempInfoInScanCard', TempInfo) // 0
    .Struct('humidityInfoInScanCard', ValueInfo) // 2
    .Struct('voltageInfoInScanCard', VoltageInfo) // 3
    .back(0)
    .seek(AddressMapping_1.default.AttachedMonitorCardExistAddr - AddressMapping_1.default.Scanner_AllMonitorDataAddr)
    .Boolean8('isConnectMonitorCard') // 32
    .back(0)
    .seek(AddressMapping_1.default.Scanner_TempInfoOfMonitorCardAddr - AddressMapping_1.default.Scanner_AllMonitorDataAddr)
    .Struct('tempInfoInMonitorCard', TempInfo) // 39
    .Struct('humidityInfoInMonitorCard', ValueInfo) // 41
    .Struct('smokeWarnInfo', ValueInfo) // 42
    .StructArray('fanSpeedInfoListMonitorCard', FanSpeedInfo, AddressMapping_1.default.Scanner_FanSpeedOfMonitorCardNum) // 43
    .StructArray('valtageInfoListMonitorCard', VoltageInfo, AddressMapping_1.default.Scanner_VoltageOfMonitorCardNum) // 47
    .Buffer('analogInputData', AddressMapping_1.default.Scanner_AnalogInputOfMonitorCardNum) // 56
    .seek(1)
    .UInt8('generalStatus') // 65
    .back(0)
    .seek(moduleStatusLow.offset)
    .Buffer('moduleStatusLow', moduleStatusLow.length) // 11
    .back(0)
    .seek(moduleStatusHigh.offset)
    .Buffer('moduleStatusHigh', moduleStatusHigh.length) // 66
    .compile(); // 82
//# sourceMappingURL=HWStatus.js.map
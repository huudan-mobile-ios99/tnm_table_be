"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-await-in-loop */
const codec_1 = require("@novastar/codec");
const HDEnableMode_1 = require("@novastar/native/HDEnableMode");
const NSCardType_1 = require("@novastar/native/NSCardType");
const VedioSelectMode_1 = require("@novastar/native/VedioSelectMode");
const CustomTransform_1 = require("./CustomTransform");
const GetDeviceTypeLanguage_1 = __importDefault(require("./GetDeviceTypeLanguage"));
/**
 * ControllerProcessor:637
 * @param session
 * @param index
 */
async function readMaxPackageSize(session, index) {
    const req = new codec_1.Request(1);
    req.address = 6;
    req.destination = index;
    const res = await session.connection.trySend(req);
    if (res && res.data[0] === 0xa8) {
        const req1 = new codec_1.Request(2);
        req1.address = 7;
        const res1 = await session.connection.trySend(req1);
        if (res1)
            return (0, codec_1.decodeUIntLE)(res1);
    }
    return 256;
}
async function readDeviceInfo(session, index) {
    try {
        const deviceInfo = {
            model: await session.ReadControllerModelId(index),
            mac: [...(await session.ReadControllerSnHigh(index))]
                .map(byte => byte.toString(16).padStart(2, '0'))
                .join(':'),
            maxPackageSize: await readMaxPackageSize(session, index),
            companyId: await session.ReadCompanyID(index),
            audioControl: await session.ReadAudioControl(index),
            dviSelect: await session.ReadDviSelect(index),
            hdEnable: (await session.ReadHDEnable(index)) || HDEnableMode_1.HDEnableModeEnum.Bit8,
            videoSelect: (await session.ReadDviMode(index)) === 90
                ? VedioSelectMode_1.VedioSelectModeEnum.Manual
                : VedioSelectMode_1.VedioSelectModeEnum.Auto,
            fieldRate: 60,
            portCount: 2,
        };
        /**
         * ControllerProcessor:604
         */
        if (deviceInfo.model !== NSCardType_1.NSCardTypeEnum.FunctionCard) {
            const req = new codec_1.Request(88);
            req.address = 335544320;
            const res = await session.connection.trySend(req);
            if (res && res.ack === 0 && res.data[0] === 0xa8) {
                const len = res.data[17];
                deviceInfo.name = res.data.slice(18, 18 + len).toString();
            }
        }
        if (!deviceInfo.name)
            deviceInfo.name = (0, GetDeviceTypeLanguage_1.default)(deviceInfo.model);
        deviceInfo.portCount = (0, CustomTransform_1.GetPortNumber)(deviceInfo.model);
        return deviceInfo;
    }
    catch (e) {
        if (!(e instanceof codec_1.TimeoutError))
            throw e;
        return null;
    }
}
/**
 * Nova.LCT.Message.Server.ControllerProcessor
 * ControllerProcessor::FindEquipment
 * @param session
 */
async function enumerateDevices(session) {
    const devices = [];
    const destination = 255;
    await session.SetSortOrder(destination, true, 0);
    for (let i = 0;; i += 1) {
        const info = await readDeviceInfo(session, i);
        if (!info)
            break;
        devices.push(info);
    }
    return devices;
}
exports.default = enumerateDevices;
//# sourceMappingURL=enumerator.js.map
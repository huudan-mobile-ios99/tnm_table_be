"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fullScreenSelect = void 0;
const common_1 = require("./common");
const getScreenLocation_1 = __importStar(require("./getScreenLocation"));
/**
 * UC_FullScreenSelect::GetAllSBSelectedAreaInfo
 */
const fullScreenSelect = (screen) => {
    const { leftTop } = (0, getScreenLocation_1.default)(screen);
    if ((0, common_1.isStandardScreen)(screen)) {
        return screen.ScannerRegionList.filter(getScreenLocation_1.notEmptyXY)
            .filter(sbInfo => sbInfo.SenderIndex !== 255)
            .map(sbInfo => ({
            SelectedRectInSB: [{ x: 0, y: 0, width: sbInfo.Width, height: sbInfo.Height }],
            SelectedSbPosInScreen: { x: sbInfo.X - leftTop.x, y: sbInfo.Y - leftTop.y },
        }));
    }
    if ((0, common_1.isComplexScreen)(screen)) {
        return screen.ScanBoardRegionInfoList.filter(getScreenLocation_1.notEmptyXY).map(sbInfo => ({
            SelectedRectInSB: [{ x: 0, y: 0, width: sbInfo.Width, height: sbInfo.Height }],
            SelectedSbPosInScreen: { x: sbInfo.X - leftTop.x, y: sbInfo.Y - leftTop.y },
        }));
    }
    if ((0, common_1.isSimpleScreen)(screen)) {
        throw new TypeError('Not implemented');
        // See SimpleLEDDisplayInfo::GetScanBdRegionInfo
        // return screen.PortScanBdInfoList
        //   .map()
    }
    throw new TypeError('Invalid LEDDisplay type');
};
exports.fullScreenSelect = fullScreenSelect;
//# sourceMappingURL=fullScreenSelect.js.map
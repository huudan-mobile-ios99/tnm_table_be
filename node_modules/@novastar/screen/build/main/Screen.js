"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const SoftwareSpaceBaseAddress_1 = __importDefault(require("@novastar/native/SoftwareSpaceBaseAddress"));
const MAX_USHORT = 0xffff;
class Screen {
    constructor(session) {
        this.session = session;
        this._top = 0;
        this._left = 0;
    }
    get top() {
        const { _top } = this;
        return _top;
    }
    get left() {
        const { _left } = this;
        return _left;
    }
    async setPos(left, top) {
        if (left < 0 || left > MAX_USHORT || top < 0 || top > MAX_USHORT)
            throw new TypeError('Invalid position');
        const req = new codec_1.Request(1);
        const x = await this.session.connection.send(req);
    }
    /**
     * ScreenInfoAccessor::ReadNextSenderSoftSpace()
     */
    async readHeader() {
        const data = await this.session.ReadSender_SoftwareSpace(0, 4, SoftwareSpaceBaseAddress_1.default.BASE_ADDRESS);
        return data.toString('ascii');
    }
    /**
     * ScreenInfoAccessor::ReadSenderScreenConfigInfo()
     */
    async readConfig() {
        const data = await this.session.ReadSender_ScreenConfigSpace(0);
        const x = data.readUInt16LE(2);
        const y = data.readUInt16LE(4);
        const scanbdCols = data[11];
        const scanbdRows = data[10];
        const pixelColsInScanbd = data.readUInt16LE(6);
        const pixelRowsInScanbd = data.readUInt16LE(8);
        const num1 = data.readUInt16LE(13);
    }
}
exports.default = Screen;
Screen.crc = (data) => data.reduce((acc, value) => (acc + value) % 0xffff, 0x55aa);
//# sourceMappingURL=Screen.js.map
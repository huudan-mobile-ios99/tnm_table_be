"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeStandardLEDDisplayInfo = exports.StandardScreen = void 0;
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const StandardLEDDisplayInfo_1 = require("@novastar/native/StandardLEDDisplayInfo");
const debug_1 = __importDefault(require("debug"));
const Either_1 = require("fp-ts/Either");
const PathReporter_1 = require("io-ts/PathReporter");
const typed_struct_1 = __importStar(require("typed-struct"));
const RegionInfo_1 = require("./RegionInfo");
const debug = (0, debug_1.default)('novastar:standard-screen');
exports.StandardScreen = new typed_struct_1.default('StandardScreen')
    .UInt8('Type', LEDDisplyType_1.LEDDisplyTypeEnum.StandardType)
    .UInt8('VirtualMode', (0, typed_struct_1.typed)())
    .UInt16LE('X')
    .UInt16LE('Y')
    .UInt16LE('ScanBdCols')
    .UInt16LE('ScanBdRows')
    .StructArray('ScannerRegionList', RegionInfo_1.RegionInfo)
    .compile();
const decodeStandardLEDDisplayInfo = (data) => {
    const screen = new exports.StandardScreen(data).toJSON();
    debug(`parse: ${JSON.stringify(screen)}`);
    const validation = StandardLEDDisplayInfo_1.StandardLEDDisplayInfo.decode(screen);
    if ((0, Either_1.isLeft)(validation))
        throw new TypeError(`Invalid standard screen info: ${PathReporter_1.PathReporter.report(validation)}`);
    return validation.right;
};
exports.decodeStandardLEDDisplayInfo = decodeStandardLEDDisplayInfo;
//# sourceMappingURL=StandardScreen.js.map
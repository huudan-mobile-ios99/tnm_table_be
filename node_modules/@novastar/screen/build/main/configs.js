"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadScreenConfig = exports.decodeScreenConfig = exports.loadScanBoardConfig = exports.loadSystemConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const ScanBoardProperty_1 = require("@novastar/native/ScanBoardProperty");
const SystemParameterConfig_1 = require("@novastar/native/SystemParameterConfig");
const adm_zip_1 = __importDefault(require("adm-zip"));
const debug_1 = __importDefault(require("debug"));
const fast_xml_parser_1 = require("fast-xml-parser");
const Either_1 = require("fp-ts/Either");
const t = __importStar(require("io-ts"));
const PathReporter_1 = require("io-ts/PathReporter");
const DVIInfo_1 = require("./DVIInfo");
const DviScreenConfigInfo_1 = require("./DviScreenConfigInfo");
const ScannerBinData_1 = require("./ScannerBinData");
const ScreenAdjustInfo_1 = require("./ScreenAdjustInfo");
const ScreenInfo_1 = require("./ScreenInfo");
const common_1 = require("./common");
const debug = (0, debug_1.default)('novastar:config');
const options = {
    ignoreAttributes: false,
    parseTagValue: false,
};
const parser = new fast_xml_parser_1.XMLParser(options);
const makeCfgParser = (codec) => (data) => {
    const cfg = parser.parse(data);
    const { decode } = t.exact(t.type({ [codec.name]: codec }));
    const res = decode(cfg);
    if ((0, Either_1.isLeft)(res)) {
        throw new TypeError(PathReporter_1.PathReporter.report(res)[0]);
    }
    return res.right[codec.name];
};
const systemParameterParser = makeCfgParser(SystemParameterConfig_1.SystemParameterConfig);
const scanboardParser = makeCfgParser(ScanBoardProperty_1.ScanBoardProperty);
/**
 * *.scfg
 * @param pathname
 */
const loadSystemConfig = (pathname) => {
    const data = fs_1.default.readFileSync(pathname);
    return systemParameterParser(data);
};
exports.loadSystemConfig = loadSystemConfig;
/**
 * *.rcfgx
 * @param pathname
 */
const loadScanBoardConfig = (pathname) => {
    const zip = new adm_zip_1.default(pathname);
    const [xmlData, binData] = zip.getEntries().map(entry => zip.readFile(entry));
    if (!xmlData)
        throw new Error('Invalid archive');
    const xml = scanboardParser(xmlData);
    const params = binData ? (0, ScannerBinData_1.decodeScannerBinData)(binData) : [];
    return [xml, params];
};
exports.loadScanBoardConfig = loadScanBoardConfig;
/**
 * @param buffer
 */
const decodeScreenConfig = (buffer) => {
    const { crc: crcInfo, dviInfoLength, screenInfoLength, adjustInfoLength, data, header, } = new DviScreenConfigInfo_1.DviScreenConfigInfo(buffer);
    if (header !== DviScreenConfigInfo_1.DviScreenInfoFlag)
        throw new TypeError('Invalid DSCI header');
    const size = DviScreenConfigInfo_1.DviScreenConfigInfo.baseSize + dviInfoLength + screenInfoLength + adjustInfoLength;
    if (buffer.length < size)
        throw new Error('Invalid buffer length');
    if ((0, common_1.crc16)(buffer.slice(DviScreenConfigInfo_1.DviScreenConfigInfo.getOffsetOf('crc') + 2, size - adjustInfoLength), 0) !==
        crcInfo)
        throw new TypeError('Invalid CRC');
    const [dviInfo, dviVersion] = (0, DVIInfo_1.decodeGraphicsDVIPortInfo)(data.slice(0, dviInfoLength));
    debug(`dviInfo: ${JSON.stringify(dviInfo)}`);
    debug(`dviVersion: ${dviVersion}`);
    const screenInfo = (0, ScreenInfo_1.decodeScreenInfo)(data.slice(dviInfoLength, dviInfoLength + screenInfoLength));
    const adjustInfo = (0, ScreenAdjustInfo_1.decodeScreenAdjustInfo)(data.slice(dviInfoLength + screenInfoLength, dviInfoLength + screenInfoLength + adjustInfoLength));
    if (adjustInfo.length > 0) {
        if (adjustInfo.length !== screenInfo.screens.length)
            throw new Error('Invalid adjust info count');
        screenInfo.screens = screenInfo.screens.map(({ ScrAdjustParams, ...props }, index) => ({
            ScrAdjustParams: adjustInfo[index],
            ...props,
        }));
    }
    if (size + 11 < buffer.length) {
    }
    return {
        ...screenInfo,
        dviVersion,
        dviInfo,
    };
};
exports.decodeScreenConfig = decodeScreenConfig;
/**
 * *.scr
 * @param pathname
 */
const loadScreenConfig = (pathname) => (0, exports.decodeScreenConfig)(fs_1.default.readFileSync(pathname));
exports.loadScreenConfig = loadScreenConfig;
//# sourceMappingURL=configs.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.notEmptyXY = void 0;
const last_1 = __importDefault(require("lodash/last"));
const sortBy_1 = __importDefault(require("lodash/sortBy"));
const common_1 = require("./common");
exports.notEmptyXY = (0, common_1.hasProps)('X', 'Y', 'Width', 'Height');
function getScreenLocation(screen) {
    if ((0, common_1.isSimpleScreen)(screen)) {
        const cols = screen?.ScanBdCols ?? 0;
        const rows = screen?.ScanBdRows ?? 0;
        const width = cols * (screen?.PixelColsInScanBd ?? 0);
        const height = rows * (screen?.PixelRowsInScanBd ?? 0);
        const x = screen?.X ?? 0;
        const y = screen?.Y ?? 0;
        return {
            leftTop: {
                x,
                y,
            },
            rightBottom: {
                x: x + width,
                y: y + height,
            },
            cols,
            rows,
        };
    }
    const xy = ((0, common_1.isStandardScreen)(screen)
        ? screen.ScannerRegionList?.filter(exports.notEmptyXY)
        : screen.ScanBoardRegionInfoList?.filter(exports.notEmptyXY)) ?? [];
    if (xy.length === 0)
        return {
            leftTop: {
                x: 0,
                y: 0,
            },
            rightBottom: {
                x: 0,
                y: 0,
            },
            cols: 0,
            rows: 0,
        };
    const xx = (0, sortBy_1.default)(xy, ['X']);
    const yy = (0, sortBy_1.default)(xy, ['Y']);
    const xLast = (0, last_1.default)(xx);
    const yLast = (0, last_1.default)(yy);
    const left = Math.max(0, xx[0].X);
    const top = Math.max(0, yy[0].Y);
    const right = Math.max(0, xLast.X + xLast.Width);
    const bottom = Math.max(0, yLast.Y + yLast.Height);
    const [uniqX, uniqY] = xy.reduce(([xSet, ySet], { X, Y, }) => {
        xSet.add(X);
        ySet.add(Y);
        return [xSet, ySet];
    }, [new Set(), new Set()]);
    const firstColumn = xx[0].ColIndexInScreen;
    const lastColumn = xLast.ColIndexInScreen;
    const firstRow = xx[0].RowIndexInScreen;
    const lastRow = xLast.RowIndexInScreen;
    const [cols, rows] = (0, common_1.isStandardScreen)(screen) && screen.ScanBoardCols && screen.ScanBoardRows
        ? [screen.ScanBoardCols, screen.ScanBoardRows]
        : [
            lastColumn != null && firstColumn != null
                ? Math.max(lastColumn - firstColumn + 1, 0)
                : uniqX.size,
            lastRow != null && firstRow != null
                ? Math.max(lastRow - firstRow + 1, 0)
                : uniqY.size,
        ];
    return {
        leftTop: {
            x: left,
            y: top,
        },
        rightBottom: {
            x: right,
            y: bottom,
        },
        cols,
        rows,
    };
}
exports.default = getScreenLocation;
//# sourceMappingURL=getScreenLocation.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ComplexLEDDisplayInfo_1 = require("@novastar/native/ComplexLEDDisplayInfo");
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const SimpleLEDDisplayInfo_1 = require("@novastar/native/SimpleLEDDisplayInfo");
const StandardLEDDisplayInfo_1 = require("@novastar/native/StandardLEDDisplayInfo");
const common_1 = require("@novastar/native/common");
function convertScreenDataInSoftSpaceToLEDDisplayInfo(scr) {
    switch (scr.ScrType) {
        case LEDDisplyType_1.LEDDisplyTypeEnum.SimpleSingleType:
            return (0, common_1.makeStruct)(SimpleLEDDisplayInfo_1.SimpleLEDDisplayInfo, {
                Type: LEDDisplyType_1.LEDDisplyTypeEnum.SimpleSingleType,
                VirtualMode: scr.VirMode,
                X: scr.ScrX,
                Y: scr.ScrY,
                SenderIndex: scr.DeviceID,
                PixelColsInScanBd: scr.CabinetWidth,
                PixelRowsInScanBd: scr.CabinetHeight,
                ScanBdCols: scr.CabinetCol,
                ScanBdRows: scr.CabinetRow,
                PortCols: scr.PortCols,
                PortRows: scr.PortRows,
                PortScanBdInfoList: scr.OnePortLoadInfo?.map(info => ({
                    ConnectType: info.LineType,
                    PortIndex: info.Port,
                    ScanBdBegColNo: info.StartCabCol,
                    ScanBdBegRowNo: info.StartCabRow,
                    ScanBdEndColNo: info.EndCabCol,
                    ScanBdEndRowNo: info.EndCabRow,
                })),
            });
        case LEDDisplyType_1.LEDDisplyTypeEnum.StandardType:
            if ((scr.CabinetCol ?? 0) * (scr.CabinetRow ?? 0) !== (scr.CabinetInDevice?.length ?? 0))
                throw new TypeError('Invalid CabinetInDevice');
            return (0, common_1.makeStruct)(StandardLEDDisplayInfo_1.StandardLEDDisplayInfo, {
                Type: LEDDisplyType_1.LEDDisplyTypeEnum.StandardType,
                VirtualMode: scr.VirMode,
                X: scr.ScrX,
                Y: scr.ScrY,
                DVIOffest: scr.DVIlist,
                ScanBoardCols: scr.CabinetCol,
                ScanBoardRows: scr.CabinetRow,
                ScannerRegionList: scr.CabinetInDevice?.map(cab => ({
                    SenderIndex: cab.DevID,
                    PortIndex: cab.NetPort,
                    ConnectIndex: cab.ConnectID,
                    X: cab.XPos,
                    Y: cab.YPos,
                    Width: cab.Width,
                    Height: cab.Height,
                    RowIndexInScreen: cab.RowIndexInScreen,
                    ColIndexInScreen: cab.ColIndexInScreen,
                    DVIIndex: cab.DviIndex,
                })),
            });
        case LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType:
            return (0, common_1.makeStruct)(ComplexLEDDisplayInfo_1.ComplexLEDDisplayInfo, {
                Type: LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType,
                VirtualMode: scr.VirMode,
                ScanBoardRegionInfoList: scr.CabinetInDevice?.map(cab => ({
                    SenderIndex: cab.DevID,
                    PortIndex: cab.NetPort,
                    ConnectIndex: cab.ConnectID,
                    X: cab.XPos,
                    Y: cab.YPos,
                    Width: cab.Width,
                    Height: cab.Height,
                })),
            });
        default:
            throw new TypeError(`Unknown screen type: ${JSON.stringify(scr.ScrType)}`);
    }
}
exports.default = convertScreenDataInSoftSpaceToLEDDisplayInfo;
//# sourceMappingURL=convertScreenDataInSoftSpaceToLEDDisplayInfo.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CabinetInDevice_1 = require("@novastar/native/CabinetInDevice");
const DviSelectMode_1 = require("@novastar/native/DviSelectMode");
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const OnePortLoadInfo_1 = require("@novastar/native/OnePortLoadInfo");
const ScreenDataInSoftSpace_1 = require("@novastar/native/ScreenDataInSoftSpace");
const common_1 = require("@novastar/native/common");
const uuid_1 = require("uuid");
const common_2 = require("./common");
/**
 * Nova.LCT.GigabitSystem.CommonInfoAccessor.dll
 * Nova.LCT.GigabitSystem.CommonInfoAccessor::NewScreenDataConvertor::ConvertFromEditZoneToSoftSpace
 * @param scr
 * @param index
 */
function convertLEDDisplayInfoToScreenDataInSoftSpace(scr, index) {
    const UUID = (0, uuid_1.v4)();
    if ((0, common_2.isSimpleScreen)(scr)) {
        return (0, common_1.makeStruct)(ScreenDataInSoftSpace_1.ScreenDataInSoftSpace, {
            UUID,
            ScreenIndex: index,
            VirMode: scr.VirtualMode,
            ScrType: LEDDisplyType_1.LEDDisplyTypeEnum.SimpleSingleType,
            ScrX: scr.X,
            ScrY: scr.Y,
            DeviceID: scr.SenderIndex,
            PortCols: scr.PortCols,
            PortRows: scr.PortRows,
            CabinetCol: scr.ScanBdCols,
            CabinetRow: scr.ScanBdRows,
            CabinetWidth: scr.PixelColsInScanBd,
            CabinetHeight: scr.PixelRowsInScanBd,
            OnePortLoadInfo: scr.PortScanBdInfoList?.map(port => (0, common_1.makeStruct)(OnePortLoadInfo_1.OnePortLoadInfo, {
                LineType: port.ConnectType,
                Port: port.PortIndex,
                StartCabCol: port.ScanBdBegColNo,
                StartCabRow: port.ScanBdBegRowNo,
                EndCabCol: port.ScanBdEndColNo,
                EndCabRow: port.ScanBdEndRowNo,
            })),
        });
    }
    if ((0, common_2.isStandardScreen)(scr)) {
        if ((scr.ScanBoardRows ?? 0) * (scr.ScanBoardCols ?? 0) !==
            (scr.ScannerRegionList?.length ?? 0))
            throw new TypeError('Invalid ScannerRegionList length');
        const [first] = scr.ScannerRegionList ?? [];
        return (0, common_1.makeStruct)(ScreenDataInSoftSpace_1.ScreenDataInSoftSpace, {
            UUID,
            ScreenIndex: index,
            ScrType: LEDDisplyType_1.LEDDisplyTypeEnum.StandardType,
            VirMode: scr.VirtualMode,
            ScrX: scr.X,
            ScrY: scr.Y,
            CabinetCol: scr.ScanBoardCols,
            CabinetRow: scr.ScanBoardRows,
            DVIlist: scr.DVIOffest,
            DviSelect: first?.DviSelect ?? DviSelectMode_1.DviSelectModeEnum.DVI,
            CabinetInDevice: scr.ScannerRegionList?.map(region => (0, common_1.makeStruct)(CabinetInDevice_1.CabinetInDevice, {
                DevID: region.SenderIndex,
                NetPort: region.PortIndex,
                ConnectID: region.ConnectIndex,
                XPos: region.X,
                YPos: region.Y,
                Width: region.Width,
                Height: region.Height,
                RowIndexInScreen: region.RowIndexInScreen,
                ColIndexInScreen: region.ColIndexInScreen,
                DviIndex: region.DVIIndex,
            })),
        });
    }
    if ((0, common_2.isComplexScreen)(scr)) {
        return (0, common_1.makeStruct)(ScreenDataInSoftSpace_1.ScreenDataInSoftSpace, {
            UUID,
            ScreenIndex: index,
            ScrType: LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType,
            VirMode: scr.VirtualMode,
            CabinetInDevice: scr.ScanBoardRegionInfoList?.map(region => (0, common_1.makeStruct)(CabinetInDevice_1.CabinetInDevice, {
                DevID: region.SenderIndex,
                NetPort: region.PortIndex,
                ConnectID: region.ConnectIndex,
                XPos: region.X,
                YPos: region.Y,
                Width: region.Width,
                Height: region.Height,
            })),
        });
    }
    throw new TypeError('Invalid screen type');
}
exports.default = convertLEDDisplayInfoToScreenDataInSoftSpace;
//# sourceMappingURL=convertLEDDisplayInfoToScreenDataInSoftSpace.js.map
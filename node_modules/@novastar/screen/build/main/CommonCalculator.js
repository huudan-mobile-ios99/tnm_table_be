"use strict";
// Nova.LCT.GigabitSystem.HardwareCaculator.dll
// noinspection SpellCheckingInspection
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaculateCutMapAddrIndex = exports.CaculateMaxloadSize = exports.GetVerticalCascadeMaxLoad = exports.GetHorizontalCascadeMaxLoad = exports.GetMaxCabinetDataGroup = exports.GetDoorCountFromScanBdInfo = exports.isValidStandardLedModuleProp = exports.isValidScanBdProp = exports.GetGclkInfoByPartNumPerRef = exports.GetGrayScaleByGclkNumPerRef = exports.CaculateShiftUnitNum = void 0;
const ChipType_1 = require("@novastar/native/ChipType");
const CommonIrCabinetType_1 = require("@novastar/native/CommonIrCabinetType");
const DataDirectionType_1 = require("@novastar/native/DataDirectionType");
const ModuleCascadeDiretion_1 = require("@novastar/native/ModuleCascadeDiretion");
const ScreenDriveType_1 = require("@novastar/native/ScreenDriveType");
const common_1 = require("./common");
function CaculateShiftUnitNum(modWidth, modHeight, modTotalPointInTable, directionType, cabinetRealWidth, cabinetRealHeight) {
    return ((directionType !== DataDirectionType_1.DataDirectionTypeEnum.Horizontal
        ? cabinetRealHeight / modHeight
        : cabinetRealWidth / modWidth) * modTotalPointInTable);
}
exports.CaculateShiftUnitNum = CaculateShiftUnitNum;
const GetGrayScaleByGclkNumPerRef = (gclkNumPerRef) => {
    if (gclkNumPerRef > 32768) {
        return 16;
    }
    if (gclkNumPerRef > 16384) {
        return 15;
    }
    if (gclkNumPerRef > 8192) {
        return 14;
    }
    if (gclkNumPerRef > 4096) {
        return 13;
    }
    if (gclkNumPerRef > 2048) {
        return 12;
    }
    if (gclkNumPerRef > 1024) {
        return 11;
    }
    return 10;
};
exports.GetGrayScaleByGclkNumPerRef = GetGrayScaleByGclkNumPerRef;
function GetGclkInfoByPartNumPerRef(chipType, partNumPerRef, isPWMModel = true, isGLCK = true) {
    switch (chipType) {
        case ChipType_1.ChipTypeEnum.Chip_SUM2030:
        case ChipType_1.ChipTypeEnum.Chip_SUM2130:
        case ChipType_1.ChipTypeEnum.Chip_SUM2033:
        case ChipType_1.ChipTypeEnum.Chip_SUM2131:
        case ChipType_1.ChipTypeEnum.Chip_SUM2035:
        case ChipType_1.ChipTypeEnum.Chip_SUM2135:
        case ChipType_1.ChipTypeEnum.Chip_SUM2032:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1041,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 529,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 273,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 145,
                validGclkNumPerScan: 128,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MY9268:
        case ChipType_1.ChipTypeEnum.Chip_MY9266:
        case ChipType_1.ChipTypeEnum.Chip_MY9366:
        case ChipType_1.ChipTypeEnum.Chip_MY9269:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 512,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 256,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5042:
        case ChipType_1.ChipTypeEnum.Chip_SM16136:
        case ChipType_1.ChipTypeEnum.Chip_MY9262:
        case ChipType_1.ChipTypeEnum.Chip_MBI5030:
            return {
                gclkNumPerScan: 1024,
                validGclkNumPerScan: 1024,
                brightGclkNumPerScan: 1024,
            };
        case ChipType_1.ChipTypeEnum.Chip_MY9263:
            return {
                gclkNumPerScan: 512,
                validGclkNumPerScan: 512,
                brightGclkNumPerScan: 512,
            };
        case ChipType_1.ChipTypeEnum.Chip_SM16158:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1025,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 512,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5051:
        case ChipType_1.ChipTypeEnum.Chip_MBI5052:
        case ChipType_1.ChipTypeEnum.Chip_MBI5053:
        case ChipType_1.ChipTypeEnum.Chip_MBI5152:
        case ChipType_1.ChipTypeEnum.Chip_MBI5151:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1025,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 512,
                };
            }
            return {
                gclkNumPerScan: 257,
                validGclkNumPerScan: 512,
                brightGclkNumPerScan: 256,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5050:
            return {
                gclkNumPerScan: 1025,
                validGclkNumPerScan: 1024,
                brightGclkNumPerScan: 1024,
            };
        case ChipType_1.ChipTypeEnum.Chip_TLC5958:
            if ((!isPWMModel && !isGLCK) || (isPWMModel && isGLCK)) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 260,
                    brightGclkNumPerScan: 256,
                };
            }
            if (isPWMModel && !isGLCK) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 516,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 133,
                brightGclkNumPerScan: 256,
            };
        case ChipType_1.ChipTypeEnum.Chip_TLC59581:
            if (!isPWMModel && !isGLCK) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 260,
                    brightGclkNumPerScan: 256,
                };
            }
            if (isPWMModel && !isGLCK) {
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 133,
                    brightGclkNumPerScan: 128,
                };
            }
            if (isPWMModel && isGLCK) {
                return {
                    gclkNumPerScan: 65,
                    validGclkNumPerScan: 69,
                    brightGclkNumPerScan: 64,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 133,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5153:
        case ChipType_1.ChipTypeEnum.Chip_MBI5252:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 3) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 128,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_ICN2053:
        case ChipType_1.ChipTypeEnum.Chip_ICND2055:
        case ChipType_1.ChipTypeEnum.Chip_ICN2065:
        case ChipType_1.ChipTypeEnum.Chip_ICN2050:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1034,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 522,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 266,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 138,
                validGclkNumPerScan: 128,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_SM16159:
        case ChipType_1.ChipTypeEnum.Chip_SM16169S:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1025,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 513,
                    brightGclkNumPerScan: 513,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 128,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5253:
        case ChipType_1.ChipTypeEnum.Chip_MBI5253B:
        case ChipType_1.ChipTypeEnum.Chip_MBI5359:
            if (!isGLCK && !isPWMModel) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 513,
                        validGclkNumPerScan: 512,
                        brightGclkNumPerScan: 512,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 129,
                        validGclkNumPerScan: 128,
                        brightGclkNumPerScan: 128,
                    };
                }
                if (partNumPerRef <= 3) {
                    return {
                        gclkNumPerScan: 128,
                        validGclkNumPerScan: 128,
                        brightGclkNumPerScan: 128,
                    };
                }
                return {
                    gclkNumPerScan: 128,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            if (isGLCK && !isPWMModel) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 257,
                        validGclkNumPerScan: 256,
                        brightGclkNumPerScan: 256,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 65,
                        validGclkNumPerScan: 64,
                        brightGclkNumPerScan: 64,
                    };
                }
                if (partNumPerRef <= 3) {
                    return {
                        gclkNumPerScan: 64,
                        validGclkNumPerScan: 128,
                        brightGclkNumPerScan: 64,
                    };
                }
                return {
                    gclkNumPerScan: 64,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 64,
                };
            }
            if (!isGLCK && isPWMModel) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 257,
                        validGclkNumPerScan: 256,
                        brightGclkNumPerScan: 256,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 65,
                        validGclkNumPerScan: 64,
                        brightGclkNumPerScan: 64,
                    };
                }
                if (partNumPerRef <= 3) {
                    return {
                        gclkNumPerScan: 64,
                        validGclkNumPerScan: 64,
                        brightGclkNumPerScan: 64,
                    };
                }
                return {
                    gclkNumPerScan: 64,
                    validGclkNumPerScan: 64,
                    brightGclkNumPerScan: 64,
                };
            }
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 33,
                    validGclkNumPerScan: 32,
                    brightGclkNumPerScan: 32,
                };
            }
            if (partNumPerRef <= 3) {
                return {
                    gclkNumPerScan: 32,
                    validGclkNumPerScan: 64,
                    brightGclkNumPerScan: 32,
                };
            }
            return {
                gclkNumPerScan: 32,
                validGclkNumPerScan: 64,
                brightGclkNumPerScan: 32,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5051B:
        case ChipType_1.ChipTypeEnum.Chip_MBI5155:
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 1025,
                    validGclkNumPerScan: 1024,
                    brightGclkNumPerScan: 1024,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 3) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 5) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 6) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 7) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            return {
                gclkNumPerScan: 129,
                validGclkNumPerScan: 128,
                brightGclkNumPerScan: 128,
            };
        case ChipType_1.ChipTypeEnum.Chip_MBI5353:
        case ChipType_1.ChipTypeEnum.Chip_MBI5354:
            if (!isPWMModel) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 1025,
                        validGclkNumPerScan: 1024,
                        brightGclkNumPerScan: 1024,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 513,
                        validGclkNumPerScan: 512,
                        brightGclkNumPerScan: 512,
                    };
                }
                if (partNumPerRef <= 4) {
                    return {
                        gclkNumPerScan: 257,
                        validGclkNumPerScan: 256,
                        brightGclkNumPerScan: 256,
                    };
                }
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            return {
                gclkNumPerScan: 65,
                validGclkNumPerScan: 64,
                brightGclkNumPerScan: 64,
            };
        case ChipType_1.ChipTypeEnum.Chip_MY9373:
            if (isGLCK) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 513,
                        validGclkNumPerScan: 512,
                        brightGclkNumPerScan: 1024,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 257,
                        validGclkNumPerScan: 256,
                        brightGclkNumPerScan: 512,
                    };
                }
                if (partNumPerRef <= 3) {
                    return {
                        gclkNumPerScan: 129,
                        validGclkNumPerScan: 128,
                        brightGclkNumPerScan: 256,
                    };
                }
                return {
                    gclkNumPerScan: 65,
                    validGclkNumPerScan: 64,
                    brightGclkNumPerScan: 128,
                };
            }
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 513,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 257,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 3) {
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            return {
                gclkNumPerScan: 65,
                validGclkNumPerScan: 64,
                brightGclkNumPerScan: 64,
            };
        case ChipType_1.ChipTypeEnum.Chip_MY9348:
        case ChipType_1.ChipTypeEnum.Chip_MY9748:
            if (!isPWMModel || chipType === ChipType_1.ChipTypeEnum.Chip_MY9748) {
                if (partNumPerRef <= 1) {
                    return {
                        gclkNumPerScan: 512,
                        validGclkNumPerScan: 512,
                        brightGclkNumPerScan: 512,
                    };
                }
                if (partNumPerRef <= 2) {
                    return {
                        gclkNumPerScan: 256,
                        validGclkNumPerScan: 256,
                        brightGclkNumPerScan: 256,
                    };
                }
                if (partNumPerRef <= 4) {
                    return {
                        gclkNumPerScan: 128,
                        validGclkNumPerScan: 128,
                        brightGclkNumPerScan: 128,
                    };
                }
                return {
                    gclkNumPerScan: 64,
                    validGclkNumPerScan: 64,
                    brightGclkNumPerScan: 64,
                };
            }
            if (partNumPerRef <= 1) {
                return {
                    gclkNumPerScan: 256,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 128,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 64,
                    validGclkNumPerScan: 64,
                    brightGclkNumPerScan: 64,
                };
            }
            return {
                gclkNumPerScan: 32,
                validGclkNumPerScan: 32,
                brightGclkNumPerScan: 32,
            };
        case ChipType_1.ChipTypeEnum.Chip_SM16359:
            if (partNumPerRef <= 2) {
                return {
                    gclkNumPerScan: 515,
                    validGclkNumPerScan: 512,
                    brightGclkNumPerScan: 512,
                };
            }
            if (partNumPerRef <= 4) {
                return {
                    gclkNumPerScan: 259,
                    validGclkNumPerScan: 256,
                    brightGclkNumPerScan: 256,
                };
            }
            if (partNumPerRef <= 8) {
                return {
                    gclkNumPerScan: 131,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            return {
                gclkNumPerScan: 67,
                validGclkNumPerScan: 64,
                brightGclkNumPerScan: 64,
            };
        default:
            if (chipType !== ChipType_1.ChipTypeEnum.Chip_VOD5153 && chipType !== ChipType_1.ChipTypeEnum.Chip_ICND2163) {
                return {
                    gclkNumPerScan: 129,
                    validGclkNumPerScan: 128,
                    brightGclkNumPerScan: 128,
                };
            }
            return {
                gclkNumPerScan: 74,
                validGclkNumPerScan: 64,
                brightGclkNumPerScan: 64,
            };
    }
}
exports.GetGclkInfoByPartNumPerRef = GetGclkInfoByPartNumPerRef;
exports.isValidScanBdProp = (0, common_1.hasProps)('IsDExtendMode', 'TwentyDataGroupEnable', 'Is24DataGroup', 'Is28DataGroup', 'StandardLedModuleProp', 'IsSymmetricalOutputMode', 'CommonIrCabinetMode', 'IsIrRegular', 'ChipPropey', 'SpecialFrameRate');
exports.isValidStandardLedModuleProp = (0, common_1.hasProps)('ScreenDriveType');
const GetDoorCountFromScanBdInfo = (scanBdProp) => {
    if (!(0, exports.isValidScanBdProp)(scanBdProp))
        throw new TypeError('Invalid ScanBoardProperty');
    const { IsSymmetricalOutputMode, CommonIrCabinetMode } = scanBdProp;
    if (IsSymmetricalOutputMode)
        return 2;
    switch (CommonIrCabinetMode) {
        case CommonIrCabinetType_1.CommonIrCabinetTypeEnum.FourDoor:
            return 4;
        case CommonIrCabinetType_1.CommonIrCabinetTypeEnum.ThreeDoor:
            return 3;
        default:
            return 1;
    }
};
exports.GetDoorCountFromScanBdInfo = GetDoorCountFromScanBdInfo;
const GetMaxCabinetDataGroup = (scanBdProp) => {
    if (!(0, exports.isValidScanBdProp)(scanBdProp))
        throw new TypeError('Invalid ScanBoardProperty');
    const { StandardLedModuleProp: { ScreenDriveType }, IsDExtendMode, TwentyDataGroupEnable, Is24DataGroup, Is28DataGroup, } = scanBdProp;
    switch (ScreenDriveType) {
        case ScreenDriveType_1.ScreenDriveTypeEnum.Concurrent:
            if (IsDExtendMode)
                return 32;
            if (TwentyDataGroupEnable)
                return 20;
            if (Is28DataGroup)
                return 28;
            if (Is24DataGroup)
                return 24;
            return 16;
        case ScreenDriveType_1.ScreenDriveTypeEnum.Serial:
            return IsDExtendMode ? 128 : 64;
        default:
            throw new TypeError('Invalid ScreenDriveType');
    }
};
exports.GetMaxCabinetDataGroup = GetMaxCabinetDataGroup;
const alignGroup = (value, screenDriveType) => {
    if (screenDriveType === ScreenDriveType_1.ScreenDriveTypeEnum.Serial) {
        if (value <= 8)
            return 8;
        if (value < 16)
            return 16;
    }
    else if (value < 4) {
        return 4;
    }
    return value;
};
const GetHorizontalCascadeMaxLoad = (scanBdProp, maxLoadedPixels, maxArea) => {
    if (!(0, exports.isValidScanBdProp)(scanBdProp))
        throw new TypeError('Invalid ScanBoardProperty');
    const { StandardLedModuleProp, Height } = scanBdProp;
    if (!(0, exports.isValidStandardLedModuleProp)(StandardLedModuleProp))
        throw new TypeError('Invalid StandardLedModuleProp');
    const cabinetDataGroup = (0, exports.GetMaxCabinetDataGroup)(scanBdProp);
    const countFromScanBdInfo = (0, exports.GetDoorCountFromScanBdInfo)(scanBdProp);
    const { ScanType, DataGroup, ModulePixelCols, ModulePixelRows, TotalPointInTable, ScreenDriveType, } = StandardLedModuleProp;
    const num1 = cabinetDataGroup / countFromScanBdInfo / DataGroup;
    const maxHeight = ModulePixelRows * num1;
    const rows = Math.ceil(Height / ModulePixelRows);
    const num3 = alignGroup(rows * DataGroup, ScreenDriveType);
    const maxC = Math.floor(maxArea / ScanType / num3);
    const c = Math.floor((maxLoadedPixels * ModulePixelCols) / TotalPointInTable);
    return {
        maxHeight,
        maxWidth: Math.min(maxC, c) * countFromScanBdInfo,
    };
};
exports.GetHorizontalCascadeMaxLoad = GetHorizontalCascadeMaxLoad;
const GetVerticalCascadeMaxLoad = (scanBdProp, maxLoadedPixels, maxArea) => {
    if (!(0, exports.isValidScanBdProp)(scanBdProp))
        throw new TypeError('Invalid ScanBoardProperty');
    const { Width, StandardLedModuleProp } = scanBdProp;
    if (!(0, exports.isValidStandardLedModuleProp)(StandardLedModuleProp))
        throw new TypeError('Invalid StandardLedModuleProp');
    const cabinetDataGroup = (0, exports.GetMaxCabinetDataGroup)(scanBdProp);
    const countFromScanBdInfo = (0, exports.GetDoorCountFromScanBdInfo)(scanBdProp);
    const { ScanType, DataGroup, ModulePixelCols, ModulePixelRows, TotalPointInTable, ScreenDriveType, } = StandardLedModuleProp;
    const num1 = cabinetDataGroup / countFromScanBdInfo / DataGroup;
    const maxWidth = ModulePixelCols * num1;
    const cols = Math.ceil(Width / ModulePixelCols);
    const num3 = alignGroup(cols * DataGroup, ScreenDriveType);
    const maxR = Math.floor(maxArea / ScanType / num3);
    const r = Math.floor((maxLoadedPixels * ModulePixelRows) / TotalPointInTable);
    return {
        maxWidth,
        maxHeight: Math.min(maxR, r) * countFromScanBdInfo,
    };
};
exports.GetVerticalCascadeMaxLoad = GetVerticalCascadeMaxLoad;
const CaculateMaxloadSize = (scanBdProp, maxLoadedPixels, maxArea) => {
    switch (scanBdProp.ModCascadeType) {
        case ModuleCascadeDiretion_1.ModuleCascadeDiretionEnum.RightLeft:
        case ModuleCascadeDiretion_1.ModuleCascadeDiretionEnum.LeftRight: {
            const { maxWidth, ...other } = (0, exports.GetHorizontalCascadeMaxLoad)(scanBdProp, maxLoadedPixels, maxArea);
            return {
                maxWidth: scanBdProp.Height ? Math.min(maxArea / scanBdProp.Height, maxArea) : 0,
                ...other,
            };
        }
        case ModuleCascadeDiretion_1.ModuleCascadeDiretionEnum.DownUp:
        case ModuleCascadeDiretion_1.ModuleCascadeDiretionEnum.UpDown: {
            const { maxHeight, ...other } = (0, exports.GetVerticalCascadeMaxLoad)(scanBdProp, maxLoadedPixels, maxArea);
            return {
                maxHeight: scanBdProp.Width ? Math.min(maxArea / scanBdProp.Width, maxArea) : 0,
                ...other,
            };
        }
        default:
            throw new TypeError('Invalid ModCascadeType');
    }
};
exports.CaculateMaxloadSize = CaculateMaxloadSize;
const CaculateCutMapAddrIndex = (width, cutRect, pointBytes) => {
    const cutMapInfoList = [];
    for (let index = 0; index < cutRect.height; index += 1) {
        const address = ((cutRect.y + index) * width + cutRect.x) * pointBytes;
        const length = cutRect.width * pointBytes;
        cutMapInfoList.push({
            address,
            length,
        });
    }
    return cutMapInfoList;
};
exports.CaculateCutMapAddrIndex = CaculateCutMapAddrIndex;
//# sourceMappingURL=CommonCalculator.js.map
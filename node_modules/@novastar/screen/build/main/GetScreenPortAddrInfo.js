"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ScreenPortAddrInfo_1 = require("@novastar/native/ScreenPortAddrInfo");
const common_1 = require("@novastar/native/common");
const range_1 = __importDefault(require("lodash/range"));
const common_2 = require("./common");
const GroupKeys = ['SenderIndex', 'PortIndex'];
const groupBySenderPort = (0, common_2.groupByProps)(...GroupKeys);
const notEmptySenderPort = (0, common_2.hasProps)(...GroupKeys);
function GetScreenPortAddrInfo(scr) {
    if ((0, common_2.isSimpleScreen)(scr)) {
        const { PortCols = 0, PortRows = 0, PortScanBdInfoList = [] } = scr;
        return (0, range_1.default)(PortCols * PortRows).map(index => {
            const { ScanBdBegColNo = 0, ScanBdEndColNo = 0, ScanBdBegRowNo = 0, ScanBdEndRowNo = 0, PortIndex = 0, } = PortScanBdInfoList[index] ?? {};
            const cols = ScanBdEndColNo - ScanBdBegColNo;
            const rows = ScanBdEndRowNo - ScanBdBegRowNo;
            const count = cols * rows;
            return (0, common_1.makeStruct)(ScreenPortAddrInfo_1.ScreenPortAddrInfo, {
                SenderIndex: scr.SenderIndex ?? 0,
                PortIndex,
                LoadScannerCount: count,
                MinConnectIndex: 0,
                MaxConnectIndex: count - 1,
            });
        });
    }
    const list = ((0, common_2.isStandardScreen)(scr) ? scr.ScannerRegionList : scr.ScanBoardRegionInfoList) ?? [];
    const filtered = list.filter(notEmptySenderPort).filter(({ SenderIndex }) => SenderIndex !== 255);
    return groupBySenderPort(filtered).map(([group, regions]) => {
        const connections = regions.map(({ ConnectIndex }) => ConnectIndex).filter(common_2.notEmpty);
        return (0, common_1.makeStruct)(ScreenPortAddrInfo_1.ScreenPortAddrInfo, {
            ...group,
            LoadScannerCount: regions.length,
            MinConnectIndex: Math.min(...connections),
            MaxConnectIndex: Math.max(...connections),
        });
    });
}
exports.default = GetScreenPortAddrInfo;
//# sourceMappingURL=GetScreenPortAddrInfo.js.map
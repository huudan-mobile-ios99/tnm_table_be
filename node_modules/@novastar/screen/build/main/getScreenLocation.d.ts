import type { Point } from '@novastar/native/common';
import { LEDDisplayInfo } from './common';
export type Location = {
    leftTop: Point;
    rightBottom: Point;
    cols: number;
    rows: number;
};
export declare const notEmptyXY: <T extends Partial<Record<"X" | "Y" | "Width" | "Height", unknown>>>(y: T) => y is T & {
    X: Exclude<T["X"], undefined>;
    Y: Exclude<T["Y"], undefined>;
    Width: Exclude<T["Width"], undefined>;
    Height: Exclude<T["Height"], undefined>;
} extends infer T_1 ? { [P in keyof T_1]: (T & {
    X: Exclude<T["X"], undefined>;
    Y: Exclude<T["Y"], undefined>;
    Width: Exclude<T["Width"], undefined>;
    Height: Exclude<T["Height"], undefined>;
})[P]; } : never;
export default function getScreenLocation(screen: LEDDisplayInfo): Location;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeComplexLEDDisplayInfo = exports.ComplexScreen = void 0;
const ComplexLEDDisplayInfo_1 = require("@novastar/native/ComplexLEDDisplayInfo");
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const Either_1 = require("fp-ts/Either");
const PathReporter_1 = require("io-ts/PathReporter");
const typed_struct_1 = __importStar(require("typed-struct"));
const ComplexRegionInfo_1 = require("./ComplexRegionInfo");
exports.ComplexScreen = new typed_struct_1.default('ComplexScreen')
    .UInt8('Type', LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType)
    .UInt8('VirtualMode', (0, typed_struct_1.typed)())
    .UInt32LE('ScannerCount')
    .StructArray('ScanBoardRegionInfoList', ComplexRegionInfo_1.ComplexRegionInfo)
    .compile();
const decodeComplexLEDDisplayInfo = (data) => {
    const screen = new exports.ComplexScreen(data).toJSON();
    const validation = ComplexLEDDisplayInfo_1.ComplexLEDDisplayInfo.decode(screen);
    if ((0, Either_1.isLeft)(validation))
        throw new TypeError(`Invalid complex screen: ${PathReporter_1.PathReporter.report(validation)}`);
    return validation.right;
};
exports.decodeComplexLEDDisplayInfo = decodeComplexLEDDisplayInfo;
//# sourceMappingURL=ComplexScreen.js.map
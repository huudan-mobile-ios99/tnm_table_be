"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeScreenInfo = void 0;
const LEDDisplyType_1 = require("@novastar/native/LEDDisplyType");
const ScreenInfoRelativeAddress_1 = __importDefault(require("@novastar/native/ScreenInfoRelativeAddress"));
const debug_1 = __importDefault(require("debug"));
const ComplexScreen_1 = require("./ComplexScreen");
const SimpleSingleScreen_1 = require("./SimpleSingleScreen");
const StandardScreen_1 = require("./StandardScreen");
const common_1 = require("./common");
const debug = (0, debug_1.default)('novastar:ScreenInfo');
const ScreenDataNewVer = 1005;
function decodeDVI1600Info(data) {
    const StartAddressIndex = 28;
    const scrCrc = data.readUInt16LE(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_CRC);
    if ((0, common_1.crc16)(data.slice(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_RESERVED), 0) !== scrCrc)
        throw new TypeError('Invalid CRC');
    const screenCount = data.readUInt8(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENCOUNT);
    const typeOffset = ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENLENINFOADDR + screenCount * 4;
    if (data.length < typeOffset + 1)
        throw new Error('Invalid length');
    const dviExtendsPos = data.readUInt32LE(StartAddressIndex);
    let dviExtends;
    if (dviExtendsPos < data.length) {
        const offset = dviExtendsPos + 2;
        const dviExtendsLength = data.readUInt16LE(dviExtendsPos);
        dviExtends = JSON.parse(data.slice(offset, offset + dviExtendsLength).toString());
    }
    debug(`dviExtends: ${JSON.stringify(dviExtends)}`);
    return dviExtends;
}
/**
 * SoftWareSpaceAnalyser:443
 * @param data
 */
function decodeScreenInfo(data) {
    if ((0, common_1.crc16)(data.slice(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_RESERVED), 0) !==
        data.readUInt16LE(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_CRC))
        throw new Error('Invalid screen info crc');
    if (data.length < ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENLENINFOADDR)
        throw new Error('Invalid length of screen info');
    const version = data.readUInt16LE(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_VERSION);
    debug(`version: ${version}`);
    const dviExtends = version === ScreenDataNewVer + 1 ? decodeDVI1600Info(data) : undefined;
    const screenCount = data.readUInt8(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENCOUNT);
    debug(`screenCount: ${screenCount}`);
    let screenDataPos = screenCount * 4 + ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENLENINFOADDR;
    if (data.length < screenDataPos)
        throw new Error('Invalid length of screen info');
    const screens = [];
    for (let i = 0; i < screenCount; i += 1) {
        const length = data.readUInt32LE(ScreenInfoRelativeAddress_1.default.SCREEN_HEADERINFO_SCREENLENINFOADDR + 4 * i);
        const type = data.readUInt8(screenDataPos);
        debug(`[${i}]; type: ${type}; length: ${length}`);
        switch (type) {
            case LEDDisplyType_1.LEDDisplyTypeEnum.SimpleSingleType:
                screens.push((0, SimpleSingleScreen_1.decodeSimpleLEDDisplayInfo)(data.slice(screenDataPos, screenDataPos + length)));
                break;
            case LEDDisplyType_1.LEDDisplyTypeEnum.StandardType:
                screens.push((0, StandardScreen_1.decodeStandardLEDDisplayInfo)(data.slice(screenDataPos, screenDataPos + length)));
                break;
            case LEDDisplyType_1.LEDDisplyTypeEnum.ComplexType:
                screens.push((0, ComplexScreen_1.decodeComplexLEDDisplayInfo)(data.slice(screenDataPos, screenDataPos + length)));
                break;
            default:
                throw new TypeError('Invalid led display type');
        }
        screenDataPos += length;
    }
    return {
        version,
        screens,
        dviExtends,
    };
}
exports.decodeScreenInfo = decodeScreenInfo;
//# sourceMappingURL=ScreenInfo.js.map
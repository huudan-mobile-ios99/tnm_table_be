"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeModulationInfo = exports.decodeModulationInfo = exports.ModulationInfoHeader = exports.SenderModulationDataVer = exports.SenderModulationFlag = void 0;
const ModulationModeType_1 = require("@novastar/native/ModulationModeType");
const SenderModulationInfo_1 = require("@novastar/native/SenderModulationInfo");
const common_1 = require("@novastar/native/common");
const typed_struct_1 = __importStar(require("typed-struct"));
const common_2 = require("./common");
exports.SenderModulationFlag = 'SSPE';
exports.SenderModulationDataVer = 1002;
const ModulationMode = new typed_struct_1.default('ModulationMode')
    .UInt8('mode', (0, typed_struct_1.typed)())
    .back(0)
    .seek(128)
    .compile();
const ModulationInfo = new typed_struct_1.default('ModulationInfo')
    .UInt8('portIndex')
    .back(0)
    .seek(128)
    .StructArray('modes', ModulationMode)
    .compile();
exports.ModulationInfoHeader = new typed_struct_1.default('ModulationInfoHeader')
    .String('header', {
    encoding: 'ascii',
    length: exports.SenderModulationFlag.length,
})
    .UInt16LE('version')
    .UInt16LE('crc')
    .UInt16LE('length')
    .UInt8('count')
    .back(0)
    .seek(256)
    .Buffer('data')
    .compile();
const useDistributor = [ModulationModeType_1.ModulationModeTypeEnum.OneToEight, ModulationModeType_1.ModulationModeTypeEnum.TwoToFour];
const decodeModulationInfo = (buf) => {
    const header = new exports.ModulationInfoHeader(buf);
    if ((0, common_2.crc16)(buf.slice(exports.ModulationInfoHeader.getOffsetOf('crc') + 2), 0) !== header.crc)
        throw new Error('Invalid ModulationInfoHeader crc');
    const result = [];
    for (let SenderIndex = 0, offset = 0; SenderIndex < header.count && offset < header.length; SenderIndex += 1) {
        const portIndex = header.data[offset];
        const length = ModulationInfo.baseSize + ModulationMode.baseSize * portIndex;
        const info = new ModulationInfo(header.data.slice(offset, offset + length)).toJSON();
        const modes = info.modes.map(({ mode }) => mode);
        result.push((0, common_1.makeStruct)(SenderModulationInfo_1.SenderModulationInfo, {
            SenderIndex,
            PortIndex: info.portIndex,
            ModulationModeTypeInfoList: modes,
            IsUseDistributor: modes.some(mode => useDistributor.includes(mode)),
        }));
        offset += length;
    }
    return result;
};
exports.decodeModulationInfo = decodeModulationInfo;
const encodeModulationInfo = (modulations) => {
    const length = modulations.reduce((acc, item) => acc +
        ModulationInfo.baseSize +
        item.ModulationModeTypeInfoList.length * ModulationMode.baseSize, 0);
    const infoHeader = new exports.ModulationInfoHeader(exports.ModulationInfoHeader.baseSize + length);
    infoHeader.length = length;
    infoHeader.version = exports.SenderModulationDataVer;
    infoHeader.count = modulations.length;
    for (let index = 0, offset = 0; index < modulations.length; index += 1) {
        const { ModulationModeTypeInfoList } = modulations[index];
        const size = ModulationInfo.baseSize + ModulationMode.baseSize * ModulationModeTypeInfoList.length;
        const info = new ModulationInfo(infoHeader.data.slice(offset, offset + size));
        info.portIndex = ModulationModeTypeInfoList.length;
        ModulationModeTypeInfoList.forEach((mode, i) => {
            info.modes[i].mode = mode;
        });
        offset += size;
    }
    const raw = exports.ModulationInfoHeader.raw(infoHeader);
    infoHeader.crc = (0, common_2.crc16)(raw.slice(exports.ModulationInfoHeader.getOffsetOf('crc') + 2), 0);
    return raw;
};
exports.encodeModulationInfo = encodeModulationInfo;
//# sourceMappingURL=ModulationInfo.js.map
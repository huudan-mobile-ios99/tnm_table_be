"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeRedundancyInfo = exports.decodeRedundancyInfo = exports.RedundancyInfo = exports.ReduDataVer = exports.ReduFlag = void 0;
const SenderRedundancyInfo_1 = require("@novastar/native/SenderRedundancyInfo");
const common_1 = require("@novastar/native/common");
const typed_struct_1 = __importDefault(require("typed-struct"));
const common_2 = require("./common");
exports.ReduFlag = 'REDU';
exports.ReduDataVer = 1001;
const RedundancyItem = new typed_struct_1.default('RedundancyItem')
    .UInt32LE('MasterSenderIndex')
    .UInt32LE('MasterPortIndex')
    .UInt32LE('SlaveSenderIndex')
    .UInt32LE('SlavePortIndex')
    .compile();
exports.RedundancyInfo = new typed_struct_1.default('RedundancyInfo')
    .String('header', exports.ReduFlag.length, 'ascii')
    .UInt16LE('version')
    .UInt16LE('crc')
    .UInt16LE('length')
    .StructArray('items', RedundancyItem)
    .compile();
const dataOffset = exports.RedundancyInfo.getOffsetOf('crc') + 2;
const decodeRedundancyInfo = (data) => {
    const { crc: crcInfo, items } = new exports.RedundancyInfo(data).toJSON();
    if ((0, common_2.crc16)(data.slice(dataOffset), 0) !== crcInfo)
        throw new Error('Invalid RedundancyInfo crc');
    return items.map(item => (0, common_1.makeStruct)(SenderRedundancyInfo_1.SenderRedundancyInfo, item));
};
exports.decodeRedundancyInfo = decodeRedundancyInfo;
const encodeRedundancyInfo = (reduList) => {
    const length = reduList.length * RedundancyItem.baseSize;
    const info = new exports.RedundancyInfo(exports.RedundancyInfo.baseSize + length);
    info.header = exports.ReduFlag;
    info.version = exports.ReduDataVer;
    info.length = length;
    reduList.forEach((item, index) => {
        Object.assign(info.items[index], item);
    });
    const raw = exports.RedundancyInfo.raw(info);
    info.crc = (0, common_2.crc16)(raw.slice(dataOffset), 0);
    return raw;
};
exports.encodeRedundancyInfo = encodeRedundancyInfo;
//# sourceMappingURL=RedundancyInfo.js.map
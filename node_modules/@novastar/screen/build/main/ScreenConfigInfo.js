"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenConfigInfo = void 0;
const ScanBoardConnectType_1 = require("@novastar/native/ScanBoardConnectType");
const typed_struct_1 = __importStar(require("typed-struct"));
exports.ScreenConfigInfo = new typed_struct_1.default('ScreenConfigInfo')
    .UInt8('Type', (0, typed_struct_1.typed)())
    .seek(1)
    .UInt16LE('X')
    .UInt16LE('Y')
    .UInt16LE('PixelColsInScanBd')
    .UInt16LE('PixelRowsInScanBd')
    .UInt8('ScanBdRows')
    .UInt8('ScanBdCols')
    .Custom('ConnectType', 1, (type, [value]) => {
    switch (value) {
        case 0:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftTop_Horizontal;
        case 1:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftTop_Vertical;
        case 2:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightTop_Horizontal;
        case 3:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightTop_Vertical;
        case 4:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftBottom_Horizontal;
        case 5:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftBottom_Vertical;
        case 6:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightBottom_Horizontal;
        default:
            return ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightBottom_Vertical;
    }
}, (type, buf, value) => {
    let data;
    switch (value) {
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftTop_Horizontal:
            data = 0;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftTop_Vertical:
            data = 1;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightTop_Horizontal:
            data = 2;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightTop_Vertical:
            data = 3;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftBottom_Horizontal:
            data = 4;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.LeftBottom_Vertical:
            data = 5;
            break;
        case ScanBoardConnectType_1.ScanBoardConnectTypeEnum.RightBottom_Horizontal:
            data = 6;
            break;
        default:
            data = 7;
            break;
    }
    return buf.writeUInt8(data) > 0;
})
    .UInt16LE('CabinetsPerPort')
    .compile();
//# sourceMappingURL=ScreenConfigInfo.js.map
import { LEDDisplyTypeEnum } from '@novastar/native/LEDDisplyType';
import { StandardLEDDisplayInfo } from '@novastar/native/StandardLEDDisplayInfo';
import debugFactory from 'debug';
import { isLeft } from 'fp-ts/Either';
import { PathReporter } from 'io-ts/PathReporter';
import Struct, { typed } from 'typed-struct';
import { RegionInfo } from './RegionInfo';
const debug = debugFactory('novastar:standard-screen');
export const StandardScreen = new Struct('StandardScreen')
    .UInt8('Type', LEDDisplyTypeEnum.StandardType)
    .UInt8('VirtualMode', typed())
    .UInt16LE('X')
    .UInt16LE('Y')
    .UInt16LE('ScanBdCols')
    .UInt16LE('ScanBdRows')
    .StructArray('ScannerRegionList', RegionInfo)
    .compile();
export const decodeStandardLEDDisplayInfo = (data) => {
    const screen = new StandardScreen(data).toJSON();
    debug(`parse: ${JSON.stringify(screen)}`);
    const validation = StandardLEDDisplayInfo.decode(screen);
    if (isLeft(validation))
        throw new TypeError(`Invalid standard screen info: ${PathReporter.report(validation)}`);
    return validation.right;
};
//# sourceMappingURL=StandardScreen.js.map
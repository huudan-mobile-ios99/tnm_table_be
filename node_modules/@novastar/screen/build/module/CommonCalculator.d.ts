import { ChipTypeEnum } from '@novastar/native/ChipType';
import { DataDirectionTypeEnum } from '@novastar/native/DataDirectionType';
import type { ScanBoardProperty } from '@novastar/native/ScanBoardProperty';
import { CutMapInfo, Rectangle } from './fullScreenSelect';
export declare function CaculateShiftUnitNum(modWidth: number, modHeight: number, modTotalPointInTable: number, directionType: DataDirectionTypeEnum, cabinetRealWidth: number, cabinetRealHeight: number): number;
export declare const GetGrayScaleByGclkNumPerRef: (gclkNumPerRef: number) => 16 | 12 | 14 | 15 | 13 | 11 | 10;
type GetGclkInfoByPartNumPerRefReturnType = {
    gclkNumPerScan: number;
    validGclkNumPerScan: number;
    brightGclkNumPerScan: number;
};
export declare function GetGclkInfoByPartNumPerRef(chipType: ChipTypeEnum, partNumPerRef: number, isPWMModel?: boolean, isGLCK?: boolean): GetGclkInfoByPartNumPerRefReturnType;
export declare const isValidScanBdProp: <T extends Partial<Record<"IsDExtendMode" | "TwentyDataGroupEnable" | "Is24DataGroup" | "Is28DataGroup" | "StandardLedModuleProp" | "IsSymmetricalOutputMode" | "CommonIrCabinetMode" | "IsIrRegular" | "ChipPropey" | "SpecialFrameRate", unknown>>>(y: T) => y is T & {
    IsDExtendMode: Exclude<T["IsDExtendMode"], undefined>;
    TwentyDataGroupEnable: Exclude<T["TwentyDataGroupEnable"], undefined>;
    Is24DataGroup: Exclude<T["Is24DataGroup"], undefined>;
    Is28DataGroup: Exclude<T["Is28DataGroup"], undefined>;
    StandardLedModuleProp: Exclude<T["StandardLedModuleProp"], undefined>;
    IsSymmetricalOutputMode: Exclude<T["IsSymmetricalOutputMode"], undefined>;
    CommonIrCabinetMode: Exclude<T["CommonIrCabinetMode"], undefined>;
    IsIrRegular: Exclude<T["IsIrRegular"], undefined>;
    ChipPropey: Exclude<T["ChipPropey"], undefined>;
    SpecialFrameRate: Exclude<T["SpecialFrameRate"], undefined>;
} extends infer T_1 ? { [P in keyof T_1]: (T & {
    IsDExtendMode: Exclude<T["IsDExtendMode"], undefined>;
    TwentyDataGroupEnable: Exclude<T["TwentyDataGroupEnable"], undefined>;
    Is24DataGroup: Exclude<T["Is24DataGroup"], undefined>;
    Is28DataGroup: Exclude<T["Is28DataGroup"], undefined>;
    StandardLedModuleProp: Exclude<T["StandardLedModuleProp"], undefined>;
    IsSymmetricalOutputMode: Exclude<T["IsSymmetricalOutputMode"], undefined>;
    CommonIrCabinetMode: Exclude<T["CommonIrCabinetMode"], undefined>;
    IsIrRegular: Exclude<T["IsIrRegular"], undefined>;
    ChipPropey: Exclude<T["ChipPropey"], undefined>;
    SpecialFrameRate: Exclude<T["SpecialFrameRate"], undefined>;
})[P]; } : never;
export declare const isValidStandardLedModuleProp: <T extends Partial<Record<"ScreenDriveType", unknown>>>(y: T) => y is T & {
    ScreenDriveType: Exclude<T["ScreenDriveType"], undefined>;
} extends infer T_1 ? { [P in keyof T_1]: (T & {
    ScreenDriveType: Exclude<T["ScreenDriveType"], undefined>;
})[P]; } : never;
export declare const GetDoorCountFromScanBdInfo: (scanBdProp: Readonly<ScanBoardProperty>) => number;
export declare const GetMaxCabinetDataGroup: (scanBdProp: Readonly<ScanBoardProperty>) => number;
export type MaxloadSize = {
    maxWidth: number;
    maxHeight: number;
};
export declare const GetHorizontalCascadeMaxLoad: (scanBdProp: Readonly<ScanBoardProperty>, maxLoadedPixels: number, maxArea: number) => MaxloadSize;
export declare const GetVerticalCascadeMaxLoad: (scanBdProp: Readonly<ScanBoardProperty>, maxLoadedPixels: number, maxArea: number) => MaxloadSize;
export declare const CaculateMaxloadSize: (scanBdProp: Readonly<ScanBoardProperty>, maxLoadedPixels: number, maxArea: number) => MaxloadSize;
export declare const CaculateCutMapAddrIndex: (width: number, cutRect: Rectangle, pointBytes: number) => CutMapInfo[];
export {};

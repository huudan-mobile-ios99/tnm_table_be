/// <reference types="node" />
import { RotateAngleEnum } from '@novastar/native/RotateAngle';
import type { ScanBoardProperty } from '@novastar/native/ScanBoardProperty';
import { ExtractType } from 'typed-struct';
/**
 * Nova.LCT.GigabitSystem.DataClass.dll
 *
 * Nova.LCT.GigabitSystem.Common::ScanBoardProperty
 */
export declare const ScanboardData: import("typed-struct").StructConstructor<{
    GammaValue: number;
    Brightness: number;
    RedBright: number;
    GreenBright: number;
    BlueBright: number;
    VRedBright: number;
    MonitorRGBCode: Buffer;
    ScreenDriveType: number;
    DclkHighRatio: number;
    DataDirectType: number;
    ModulePixelCols: number;
    ModulePixelRows: number;
    DriverChipType: number;
    ScanType: number;
    OEPolarity: number;
    DecType: number;
    DataGroup: number;
    DataGroupSequence: Buffer;
    ModuleCols: number;
    ModuleRows: number;
    Width: number;
    Height: number;
    PhysicalDataGroupNum: number;
    ModCascadeType: number;
    TotalPointInTable: number;
    PointNumberPerDriver: number;
    CommonIrCabinetMode: number;
    IsIrRegular: number;
    LogicalDataGroupNum: number;
    DriverFucntion: number;
    Is28DataGroup: boolean;
    Is24DataGroup: boolean;
    IsDExtendMode: boolean;
    GrayDepth: number;
    GrayMode: number;
    GrayRealize: number;
    RefNumPerVs: number;
    LineBias: number;
    BlankUnitNumPerScan: number;
    RowChangePoint: number;
    ABCDRollOver: number;
    IsReverseScanOutput: number;
    ScanABCDCodeDesc: number;
    GclkNumPerScan: number;
    LightTimeRatio: number;
    ShiftUnitNum: number;
    TotalUnitNum: number;
    LightTime: number;
    DclkUnitCycle: number;
    DclkPhase: number;
    DclkHigh: number;
    GCLKRate: number;
    GCLKPhase: number;
    GCLKDuty: number;
    SubFields: number;
    readonly SubFieldPart: Buffer;
    readonly RowsCtrlByDataGroup: Buffer;
    TotalGclkUnitNumPerScan: number;
    IsChromaCorrentionLowGray: number;
    IsEnableCalibration: number;
    CorrectionMode: number;
    CoefSourceType: number;
    OfflineFrame: number;
    readonly ScanABCDCode: Buffer;
    RGBCode: Buffer;
    MaxGammaValue: number;
    LightTimeNum2: number;
    EnhancedModeSwitch: number;
    EnhancedMode: number;
    LineScanTime: number;
    IsSymmetricalOutputMode: boolean;
    IsOpenClearBlankLine: boolean;
    LowAshCompensationOne: number;
    LowAshCompensationTwo: number;
    IsOpenLowAshCompensation: boolean;
    DriverTypePro: number;
    DecodeTypePro: number;
    GPositiveNegativeValue: number;
    BPositiveNegativeValue: number;
    IsOpenSetGainValue: boolean;
    RPositiveNegativeValue: number;
    readonly Gain3: Buffer;
    PowerOnBrightnessAdjustEn: boolean;
    OpenEMCFun: boolean;
    StartRefNumPerVs: number;
    StartSubFields: number;
    EndRefNumPerVs: number;
    EndSubFields: number;
    FirstScanCompensation: number;
    OtherScanCompenscation: number;
    IsEnableOtherRefreshNumParams: boolean;
    readonly StartPositionOfDataGroup: Buffer;
    readonly Gain1: Buffer;
    IsCloseGhostSignal: boolean;
    IsGhostSignalNegation: boolean;
    SerialDecodeRepeatTimes: number;
    IsSupportMBI5041BNewTiming: boolean;
    IsSupportDriverInterDeghostEnable: boolean;
    LightFlashClose: boolean;
    CabinetRotateAngle: RotateAngleEnum;
    GrayEnhanced: number;
    RedNoCorrectionThreshold: number;
    GreenNoCorrectionThreshold: number;
    BlueNoCorrectionThreshold: number;
    VirRedNoCorrectionThreshold: number;
    RedNoCorrectionAttenuation: number;
    GreenNoCorrectionAttenuation: number;
    BlueNoCorrectionAttenuation: number;
    VirRedNoCorrectionAttenuation: number;
    CtrlEndPoint: number;
    LowGrayQuery: number;
    IsNewOERamEnable: number;
    LowGrayCompensation: number;
    AddrExtend: number;
    TwentyDataGroupEnable: boolean;
    GroupSwapEnable: boolean;
    readonly GroupSwapInfo: Buffer;
    IsLowGrayRamEnable: number;
    GrayDepthEx: number;
    PreChargeTime: number;
    DataGroupOutPutType: number;
    MBI515xDeltaT: number;
    MBI515xDhT: number;
    SerialColorNum: number;
    SerialDotsNumPerColor: number;
    SerialRGBCode: Buffer;
    LogicalShiftUnitNum: number;
    readonly Gain2: Buffer;
    ScanSequenceAdjustEn: boolean;
    readonly Gain4: Buffer;
    IsSupportHighLoad: number;
    EnFrameTimeMgt: number;
    IsStarSwipPoint: boolean;
    UnitIcCount: number;
    EnableEnhanceFirstScan: boolean;
    RealBrightnessOf2053: number;
    TotalLightCdfResault: number;
    readonly Gain5: Buffer;
    readonly ChannelEnableData: Buffer;
    readonly Gain6: Buffer;
    readonly Gain7: Buffer;
    ReduceHighContrast: number;
    TinyAfterglowMoment: number;
    TinyLineFeedMoment: number;
    UsingBright: number;
    UsingSUM2033Gamma: number;
    DisplayMode: number;
    LatDelay: number;
    CurrentPosition: number;
    CurrentPhase: number;
    EnableDirectMode: boolean;
    ChipNumber: number;
    BrightPriorityMode: number;
    OddEvenScan: number;
    ABCSignalDelayEnable: number;
    DESignalDelayEnable: number;
    ABCDESignalDelayTime: number;
    BitModel: number;
    AutoOrManual5252ResetSwitch: number;
    hour: number;
    minute: number;
    IntervalDate5252: number;
    RealPhysicalGroupNum: number;
    chipGrayBit: number;
}, "ScanboardData">;
export type ScanboardData = ExtractType<typeof ScanboardData, false>;
export declare const encodeScanBoardProperty: (scanBdProp: ScanBoardProperty) => Buffer;

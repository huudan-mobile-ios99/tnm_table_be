/// <reference types="node" />
import { Socket } from 'net';
import { API, Session } from '@novastar/codec';
import { TypedEmitter } from 'tiny-typed-emitter';
export declare const UDP_PORT = 3800;
export declare const MULTICAST_ADDRESS = "224.224.125.119";
export declare const REQ = "rqProMI:";
export declare const RES = "rpProMI:";
export declare const TCP_PORT = 5200;
export interface NetBindingEvents {
    /**
     * @event open Triggered once after opening a connection to a device
     * @param address Device address
     */
    open(address: string): void;
    /**
     * @event close Triggered once after closing a connection to a device
     * @param address Device address
     */
    close(address: string): void;
    disconnect(address: string): void;
}
/**
 * Finding network devices
 * @returns {Promise<string[]>} - addresses of found devices
 */
export declare const findNetDevices: (dest?: string) => Promise<string[]>;
/**
 * Network Session type
 */
export declare type NetSession = Session<Socket> & API;
/**
 * @internal For documentation purposes only. Use singleton instance exported as default
 */
export declare class NetBinding extends TypedEmitter<NetBindingEvents> {
    #private;
    /**
     * Get all network sessions
     */
    get sessions(): Readonly<Record<string, NetSession>>;
    /**
     * Connect to network device and open a new session
     * @param address host(:port)?
     */
    open(address: string): NetSession;
    /**
     * Close network session
     * @param address host(:port)?
     * @returns `false` if no connection is found
     */
    close(address: string): boolean;
    /**
     * Close all network sessions
     */
    release(): void;
}
/**
 * Binding to work with network devices
 */
declare const net: NetBinding;
export default net;

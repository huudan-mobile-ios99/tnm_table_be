/**
 * Split array/buffer/string into chunks
 * @param array - source array
 * @param len - chunk size
 */
function chunkArray(array, len) {
    const ret = [];
    const size = Math.ceil(array.length / len);
    ret.length = size;
    let offset;
    for (let i = 0; i < size; i += 1) {
        offset = i * len;
        ret[i] = array.slice(offset, offset + len);
    }
    return ret;
}
/**
 * Buffer formatting
 * @param buffer
 */
export function printBuffer(buffer) {
    return chunkArray(chunkArray(buffer.toString('hex'), 2), 16)
        .map(chunk => chunk.join('-'))
        .join('=');
}
/**
 * Create a promise which resolves after the specified milliseconds.
 * @param ms
 */
export const delay = (ms) => new Promise(resolve => {
    setTimeout(resolve, ms);
});
/**
 * Performs an asynchronous operation sequentially on all elements of an array
 * @param array
 * @param action
 */
export function series(array, action) {
    return array.reduce((acc, item, index) => acc.then(async (items) => {
        const result = await action(item, index, array, items);
        return [...items, result];
    }), Promise.resolve([]));
}
/**
 * 'Not Empty' type guard
 * @param value
 */
export function notEmpty(value) {
    return (value !== undefined && value !== null && (typeof value !== 'number' || !Number.isNaN(value)));
}
//# sourceMappingURL=helper.js.map
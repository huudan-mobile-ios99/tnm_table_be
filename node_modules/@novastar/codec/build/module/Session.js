class SessionImpl {
    connection;
    constructor(connection) {
        this.connection = connection;
    }
    get isConnected() {
        return this.connection.isConnected;
    }
    version = '2.0';
    close() {
        if (!this.connection.isConnected)
            return false;
        this.connection.close();
        return true;
    }
    pushTimeout(timeout) {
        if (timeout <= 0)
            throw new TypeError('Invalid timeout');
        this.#timeouts.push(this.connection.timeout);
        this.connection.timeout = timeout;
    }
    popTimeout() {
        const timeout = this.#timeouts.pop();
        if (timeout) {
            this.connection.timeout = timeout;
        }
        return timeout ?? this.connection.timeout;
    }
    #timeouts = [];
}
/**
 * @function Session
 */
export const Session = SessionImpl;
//# sourceMappingURL=Session.js.map
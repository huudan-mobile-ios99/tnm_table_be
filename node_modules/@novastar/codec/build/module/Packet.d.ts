/// <reference types="node" />
import { ExtractType } from 'typed-struct';
/**
 * Destination device type
 */
export declare enum DeviceType {
    /**
     * Devices connected to the COM/USB port
     */
    SendingCard = 0,
    ReceivingCard = 1,
    FunctionCard = 2
}
/**
 * I/O operation type
 */
export declare enum IO {
    Read = 0,
    Write = 1
}
/**
 * Operation result code
 */
export declare enum ErrorType {
    Succeeded = 0,
    Timeout = 1,
    RequestError = 2,
    AcknowledgeError = 3,
    InvalidCommand = 4
}
/**
 * Request header
 */
export declare const REQUEST = 43605;
/**
 * Response header
 */
export declare const RESPONSE = 21930;
/**
 * For a request, this is the source (sender) address; for a response, the destination address
 */
export declare const COMPUTER = 254;
/**
 * @function Constructor for creating and processing binary packages used when communicating with novastar devices
 * @see {@link Packet}
 * @see {@link https://sarakusha.github.io/typed-struct/interfaces/StructConstructor.html}
 */
export declare const Packet: import("typed-struct").StructConstructor<{
    head: 43605 | 21930;
    ack: ErrorType;
    serno: number;
    source: number;
    destination: number;
    deviceType: DeviceType;
    port: number;
    rcvIndex: number;
    io: IO;
    address: number;
    length: number;
    readonly data: Buffer;
    crc: number;
}, "Packet"> & import("typed-struct").CRC<import("typed-struct").StructConstructor<{
    head: 43605 | 21930;
    ack: ErrorType;
    serno: number;
    source: number;
    destination: number;
    deviceType: DeviceType;
    port: number;
    rcvIndex: number;
    io: IO;
    address: number;
    length: number;
    readonly data: Buffer;
    crc: number;
}, "Packet">>;
/**
 * @typedef Packet
 * @property head - [REQUEST](#REQUEST) - for requests and [RESPONSE](#RESPONSE) for responses
 * @property ack - always `0` for request and result code for response
 * @property serno - sequential number of the request, and the corresponding response (set automatically)
 * @property source - source address, always [COMPUTER](#COMPUTER) for request
 * @property destination - destination address, usually `0` for request
 * @property deviceType - target device type
 * @property port - port number
 * @property rcvIndex - receiving card index
 * @property io - I/O operation type
 * @property address - register unit address
 * @property length - length of data requested when reading or length of data sent when writing
 * @property data - data sent on write or empty buffer on read
 * @property crc - cyclic redundancy check
 */
export interface Packet extends ExtractType<typeof Packet, false> {
}
/**
 * [[Packet]] type guard
 * @param packet
 */
export declare function isPacket(packet: unknown): packet is Packet;

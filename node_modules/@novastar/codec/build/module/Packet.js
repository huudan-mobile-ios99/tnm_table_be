/* eslint-disable @typescript-eslint/no-empty-interface */
// noinspection JSUnusedGlobalSymbols
import Struct, { typed } from 'typed-struct';
/**
 * Destination device type
 */
export var DeviceType;
(function (DeviceType) {
    /**
     * Devices connected to the COM/USB port
     */
    DeviceType[DeviceType["SendingCard"] = 0] = "SendingCard";
    DeviceType[DeviceType["ReceivingCard"] = 1] = "ReceivingCard";
    DeviceType[DeviceType["FunctionCard"] = 2] = "FunctionCard";
})(DeviceType || (DeviceType = {}));
/**
 * I/O operation type
 */
export var IO;
(function (IO) {
    IO[IO["Read"] = 0] = "Read";
    IO[IO["Write"] = 1] = "Write";
})(IO || (IO = {}));
/**
 * Operation result code
 */
export var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["Succeeded"] = 0] = "Succeeded";
    ErrorType[ErrorType["Timeout"] = 1] = "Timeout";
    ErrorType[ErrorType["RequestError"] = 2] = "RequestError";
    ErrorType[ErrorType["AcknowledgeError"] = 3] = "AcknowledgeError";
    ErrorType[ErrorType["InvalidCommand"] = 4] = "InvalidCommand";
})(ErrorType || (ErrorType = {}));
/*
export enum DisplayMode {
  Video,
  Red = 2,
  Green,
  Blue,
  White,
  HorizonLine,
  VerticalLine,
  InclineLine,
  Grayscale,
  Loop,
}

export enum Calibration {
  Color,
  Brightness,
}
*/
/**
 * Request header
 */
export const REQUEST = 0xaa55;
/**
 * Response header
 */
export const RESPONSE = 0x55aa;
/**
 * For a request, this is the source (sender) address; for a response, the destination address
 */
export const COMPUTER = 0xfe;
/**
 * @function Constructor for creating and processing binary packages used when communicating with novastar devices
 * @see {@link Packet}
 * @see {@link https://sarakusha.github.io/typed-struct/interfaces/StructConstructor.html}
 */
export const Packet = new Struct('Packet')
    .UInt16LE('head', typed())
    .UInt8('ack', typed())
    .UInt8('serno')
    .UInt8('source')
    .UInt8('destination')
    .UInt8('deviceType', typed())
    .UInt8('port')
    .UInt16LE('rcvIndex')
    .UInt8('io', typed())
    .seek(1)
    .UInt32LE('address')
    .UInt16LE('length')
    .Buffer('data')
    .CRC16LE('crc', {
    calc: raw => raw.reduce((crc, val) => (crc + val) % 0x10000, 0x5555),
    start: 2,
})
    .compile();
/**
 * [[Packet]] type guard
 * @param packet
 */
export function isPacket(packet) {
    return packet instanceof Packet;
}
//# sourceMappingURL=Packet.js.map
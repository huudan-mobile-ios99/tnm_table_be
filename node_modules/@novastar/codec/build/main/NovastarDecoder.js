"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-underscore-dangle,no-bitwise */
const stream_1 = require("stream");
const debug_1 = __importDefault(require("debug"));
const Packet_1 = require("./Packet");
const debug = (0, debug_1.default)('novastar:decoder');
const empty = Buffer.alloc(0);
const preamble = Buffer.from([Packet_1.RESPONSE % 256, Packet_1.RESPONSE >>> 8]);
const lengthOffset = Packet_1.Packet.getOffsetOf('length');
class NovastarDecoder extends stream_1.Transform {
    constructor(options) {
        super({
            ...options,
            readableObjectMode: true,
        });
        this.buf = empty;
        this.last = [];
    }
    _transform(chunk, encoding, callback) {
        if (Buffer.isBuffer(chunk)) {
            const data = Buffer.concat([this.buf, chunk]);
            if (data.length >= preamble.length) {
                this.buf = this.recognize(data);
            }
            this.last.length > 0 && debug(`>>> ${this.last.join(', ')} [${this.last.map(pkg => pkg.serno)
                .join(', ')}]`);
            this.last.length = 0;
        }
        callback();
    }
    _flush(callback) {
        this.buf = empty;
        callback();
    }
    recognize(data) {
        for (let offset = 0;;) {
            const rest = data.length - offset;
            if (rest <= 0)
                return empty;
            const start = data.indexOf(rest < preamble.length ? preamble.slice(0, rest) : preamble, offset);
            if (start === -1)
                return empty;
            const frame = data.slice(start);
            if (frame.length < Packet_1.Packet.baseSize)
                return frame;
            const length = frame.readUInt16LE(lengthOffset);
            const total = length + Packet_1.Packet.baseSize;
            if (frame.length < total)
                return frame;
            const pkg = new Packet_1.Packet(frame.slice(0, total));
            if (Packet_1.Packet.crc(pkg) === pkg.crc) {
                if (pkg.destination === Packet_1.COMPUTER) {
                    this.push(pkg);
                    this.last.push(pkg);
                }
                offset = start + total;
            }
            if (offset <= start) {
                offset = start + 1;
            }
        }
    }
}
exports.default = NovastarDecoder;
//# sourceMappingURL=NovastarDecoder.js.map
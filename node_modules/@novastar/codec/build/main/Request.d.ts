/// <reference types="node" />
import { Packet } from './Packet';
/**
 * Custom request prepared for sending to Novastar devices
 */
export default class Request<Broadcast extends boolean = false> extends Packet {
    private static counter;
    /**
     * If this is true, then do not wait for a response from the device
     */
    readonly broadcast?: Broadcast;
    /**
     * Overriding the timeout for this request
     */
    timeout?: number;
    /**
     * Overriding the maximum data length for this request
     */
    maxLength?: number;
    /**
     * Preserves the size of the original request if it exceeds 65535.
     */
    readonly originalLength?: number;
    /**
     * For debugging and describing exceptions
     */
    readonly tag?: string;
    /**
     * @internal
     * Copy constructor
     * @param other
     * @param broadcast
     * @param tag
     */
    constructor(other: Packet, broadcast?: Broadcast, tag?: string);
    /**
     * Create a read request
     * @param readLength - requested data length
     * @param tag - description
     */
    constructor(readLength: number, tag?: string);
    /**
     * Create a write request. If `broadcast` is true, then do not wait for a response from the device
     * @param writeData - data to send
     * @param broadcast
     * @param tag description
     */
    constructor(writeData: Buffer | ReadonlyArray<number>, broadcast?: Broadcast, tag?: string);
    constructor(writeData: Buffer | ReadonlyArray<number>, tag: string);
    /**
     * Split the original request into chunks with the specified maximum data length
     * @param req - original request
     * @param maxLength - maximum data length
     * @returns - chunks
     */
    static makeChunks<Broadcast extends boolean = false>(req: Request<Broadcast>, maxLength?: number): Request<Broadcast>[];
    private static next;
}
export declare const isNotBroadcast: (req: Request<boolean>) => req is Request<false>;

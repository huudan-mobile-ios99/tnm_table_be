"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SessionImpl_timeouts;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
class SessionImpl {
    constructor(connection) {
        this.connection = connection;
        this.version = '2.0';
        _SessionImpl_timeouts.set(this, []);
    }
    get isConnected() {
        return this.connection.isConnected;
    }
    close() {
        if (!this.connection.isConnected)
            return false;
        this.connection.close();
        return true;
    }
    pushTimeout(timeout) {
        if (timeout <= 0)
            throw new TypeError('Invalid timeout');
        __classPrivateFieldGet(this, _SessionImpl_timeouts, "f").push(this.connection.timeout);
        this.connection.timeout = timeout;
    }
    popTimeout() {
        const timeout = __classPrivateFieldGet(this, _SessionImpl_timeouts, "f").pop();
        if (timeout) {
            this.connection.timeout = timeout;
        }
        return timeout ?? this.connection.timeout;
    }
}
_SessionImpl_timeouts = new WeakMap();
/**
 * @function Session
 */
exports.Session = SessionImpl;
//# sourceMappingURL=Session.js.map
import * as t from 'io-ts';
import { ChipMBI5759CustomExtendProperty } from './ChipMBI5759CustomExtendProperty';
import { ChipMBI5759GRGBExtendProperty } from './ChipMBI5759GRGBExtendProperty';
export declare const ChipMBI5759ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    GRGBExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Global1_Register1: t.Type<number, number, unknown>;
        Global1_Register2: t.Type<number, number, unknown>;
        Global1_Register3: t.Type<number, number, unknown>;
        Global2_Register1: t.Type<number, number, unknown>;
        Global2_Register2: t.Type<number, number, unknown>;
        Global2_Register3: t.Type<number, number, unknown>;
        Global3_Register1: t.Type<number, number, unknown>;
        Global3_Register2: t.Type<number, number, unknown>;
        Global3_Register3: t.Type<number, number, unknown>;
        R1_Register1: t.Type<number, number, unknown>;
        R1_Register2: t.Type<number, number, unknown>;
        R1_Register3: t.Type<number, number, unknown>;
        R2_Register1: t.Type<number, number, unknown>;
        R2_Register2: t.Type<number, number, unknown>;
        R2_Register3: t.Type<number, number, unknown>;
        G1_Register1: t.Type<number, number, unknown>;
        G1_Register2: t.Type<number, number, unknown>;
        G1_Register3: t.Type<number, number, unknown>;
        G2_Register1: t.Type<number, number, unknown>;
        G2_Register2: t.Type<number, number, unknown>;
        G2_Register3: t.Type<number, number, unknown>;
        B1_Register1: t.Type<number, number, unknown>;
        B1_Register2: t.Type<number, number, unknown>;
        B1_Register3: t.Type<number, number, unknown>;
        B2_Register1: t.Type<number, number, unknown>;
        B2_Register2: t.Type<number, number, unknown>;
        B2_Register3: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        RLowGrayCompsentionOne: t.Type<number, number, unknown>;
        GLowGrayCompsentionOne: t.Type<number, number, unknown>;
        BLowGrayCompsentionOne: t.Type<number, number, unknown>;
        RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        RedGain: t.Type<number, number, unknown>;
        GreenGain: t.Type<number, number, unknown>;
        BlueGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759GRGBExtendProperty">;
    }>]>;
    CustomExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanData: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759CustomExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5759ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5759.decompiled.cs:1509
 */
export declare const ChipMBI5759ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    GRGBExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Global1_Register1: t.Type<number, number, unknown>;
        Global1_Register2: t.Type<number, number, unknown>;
        Global1_Register3: t.Type<number, number, unknown>;
        Global2_Register1: t.Type<number, number, unknown>;
        Global2_Register2: t.Type<number, number, unknown>;
        Global2_Register3: t.Type<number, number, unknown>;
        Global3_Register1: t.Type<number, number, unknown>;
        Global3_Register2: t.Type<number, number, unknown>;
        Global3_Register3: t.Type<number, number, unknown>;
        R1_Register1: t.Type<number, number, unknown>;
        R1_Register2: t.Type<number, number, unknown>;
        R1_Register3: t.Type<number, number, unknown>;
        R2_Register1: t.Type<number, number, unknown>;
        R2_Register2: t.Type<number, number, unknown>;
        R2_Register3: t.Type<number, number, unknown>;
        G1_Register1: t.Type<number, number, unknown>;
        G1_Register2: t.Type<number, number, unknown>;
        G1_Register3: t.Type<number, number, unknown>;
        G2_Register1: t.Type<number, number, unknown>;
        G2_Register2: t.Type<number, number, unknown>;
        G2_Register3: t.Type<number, number, unknown>;
        B1_Register1: t.Type<number, number, unknown>;
        B1_Register2: t.Type<number, number, unknown>;
        B1_Register3: t.Type<number, number, unknown>;
        B2_Register1: t.Type<number, number, unknown>;
        B2_Register2: t.Type<number, number, unknown>;
        B2_Register3: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        RLowGrayCompsentionOne: t.Type<number, number, unknown>;
        GLowGrayCompsentionOne: t.Type<number, number, unknown>;
        BLowGrayCompsentionOne: t.Type<number, number, unknown>;
        RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        RedGain: t.Type<number, number, unknown>;
        GreenGain: t.Type<number, number, unknown>;
        BlueGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759GRGBExtendProperty">;
    }>]>;
    CustomExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanData: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759CustomExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5759ExtendProperty">;
}>]>;
export interface ChipMBI5759ExtendProperty extends t.TypeOf<typeof ChipMBI5759ExtendProperty> {
    GRGBExtendProperty?: ChipMBI5759GRGBExtendProperty;
    CustomExtendProperty?: ChipMBI5759CustomExtendProperty;
}

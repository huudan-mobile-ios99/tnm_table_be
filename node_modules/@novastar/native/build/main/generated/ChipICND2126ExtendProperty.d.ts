import * as t from 'io-ts';
export declare const ChipICND2126ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ShortDetection: t.Type<number, number, unknown>;
    ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
    SavingPowerMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    InflectionPiont: t.Type<number, number, unknown>;
    ShadowEliminationElectric: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2126ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICN2126.decompiled.cs:1268
 */
export declare const ChipICND2126ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ShortDetection: t.Type<number, number, unknown>;
    ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
    SavingPowerMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    InflectionPiont: t.Type<number, number, unknown>;
    ShadowEliminationElectric: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
}>]>;
export interface ChipICND2126ExtendProperty extends t.TypeOf<typeof ChipICND2126ExtendProperty> {
}

import * as t from 'io-ts';
import { Chip5359ExtendProperty } from './Chip5359ExtendProperty';
export declare const Chip5359RGBExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
    IsAmplifyCurrent: t.Type<boolean, boolean, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Dvi: t.Type<number, number, unknown>;
    ExcessiveTime: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    GextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    BextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    IstwoWayTransmission: t.Type<boolean, boolean, unknown>;
    IsGhostRemovalEnhance: t.Type<boolean, boolean, unknown>;
    IsSavePower: t.Type<boolean, boolean, unknown>;
    IsSavePowerPlus: t.Type<boolean, boolean, unknown>;
    FineGrade: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    Gclk: t.Type<number, number, unknown>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    IsDoublePower: t.Type<boolean, boolean, unknown>;
    RowChangePoint5359: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip5359RGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:32687
 */
export declare const Chip5359RGBExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
    IsAmplifyCurrent: t.Type<boolean, boolean, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Dvi: t.Type<number, number, unknown>;
    ExcessiveTime: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    GextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    BextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    IstwoWayTransmission: t.Type<boolean, boolean, unknown>;
    IsGhostRemovalEnhance: t.Type<boolean, boolean, unknown>;
    IsSavePower: t.Type<boolean, boolean, unknown>;
    IsSavePowerPlus: t.Type<boolean, boolean, unknown>;
    FineGrade: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    Gclk: t.Type<number, number, unknown>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    IsDoublePower: t.Type<boolean, boolean, unknown>;
    RowChangePoint5359: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5359RGBExtendProperty">;
}>]>;
export interface Chip5359RGBExtendProperty extends t.TypeOf<typeof Chip5359RGBExtendProperty> {
    RextendProperty?: Chip5359ExtendProperty;
    GextendProperty?: Chip5359ExtendProperty;
    BextendProperty?: Chip5359ExtendProperty;
}

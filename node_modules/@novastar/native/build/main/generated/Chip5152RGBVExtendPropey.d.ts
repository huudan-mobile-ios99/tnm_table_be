import * as t from 'io-ts';
import { Chip5152ExtendProperty } from './Chip5152ExtendProperty';
export declare const Chip5152RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip5152RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:28065
 */
export declare const Chip5152RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("./FirstLineCompensationType").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5152RGBVExtendPropey">;
}>]>;
export interface Chip5152RGBVExtendPropey extends t.TypeOf<typeof Chip5152RGBVExtendPropey> {
    RedProperty?: Chip5152ExtendProperty;
    GreenProperty?: Chip5152ExtendProperty;
    BlueProperty?: Chip5152ExtendProperty;
    VRedProperty?: Chip5152ExtendProperty;
}

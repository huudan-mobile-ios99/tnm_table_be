import * as t from 'io-ts';
export declare const ChipFM6182ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegValueConfigFirst: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
}>, t.PartialC<{
    CurrentLowCompsention: t.Type<number, number, unknown>;
    LowCompsention: t.Type<number, number, unknown>;
    FirstCompsentionOne: t.Type<number, number, unknown>;
    ErrorDetection: t.Type<number, number, unknown>;
    GhostElimination: t.Type<number, number, unknown>;
    DetectionEable: t.Type<number, number, unknown>;
    FirstCompsentionTwo: t.Type<number, number, unknown>;
    CurrentPoint: t.Type<number, number, unknown>;
    OpenUpTime: t.Type<number, number, unknown>;
    PDMOpenTime: t.Type<number, number, unknown>;
    ParityTimeSet: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6182ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:42673
 */
export declare const ChipFM6182ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegValueConfigFirst: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
}>, t.PartialC<{
    CurrentLowCompsention: t.Type<number, number, unknown>;
    LowCompsention: t.Type<number, number, unknown>;
    FirstCompsentionOne: t.Type<number, number, unknown>;
    ErrorDetection: t.Type<number, number, unknown>;
    GhostElimination: t.Type<number, number, unknown>;
    DetectionEable: t.Type<number, number, unknown>;
    FirstCompsentionTwo: t.Type<number, number, unknown>;
    CurrentPoint: t.Type<number, number, unknown>;
    OpenUpTime: t.Type<number, number, unknown>;
    PDMOpenTime: t.Type<number, number, unknown>;
    ParityTimeSet: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
}>]>;
export interface ChipFM6182ExtendProperty extends t.TypeOf<typeof ChipFM6182ExtendProperty> {
}

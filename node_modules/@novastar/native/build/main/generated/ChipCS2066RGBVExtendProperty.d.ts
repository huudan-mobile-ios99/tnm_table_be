import * as t from 'io-ts';
import { ChipCS2066ExtendProperty } from './ChipCS2066ExtendProperty';
export declare const ChipCS2066RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2066RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2066.decompiled.cs:8337
 */
export declare const ChipCS2066RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2066RGBVExtendProperty">;
}>]>;
export interface ChipCS2066RGBVExtendProperty extends t.TypeOf<typeof ChipCS2066RGBVExtendProperty> {
    RedProperty?: ChipCS2066ExtendProperty;
    GreenProperty?: ChipCS2066ExtendProperty;
    BlueProperty?: ChipCS2066ExtendProperty;
    VRedProperty?: ChipCS2066ExtendProperty;
}

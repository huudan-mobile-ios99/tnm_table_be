import * as t from 'io-ts';
export declare const ChipSM16389ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    EnergyPattern: t.Type<number, number, unknown>;
    LowGrayHomogeneity: t.Type<number, number, unknown>;
    CouplingOptimize2: t.Type<number, number, unknown>;
    BlankingTime1: t.Type<number, number, unknown>;
    FirstLineCompensation: t.Type<number, number, unknown>;
    LowGrayOptimize2: t.Type<number, number, unknown>;
    OpenTest: t.Type<boolean, boolean, unknown>;
    EliminateOpenCrossGrade: t.Type<number, number, unknown>;
    CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
    LowGrayOptimize1: t.Type<number, number, unknown>;
    LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
    CouplingGrade: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    BlankingGrade1: t.Type<number, number, unknown>;
    FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
    BlankingOpen2: t.Type<boolean, boolean, unknown>;
    BlankingGrade2: t.Type<number, number, unknown>;
    BlankingOpen3: t.Type<boolean, boolean, unknown>;
    BlankingGrade3: t.Type<number, number, unknown>;
    CouplingOptimize1: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16389ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16389.decompiled.cs:1029
 */
export declare const ChipSM16389ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    EnergyPattern: t.Type<number, number, unknown>;
    LowGrayHomogeneity: t.Type<number, number, unknown>;
    CouplingOptimize2: t.Type<number, number, unknown>;
    BlankingTime1: t.Type<number, number, unknown>;
    FirstLineCompensation: t.Type<number, number, unknown>;
    LowGrayOptimize2: t.Type<number, number, unknown>;
    OpenTest: t.Type<boolean, boolean, unknown>;
    EliminateOpenCrossGrade: t.Type<number, number, unknown>;
    CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
    LowGrayOptimize1: t.Type<number, number, unknown>;
    LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
    CouplingGrade: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    BlankingGrade1: t.Type<number, number, unknown>;
    FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
    BlankingOpen2: t.Type<boolean, boolean, unknown>;
    BlankingGrade2: t.Type<number, number, unknown>;
    BlankingOpen3: t.Type<boolean, boolean, unknown>;
    BlankingGrade3: t.Type<number, number, unknown>;
    CouplingOptimize1: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
}>]>;
export interface ChipSM16389ExtendProperty extends t.TypeOf<typeof ChipSM16389ExtendProperty> {
}

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChipICND2210RGBVExtendProperty = exports.ChipICND2210RGBVExtendPropertyBase = void 0;
const t = __importStar(require("io-ts"));
const common = __importStar(require("../lib/common"));
const ChipBaseExtendPropey_1 = require("./ChipBaseExtendPropey");
exports.ChipICND2210RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey_1.ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.withDefault(common.Int32, 40),
        RegisterList: common.XMLArray(common.UInt16, 'ushort'),
        RRemovePointCurrentAmplitude: common.UInt8_2,
        GRemovePointCurrentAmplitude: common.UInt8_16,
        BRemovePointCurrentAmplitude: common.UInt8_16,
        IsAdvancedMode: common.Bool_false,
    }),
    t.partial({
        IsUseNewModule: common.Bool,
        RShadowEliminationLevel: common.UInt8,
        GShadowEliminationLevel: common.UInt8,
        BShadowEliminationLevel: common.UInt8,
        RShadowEliminationTime: common.UInt8,
        GShadowEliminationTime: common.UInt8,
        BShadowEliminationTime: common.UInt8,
        LowAshuniformity: common.UInt8,
        ShadowEliminationEn: common.Bool,
        ShadowEliminationEhancedEn: common.Bool,
        RLowGrayOffset: common.UInt8,
        GLowGrayOffset: common.UInt8,
        BLowGrayOffset: common.UInt8,
        FirstLineDarkEn: common.Bool,
        RLowGrayFirstLineDarkCompsention: common.UInt16,
        GLowGrayFirstLineDarkCompsention: common.UInt16,
        BLowGrayFirstLineDarkCompsention: common.UInt16,
        RLowGrayFirstLineDarkCompsentionTime: common.UInt8,
        GLowGrayFirstLineDarkCompsentionTime: common.UInt8,
        BLowGrayFirstLineDarkCompsentionTime: common.UInt8,
        CouplingAdjustEnhacneModeEn: common.Bool,
        RCouplingOptimizationOne: common.UInt8,
        GCouplingOptimizationOne: common.UInt8,
        BCouplingOptimizationOne: common.UInt8,
        RCouplingOptimizationTwoEn: common.Bool,
        GCouplingOptimizationTwoEn: common.Bool,
        BCouplingOptimizationTwoEn: common.Bool,
        RCouplingOptimizationTwo: common.UInt8,
        GCouplingOptimizationTwo: common.UInt8,
        BCouplingOptimizationTwo: common.UInt8,
        RSlowlyOpen: common.UInt8,
        GSlowlyOpen: common.UInt8,
        BSlowlyOpen: common.UInt8,
        RKneePointVoltage: common.UInt8,
        GKneePointVoltage: common.UInt8,
        BKneePointVoltage: common.UInt8,
        LineShadowEliminationLevel: common.UInt8,
        LineShadowEliminationMode: common.UInt8,
        FailureEliminationEn: common.Bool,
        BlackScreenSavingEn: common.Bool,
        RCurrentGain: common.UInt8,
        GCurrentGain: common.UInt8,
        BCurrentGain: common.UInt8,
        RCurrentAmplitude: common.UInt8,
        GCurrentAmplitude: common.UInt8,
        BCurrentAmplitude: common.UInt8,
        RefreshGroupNum: common.UInt8,
        RowGrayLevel: common.UInt8,
        ScanCountOfChipOne: common.UInt8,
        ScanCountOfChipTwo: common.UInt8,
        ScanCountOfChipThree: common.UInt8,
        ScanCountOfChipFour: common.UInt8,
        Line_Len: common.UInt16,
        Row_Len: common.UInt16,
        GclkFreqP: common.UInt8,
        GclkFreqM: common.UInt8,
        GclkFreqN: common.UInt8,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
    }),
], 'ChipICND2210RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2210RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2210.decompiled.cs:45
 */
exports.ChipICND2210RGBVExtendProperty = t.intersection([
    exports.ChipICND2210RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2210RGBVExtendProperty') }),
], 'ChipICND2210RGBVExtendProperty');
//# sourceMappingURL=ChipICND2210RGBVExtendProperty.js.map
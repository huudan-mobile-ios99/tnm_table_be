import * as t from 'io-ts';
import { Chip16159ExtendProperty } from '../Chip16159ExtendProperty';
import { Chip16159RGBExtendProperty } from '../Chip16159RGBExtendProperty';
import { Chip16169sExtendProperty } from '../Chip16169sExtendProperty';
import { Chip16169sRGBExtendProperty } from '../Chip16169sRGBExtendProperty';
import { Chip2020ExtendProperty } from '../Chip2020ExtendProperty';
import { Chip2028RGBVExtendPropey } from '../Chip2028RGBVExtendPropey';
import { Chip2053ExtendPropety } from '../Chip2053ExtendPropety';
import { Chip2163ExtendPropety } from '../Chip2163ExtendPropety';
import { Chip2200ExtendProperty } from '../Chip2200ExtendProperty';
import { Chip5043RGBVExtendPropey } from '../Chip5043RGBVExtendPropey';
import { Chip5051BExtendPropey } from '../Chip5051BExtendPropey';
import { Chip5051BRGBVExtendPropey } from '../Chip5051BRGBVExtendPropey';
import { Chip5124RGBVExtendPropey } from '../Chip5124RGBVExtendPropey';
import { Chip5125RGBVExtendPropey } from '../Chip5125RGBVExtendPropey';
import { Chip5152ExtendProperty } from '../Chip5152ExtendProperty';
import { Chip5152RGBVExtendPropey } from '../Chip5152RGBVExtendPropey';
import { Chip5153ExtendProperty } from '../Chip5153ExtendProperty';
import { Chip5153RGBVExtendPropey } from '../Chip5153RGBVExtendPropey';
import { Chip5155ExtendProperty } from '../Chip5155ExtendProperty';
import { Chip5155RGBVExtendPropey } from '../Chip5155RGBVExtendPropey';
import { Chip5166RGBVExtendPropey } from '../Chip5166RGBVExtendPropey';
import { Chip5252RGBVExtendPropey } from '../Chip5252RGBVExtendPropey';
import { Chip5253BExtendProperty } from '../Chip5253BExtendProperty';
import { Chip5253BRGBExtendPropety } from '../Chip5253BRGBExtendPropety';
import { Chip5253ExtendProperty } from '../Chip5253ExtendProperty';
import { Chip5253RGBExtendPropety } from '../Chip5253RGBExtendPropety';
import { Chip5266RGBVExtendPropey } from '../Chip5266RGBVExtendPropey';
import { Chip5353ExtendProperty } from '../Chip5353ExtendProperty';
import { Chip5353RGBVExtendPropey } from '../Chip5353RGBVExtendPropey';
import { Chip5354ExtendProperty } from '../Chip5354ExtendProperty';
import { Chip5354RGBVExtendPropey } from '../Chip5354RGBVExtendPropey';
import { Chip5359ExtendProperty } from '../Chip5359ExtendProperty';
import { Chip5359RGBExtendProperty } from '../Chip5359RGBExtendProperty';
import { Chip9263RGBVExtendPropey } from '../Chip9263RGBVExtendPropey';
import { Chip9348ExtendProperty } from '../Chip9348ExtendProperty';
import { Chip9348RGBVExtendPropey } from '../Chip9348RGBVExtendPropey';
import { Chip9373ExtendPropety } from '../Chip9373ExtendPropety';
import { Chip9748ExtendProperty } from '../Chip9748ExtendProperty';
import { Chip9748RGBVExtendPropey } from '../Chip9748RGBVExtendPropey';
import { ChipAXS6018RGBVExtendProperty } from '../ChipAXS6018RGBVExtendProperty';
import { ChipCFD435AExtendProperty } from '../ChipCFD435AExtendProperty';
import { ChipCFD435ARGBVExtendProperty } from '../ChipCFD435ARGBVExtendProperty';
import { ChipCFD455AExtendProperty } from '../ChipCFD455AExtendProperty';
import { ChipCFD455ARGBVExtendProperty } from '../ChipCFD455ARGBVExtendProperty';
import { ChipCFD555AExtendProperty } from '../ChipCFD555AExtendProperty';
import { ChipCFD555ARGBVExtendProperty } from '../ChipCFD555ARGBVExtendProperty';
import { ChipCNS7153ExtendProperty } from '../ChipCNS7153ExtendProperty';
import { ChipCNS7153RGBVExtendProperty } from '../ChipCNS7153RGBVExtendProperty';
import { ChipCNS7253ExtendProperty } from '../ChipCNS7253ExtendProperty';
import { ChipCNS7253RGBVExtendProperty } from '../ChipCNS7253RGBVExtendProperty';
import { ChipCS2017ExtendProperty } from '../ChipCS2017ExtendProperty';
import { ChipCS2017RGBVExtendProperty } from '../ChipCS2017RGBVExtendProperty';
import { ChipCS2017SExtendProperty } from '../ChipCS2017SExtendProperty';
import { ChipCS2017SRGBVExtendProperty } from '../ChipCS2017SRGBVExtendProperty';
import { ChipCS2033ExtendProperty } from '../ChipCS2033ExtendProperty';
import { ChipCS2033RGBVExtendProperty } from '../ChipCS2033RGBVExtendProperty';
import { ChipCS2066ExtendProperty } from '../ChipCS2066ExtendProperty';
import { ChipCS2066RGBVExtendProperty } from '../ChipCS2066RGBVExtendProperty';
import { ChipDM413ExtendProperty } from '../ChipDM413ExtendProperty';
import { ChipDM413RGBVExtendProperty } from '../ChipDM413RGBVExtendProperty';
import { ChipDP3230RGBVExtendProperty } from '../ChipDP3230RGBVExtendProperty';
import { ChipDP3246ExtendProperty } from '../ChipDP3246ExtendProperty';
import { ChipDP3246RGBVExtendProperty } from '../ChipDP3246RGBVExtendProperty';
import { ChipDP3264ExtendProperty } from '../ChipDP3264ExtendProperty';
import { ChipDP3264RGBVExtendProperty } from '../ChipDP3264RGBVExtendProperty';
import { ChipDP3265ExtendProperty } from '../ChipDP3265ExtendProperty';
import { ChipDP3265RGBVExtendProperty } from '../ChipDP3265RGBVExtendProperty';
import { ChipFM6047ExtendProperty } from '../ChipFM6047ExtendProperty';
import { ChipFM6047RGBVExtendProperty } from '../ChipFM6047RGBVExtendProperty';
import { ChipFM6126ExtendProperty } from '../ChipFM6126ExtendProperty';
import { ChipFM6127ExtendProperty } from '../ChipFM6127ExtendProperty';
import { ChipFM6182ExtendProperty } from '../ChipFM6182ExtendProperty';
import { ChipFM6182RGBVExtendPropey } from '../ChipFM6182RGBVExtendPropey';
import { ChipFM6353ExtendProperty } from '../ChipFM6353ExtendProperty';
import { ChipFM6353RGBVExtendProperty } from '../ChipFM6353RGBVExtendProperty';
import { ChipFM6356ExtendProperty } from '../ChipFM6356ExtendProperty';
import { ChipFM6356RGBVExtendProperty } from '../ChipFM6356RGBVExtendProperty';
import { ChipFM6363ExtendProperty } from '../ChipFM6363ExtendProperty';
import { ChipFM6363RGBVExtendProperty } from '../ChipFM6363RGBVExtendProperty';
import { ChipFM6518ExtendProperty } from '../ChipFM6518ExtendProperty';
import { ChipFM6518RGBVExtendProperty } from '../ChipFM6518RGBVExtendProperty';
import { ChipFM6555ExtendProperty } from '../ChipFM6555ExtendProperty';
import { ChipFM6555RGBVExtendProperty } from '../ChipFM6555RGBVExtendProperty';
import { ChipFM6565ExtendProperty } from '../ChipFM6565ExtendProperty';
import { ChipFM6565RGBVExtendProperty } from '../ChipFM6565RGBVExtendProperty';
import { ChipGW6808ExtendProperty } from '../ChipGW6808ExtendProperty';
import { ChipHB200BRGBVExtendProperty } from '../ChipHB200BRGBVExtendProperty';
import { ChipHBS1910ExtendProperty } from '../ChipHBS1910ExtendProperty';
import { ChipHBS1910RGBVExtendProperty } from '../ChipHBS1910RGBVExtendProperty';
import { ChipHS3257ExtendProperty } from '../ChipHS3257ExtendProperty';
import { ChipHS3257RGBVExtendProperty } from '../ChipHS3257RGBVExtendProperty';
import { ChipHX5011RGBVExtendProperty } from '../ChipHX5011RGBVExtendProperty';
import { ChipHX8055ExtendProperty } from '../ChipHX8055ExtendProperty';
import { ChipHX8055RGBVExtendProperty } from '../ChipHX8055RGBVExtendProperty';
import { ChipHX8864ExtendProperty } from '../ChipHX8864ExtendProperty';
import { ChipHX8864RGBVExtendProperty } from '../ChipHX8864RGBVExtendProperty';
import { ChipICN2038SExtendProperty } from '../ChipICN2038SExtendProperty';
import { ChipICN2065AutoRefreshRataParam } from '../ChipICN2065AutoRefreshRataParam';
import { ChipICN2065ExtendProperty } from '../ChipICN2065ExtendProperty';
import { ChipICN2065RGBVExtendProperty } from '../ChipICN2065RGBVExtendProperty';
import { ChipICND2055AutoRefreshRataParam } from '../ChipICND2055AutoRefreshRataParam';
import { ChipICND2055ExtendProperty } from '../ChipICND2055ExtendProperty';
import { ChipICND2055RGBVExtendProperty } from '../ChipICND2055RGBVExtendProperty';
import { ChipICND2076RGBVExtendProperty } from '../ChipICND2076RGBVExtendProperty';
import { ChipICND2100ExtendProperty } from '../ChipICND2100ExtendProperty';
import { ChipICND2112ExtendProperty } from '../ChipICND2112ExtendProperty';
import { ChipICND2112RGBVExtendPropey } from '../ChipICND2112RGBVExtendPropey';
import { ChipICND2126ExtendProperty } from '../ChipICND2126ExtendProperty';
import { ChipICND2126RGBVExtendProperty } from '../ChipICND2126RGBVExtendProperty';
import { ChipICND2159ExtendProperty } from '../ChipICND2159ExtendProperty';
import { ChipICND2159RGBVExtendProperty } from '../ChipICND2159RGBVExtendProperty';
import { ChipICND2210RGBVExtendProperty } from '../ChipICND2210RGBVExtendProperty';
import { ChipIT1505ExtendProperty } from '../ChipIT1505ExtendProperty';
import { ChipMBI5034BExtendProperty } from '../ChipMBI5034BExtendProperty';
import { ChipMBI5034BRGBVExtendProperty } from '../ChipMBI5034BRGBVExtendProperty';
import { ChipMBI5038ExtendProperty } from '../ChipMBI5038ExtendProperty';
import { ChipMBI5038RGBExtendProperty } from '../ChipMBI5038RGBExtendProperty';
import { ChipMBI5043ExtendProperty } from '../ChipMBI5043ExtendProperty';
import { ChipMBI5166ExtendProperty } from '../ChipMBI5166ExtendProperty';
import { ChipMBI524ExtendProperty } from '../ChipMBI524ExtendProperty';
import { ChipMBI5251ExtendProperty } from '../ChipMBI5251ExtendProperty';
import { ChipMBI5251RGBVExtendProperty } from '../ChipMBI5251RGBVExtendProperty';
import { ChipMBI5252BExtendProperty } from '../ChipMBI5252BExtendProperty';
import { ChipMBI5252BRGBVExtendProperty } from '../ChipMBI5252BRGBVExtendProperty';
import { ChipMBI5253NewBExtendProperty } from '../ChipMBI5253NewBExtendProperty';
import { ChipMBI5253NewBRGBVExtendProperty } from '../ChipMBI5253NewBRGBVExtendProperty';
import { ChipMBI5254ExtendProperty } from '../ChipMBI5254ExtendProperty';
import { ChipMBI5254RGBVExtendProperty } from '../ChipMBI5254RGBVExtendProperty';
import { ChipMBI525ExtendProperty } from '../ChipMBI525ExtendProperty';
import { ChipMBI5264ExtendProperty } from '../ChipMBI5264ExtendProperty';
import { ChipMBI5264RGBVExtendProperty } from '../ChipMBI5264RGBVExtendProperty';
import { ChipMBI5268ExtendProperty } from '../ChipMBI5268ExtendProperty';
import { ChipMBI5268RGBVExtendProperty } from '../ChipMBI5268RGBVExtendProperty';
import { ChipMBI5269ExtendProperty } from '../ChipMBI5269ExtendProperty';
import { ChipMBI5269RGBVExtendProperty } from '../ChipMBI5269RGBVExtendProperty';
import { ChipMBI5754ExtendProperty } from '../ChipMBI5754ExtendProperty';
import { ChipMBI5754RGBVExtendProperty } from '../ChipMBI5754RGBVExtendProperty';
import { ChipMBI5759CustomExtendProperty } from '../ChipMBI5759CustomExtendProperty';
import { ChipMBI5759ExtendProperty } from '../ChipMBI5759ExtendProperty';
import { ChipMBI5759GRGBExtendProperty } from '../ChipMBI5759GRGBExtendProperty';
import { ChipMBI5850AutoRefreshRataParam } from '../ChipMBI5850AutoRefreshRataParam';
import { ChipMBI5850RGBVExtendProperty } from '../ChipMBI5850RGBVExtendProperty';
import { ChipMBI6033ExtendProperty } from '../ChipMBI6033ExtendProperty';
import { ChipMBI6033RGBVExtendProperty } from '../ChipMBI6033RGBVExtendProperty';
import { ChipMY9221ExtendProperty } from '../ChipMY9221ExtendProperty';
import { ChipMY9263ExtendProperty } from '../ChipMY9263ExtendProperty';
import { ChipMY9366ExtendProperty } from '../ChipMY9366ExtendProperty';
import { ChipMY9862ARGBExtendProperty } from '../ChipMY9862ARGBExtendProperty';
import { ChipMY9862ExtendProperty } from '../ChipMY9862ExtendProperty';
import { ChipMY9862RGBExtendProperty } from '../ChipMY9862RGBExtendProperty';
import { ChipMY9866ExtendProperty } from '../ChipMY9866ExtendProperty';
import { ChipNT27002SExtendProperty } from '../ChipNT27002SExtendProperty';
import { ChipNT27002SRGBVExtendProperty } from '../ChipNT27002SRGBVExtendProperty';
import { ChipRT5924ExtendProperty } from '../ChipRT5924ExtendProperty';
import { ChipRT5938SSExtendProperty } from '../ChipRT5938SSExtendProperty';
import { ChipRT5938SSRGBVExtendProperty } from '../ChipRT5938SSRGBVExtendProperty';
import { ChipRT5965ExtendProperty } from '../ChipRT5965ExtendProperty';
import { ChipRT5965RGBVExtendProperty } from '../ChipRT5965RGBVExtendProperty';
import { ChipRZRGBVExtendProperty } from '../ChipRZRGBVExtendProperty';
import { ChipSCL8060ExtendProperty } from '../ChipSCL8060ExtendProperty';
import { ChipSCL8080AutoRefreshRataParam } from '../ChipSCL8080AutoRefreshRataParam';
import { ChipSCL8080ExtendProperty } from '../ChipSCL8080ExtendProperty';
import { ChipSCL8080RGBVExtendProperty } from '../ChipSCL8080RGBVExtendProperty';
import { ChipSCL8081ExtendProperty } from '../ChipSCL8081ExtendProperty';
import { ChipSCL8081RGBVExtendProperty } from '../ChipSCL8081RGBVExtendProperty';
import { ChipSM16017DSRGBVExtendProperty } from '../ChipSM16017DSRGBVExtendProperty';
import { ChipSM16017SExtendProperty } from '../ChipSM16017SExtendProperty';
import { ChipSM16027ExtendProperty } from '../ChipSM16027ExtendProperty';
import { ChipSM16136ExtendProperty } from '../ChipSM16136ExtendProperty';
import { ChipSM16136RGBExtendProperty } from '../ChipSM16136RGBExtendProperty';
import { ChipSM16158ExtendProperty } from '../ChipSM16158ExtendProperty';
import { ChipSM16207SExtendProperty } from '../ChipSM16207SExtendProperty';
import { ChipSM16227ExtendProperty } from '../ChipSM16227ExtendProperty';
import { ChipSM16237ExtendProperty } from '../ChipSM16237ExtendProperty';
import { ChipSM16259ExtendProperty } from '../ChipSM16259ExtendProperty';
import { ChipSM16259RGBVExtendProperty } from '../ChipSM16259RGBVExtendProperty';
import { ChipSM16359ExtendProperty } from '../ChipSM16359ExtendProperty';
import { ChipSM16359RGBVExtendProperty } from '../ChipSM16359RGBVExtendProperty';
import { ChipSM16369ExtendProperty } from '../ChipSM16369ExtendProperty';
import { ChipSM16369RGBVExtendProperty } from '../ChipSM16369RGBVExtendProperty';
import { ChipSM16380ExtendProperty } from '../ChipSM16380ExtendProperty';
import { ChipSM16380RGBVExtendProperty } from '../ChipSM16380RGBVExtendProperty';
import { ChipSM16388ExtendProperty } from '../ChipSM16388ExtendProperty';
import { ChipSM16388RGBVExtendProperty } from '../ChipSM16388RGBVExtendProperty';
import { ChipSM16389ExtendProperty } from '../ChipSM16389ExtendProperty';
import { ChipSM16389RGBVExtendProperty } from '../ChipSM16389RGBVExtendProperty';
import { ChipSUM2017TDExtendProperty } from '../ChipSUM2017TDExtendProperty';
import { ChipSUM2017TExtendProperty } from '../ChipSUM2017TExtendProperty';
import { ChipSUM2028ExtendProperty } from '../ChipSUM2028ExtendProperty';
import { ChipSUM2030ExtendProperty } from '../ChipSUM2030ExtendProperty';
import { ChipSUM2032ExtendProperty } from '../ChipSUM2032ExtendProperty';
import { ChipSUM2033BaseExtendProperty } from '../ChipSUM2033BaseExtendProperty';
import { ChipSUM2033ExtendProperty } from '../ChipSUM2033ExtendProperty';
import { ChipSUM2117ExtendProperty } from '../ChipSUM2117ExtendProperty';
import { ChipTL3103UDExtendProperty } from '../ChipTL3103UDExtendProperty';
import { ChipTL3103UDRGBVExtendProperty } from '../ChipTL3103UDRGBVExtendProperty';
import { ChipTLC5929ExtendProperty } from '../ChipTLC5929ExtendProperty';
import { ChipTLC5948AExtendProperty } from '../ChipTLC5948AExtendProperty';
import { ChipTLC59581ExtendProperty } from '../ChipTLC59581ExtendProperty';
import { ChipTLC5958ExtendProperty } from '../ChipTLC5958ExtendProperty';
import { ChipTLC6983ExtendProperty } from '../ChipTLC6983ExtendProperty';
import { ChipTLC6983RGBVExtendProperty } from '../ChipTLC6983RGBVExtendProperty';
import { ChipUCS5603RGBVExtendProperty } from '../ChipUCS5603RGBVExtendProperty';
import { ChipXM11201GRGBVExtendProperty } from '../ChipXM11201GRGBVExtendProperty';
import { ChipXM11202GRGBVExtendProperty } from '../ChipXM11202GRGBVExtendProperty';
import { ChipXM11920GRGBVExtendProperty } from '../ChipXM11920GRGBVExtendProperty';
import { ChipYY6018RGBVExtendProperty } from '../ChipYY6018RGBVExtendProperty';
import { CustomRegExtendPropertyBase } from '../CustomRegExtendPropertyBase';
export type { Chip16159ExtendProperty, Chip16159RGBExtendProperty, Chip16169sExtendProperty, Chip16169sRGBExtendProperty, Chip2020ExtendProperty, Chip2028RGBVExtendPropey, Chip2053ExtendPropety, Chip2163ExtendPropety, Chip2200ExtendProperty, Chip5043RGBVExtendPropey, Chip5051BExtendPropey, Chip5051BRGBVExtendPropey, Chip5124RGBVExtendPropey, Chip5125RGBVExtendPropey, Chip5152ExtendProperty, Chip5152RGBVExtendPropey, Chip5153ExtendProperty, Chip5153RGBVExtendPropey, Chip5155ExtendProperty, Chip5155RGBVExtendPropey, Chip5166RGBVExtendPropey, Chip5252RGBVExtendPropey, Chip5253BExtendProperty, Chip5253BRGBExtendPropety, Chip5253ExtendProperty, Chip5253RGBExtendPropety, Chip5266RGBVExtendPropey, Chip5353ExtendProperty, Chip5353RGBVExtendPropey, Chip5354ExtendProperty, Chip5354RGBVExtendPropey, Chip5359ExtendProperty, Chip5359RGBExtendProperty, Chip9263RGBVExtendPropey, Chip9348ExtendProperty, Chip9348RGBVExtendPropey, Chip9373ExtendPropety, Chip9748ExtendProperty, Chip9748RGBVExtendPropey, ChipAXS6018RGBVExtendProperty, ChipCFD435AExtendProperty, ChipCFD435ARGBVExtendProperty, ChipCFD455AExtendProperty, ChipCFD455ARGBVExtendProperty, ChipCFD555AExtendProperty, ChipCFD555ARGBVExtendProperty, ChipCNS7153ExtendProperty, ChipCNS7153RGBVExtendProperty, ChipCNS7253ExtendProperty, ChipCNS7253RGBVExtendProperty, ChipCS2017ExtendProperty, ChipCS2017RGBVExtendProperty, ChipCS2017SExtendProperty, ChipCS2017SRGBVExtendProperty, ChipCS2033ExtendProperty, ChipCS2033RGBVExtendProperty, ChipCS2066ExtendProperty, ChipCS2066RGBVExtendProperty, ChipDM413ExtendProperty, ChipDM413RGBVExtendProperty, ChipDP3230RGBVExtendProperty, ChipDP3246ExtendProperty, ChipDP3246RGBVExtendProperty, ChipDP3264ExtendProperty, ChipDP3264RGBVExtendProperty, ChipDP3265ExtendProperty, ChipDP3265RGBVExtendProperty, ChipFM6047ExtendProperty, ChipFM6047RGBVExtendProperty, ChipFM6126ExtendProperty, ChipFM6127ExtendProperty, ChipFM6182ExtendProperty, ChipFM6182RGBVExtendPropey, ChipFM6353ExtendProperty, ChipFM6353RGBVExtendProperty, ChipFM6356ExtendProperty, ChipFM6356RGBVExtendProperty, ChipFM6363ExtendProperty, ChipFM6363RGBVExtendProperty, ChipFM6518ExtendProperty, ChipFM6518RGBVExtendProperty, ChipFM6555ExtendProperty, ChipFM6555RGBVExtendProperty, ChipFM6565ExtendProperty, ChipFM6565RGBVExtendProperty, ChipGW6808ExtendProperty, ChipHB200BRGBVExtendProperty, ChipHBS1910ExtendProperty, ChipHBS1910RGBVExtendProperty, ChipHS3257ExtendProperty, ChipHS3257RGBVExtendProperty, ChipHX5011RGBVExtendProperty, ChipHX8055ExtendProperty, ChipHX8055RGBVExtendProperty, ChipHX8864ExtendProperty, ChipHX8864RGBVExtendProperty, ChipICN2038SExtendProperty, ChipICN2065ExtendProperty, ChipICN2065RGBVExtendProperty, ChipICND2055ExtendProperty, ChipICND2055RGBVExtendProperty, ChipICND2076RGBVExtendProperty, ChipICND2100ExtendProperty, ChipICND2112ExtendProperty, ChipICND2112RGBVExtendPropey, ChipICND2126ExtendProperty, ChipICND2126RGBVExtendProperty, ChipICND2159ExtendProperty, ChipICND2159RGBVExtendProperty, ChipICND2210RGBVExtendProperty, ChipIT1505ExtendProperty, ChipMBI5034BExtendProperty, ChipMBI5034BRGBVExtendProperty, ChipMBI5038ExtendProperty, ChipMBI5038RGBExtendProperty, ChipMBI5043ExtendProperty, ChipMBI5166ExtendProperty, ChipMBI524ExtendProperty, ChipMBI5251ExtendProperty, ChipMBI5251RGBVExtendProperty, ChipMBI5252BExtendProperty, ChipMBI5252BRGBVExtendProperty, ChipMBI5253NewBExtendProperty, ChipMBI5253NewBRGBVExtendProperty, ChipMBI5254ExtendProperty, ChipMBI5254RGBVExtendProperty, ChipMBI525ExtendProperty, ChipMBI5264ExtendProperty, ChipMBI5264RGBVExtendProperty, ChipMBI5268ExtendProperty, ChipMBI5268RGBVExtendProperty, ChipMBI5269ExtendProperty, ChipMBI5269RGBVExtendProperty, ChipMBI5754ExtendProperty, ChipMBI5754RGBVExtendProperty, ChipMBI5759CustomExtendProperty, ChipMBI5759ExtendProperty, ChipMBI5759GRGBExtendProperty, ChipMBI5850RGBVExtendProperty, ChipMBI6033ExtendProperty, ChipMBI6033RGBVExtendProperty, ChipMY9221ExtendProperty, ChipMY9263ExtendProperty, ChipMY9366ExtendProperty, ChipMY9862ARGBExtendProperty, ChipMY9862ExtendProperty, ChipMY9862RGBExtendProperty, ChipMY9866ExtendProperty, ChipNT27002SExtendProperty, ChipNT27002SRGBVExtendProperty, ChipRT5924ExtendProperty, ChipRT5938SSExtendProperty, ChipRT5938SSRGBVExtendProperty, ChipRT5965ExtendProperty, ChipRT5965RGBVExtendProperty, ChipRZRGBVExtendProperty, ChipSCL8060ExtendProperty, ChipSCL8080ExtendProperty, ChipSCL8080RGBVExtendProperty, ChipSCL8081ExtendProperty, ChipSCL8081RGBVExtendProperty, ChipSM16017DSRGBVExtendProperty, ChipSM16017SExtendProperty, ChipSM16027ExtendProperty, ChipSM16136ExtendProperty, ChipSM16136RGBExtendProperty, ChipSM16158ExtendProperty, ChipSM16207SExtendProperty, ChipSM16227ExtendProperty, ChipSM16237ExtendProperty, ChipSM16259ExtendProperty, ChipSM16259RGBVExtendProperty, ChipSM16359ExtendProperty, ChipSM16359RGBVExtendProperty, ChipSM16369ExtendProperty, ChipSM16369RGBVExtendProperty, ChipSM16380ExtendProperty, ChipSM16380RGBVExtendProperty, ChipSM16388ExtendProperty, ChipSM16388RGBVExtendProperty, ChipSM16389ExtendProperty, ChipSM16389RGBVExtendProperty, ChipSUM2017TDExtendProperty, ChipSUM2017TExtendProperty, ChipSUM2028ExtendProperty, ChipSUM2030ExtendProperty, ChipSUM2032ExtendProperty, ChipSUM2033BaseExtendProperty, ChipSUM2033ExtendProperty, ChipSUM2117ExtendProperty, ChipTL3103UDExtendProperty, ChipTL3103UDRGBVExtendProperty, ChipTLC5929ExtendProperty, ChipTLC5948AExtendProperty, ChipTLC59581ExtendProperty, ChipTLC5958ExtendProperty, ChipTLC6983ExtendProperty, ChipTLC6983RGBVExtendProperty, ChipUCS5603RGBVExtendProperty, ChipXM11201GRGBVExtendProperty, ChipXM11202GRGBVExtendProperty, ChipXM11920GRGBVExtendProperty, ChipYY6018RGBVExtendProperty, CustomRegExtendPropertyBase, ChipICN2065AutoRefreshRataParam, ChipICND2055AutoRefreshRataParam, ChipMBI5850AutoRefreshRataParam, ChipSCL8080AutoRefreshRataParam, };
export declare const ChipBaseExtendPropey: t.UnionC<[t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    EliminateAfterLowGrade: t.Type<number, number, unknown>;
    DimCompensation: t.Type<number, number, unknown>;
    LowAshImprovement2: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshImprovement1: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestGrade: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
}>, t.PartialC<{
    GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
    LowGayCompensation: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    OpenTestGrade: t.Type<number, number, unknown>;
    ShadowVoltage: t.Type<number, number, unknown>;
    IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
    Gain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
}>]>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    BrightnessGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip2020ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip2028RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.TypeC<{
    EnhancedModeSwitch: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RColorAdjust: t.Type<number, number, unknown>;
    GColorAdjust: t.Type<number, number, unknown>;
    BColorAdjust: t.Type<number, number, unknown>;
    RVanishingStrength: t.Type<number, number, unknown>;
    GVanishingStrength: t.Type<number, number, unknown>;
    BVanishingStrength: t.Type<number, number, unknown>;
    RdeGhost: t.Type<boolean, boolean, unknown>;
    GdeGhost: t.Type<boolean, boolean, unknown>;
    BdeGhost: t.Type<boolean, boolean, unknown>;
    RBlackingEnhance: t.Type<boolean, boolean, unknown>;
    GBlackingEnhance: t.Type<boolean, boolean, unknown>;
    BBlackingEnhance: t.Type<boolean, boolean, unknown>;
    RHeadDarkLineOpt: t.Type<number, number, unknown>;
    GHeadDarkLineOpt: t.Type<number, number, unknown>;
    BHeadDarkLineOpt: t.Type<number, number, unknown>;
    RFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    GFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    BFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    RRemoveBadPointGain: t.Type<number, number, unknown>;
    GRemoveBadPointGain: t.Type<number, number, unknown>;
    BRemoveBadPointGain: t.Type<number, number, unknown>;
}>, t.PartialC<{
    EnhancedMode: t.Type<number, number, unknown>;
    RAberrationOptimize: t.Type<boolean, boolean, unknown>;
    GAberrationOptimize: t.Type<boolean, boolean, unknown>;
    BAberrationOptimize: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    RColorAdjustEn: t.Type<boolean, boolean, unknown>;
    GColorAdjustEn: t.Type<boolean, boolean, unknown>;
    BColorAdjustEn: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
    IsCustomMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFifth: t.Type<number, number, unknown>;
    GreenRegValueConfigFifth: t.Type<number, number, unknown>;
    BlueRegValueConfigFifth: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.TypeC<{
    EnhancedModeSwitch: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RVanishingStrength: t.Type<number, number, unknown>;
    GVanishingStrength: t.Type<number, number, unknown>;
    BVanishingStrength: t.Type<number, number, unknown>;
    RedDN: t.Type<boolean, boolean, unknown>;
    GreenDN: t.Type<boolean, boolean, unknown>;
    BlueDN: t.Type<boolean, boolean, unknown>;
    RdeGhost: t.Type<boolean, boolean, unknown>;
    GdeGhost: t.Type<boolean, boolean, unknown>;
    BdeGhost: t.Type<boolean, boolean, unknown>;
    RHeadDarkLineOpt: t.Type<number, number, unknown>;
    GHeadDarkLineOpt: t.Type<number, number, unknown>;
    BHeadDarkLineOpt: t.Type<number, number, unknown>;
    RFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    GFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    BFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
}>, t.PartialC<{
    EnhancedMode: t.Type<number, number, unknown>;
    RAberrationOptimize: t.Type<boolean, boolean, unknown>;
    GAberrationOptimize: t.Type<boolean, boolean, unknown>;
    BAberrationOptimize: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    RColorAdjust: t.Type<number, number, unknown>;
    GColorAdjust: t.Type<number, number, unknown>;
    BColorAdjust: t.Type<number, number, unknown>;
    RColorAdjustEn: t.Type<boolean, boolean, unknown>;
    GColorAdjustEn: t.Type<boolean, boolean, unknown>;
    BColorAdjustEn: t.Type<boolean, boolean, unknown>;
    RBlackingEnhance: t.Type<boolean, boolean, unknown>;
    GBlackingEnhance: t.Type<boolean, boolean, unknown>;
    BBlackingEnhance: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegisterList: import("../../lib/common").BufferFromBase64;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip2200ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        GCLKShift: t.Type<number, number, unknown>;
        SelectChargeMode: t.Type<number, number, unknown>;
        ColorShiftCompensation: t.Type<number, number, unknown>;
        GCLKRising: t.Type<boolean, boolean, unknown>;
        EnableCharge: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5043ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        GCLKShift: t.Type<number, number, unknown>;
        SelectChargeMode: t.Type<number, number, unknown>;
        ColorShiftCompensation: t.Type<number, number, unknown>;
        GCLKRising: t.Type<boolean, boolean, unknown>;
        EnableCharge: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5043ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        GCLKShift: t.Type<number, number, unknown>;
        SelectChargeMode: t.Type<number, number, unknown>;
        ColorShiftCompensation: t.Type<number, number, unknown>;
        GCLKRising: t.Type<boolean, boolean, unknown>;
        EnableCharge: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5043ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        GCLKShift: t.Type<number, number, unknown>;
        SelectChargeMode: t.Type<number, number, unknown>;
        ColorShiftCompensation: t.Type<number, number, unknown>;
        GCLKRising: t.Type<boolean, boolean, unknown>;
        EnableCharge: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5043ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5043RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    EliminateAfterLow: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5051BExtendPropey">;
}>]>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5051BExtendPropey">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5051BExtendPropey">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5051BExtendPropey">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5051BExtendPropey">;
    }>]>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        LowAshImproveEnable: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI524ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        LowAshImproveEnable: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI524ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        LowAshImproveEnable: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI524ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        LowAshImproveEnable: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI524ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5124RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OEPlusWidth: t.Type<number, number, unknown>;
    HardwareResetOne: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    HardwareResetTwo: t.Type<number, number, unknown>;
    SoftwareReset: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5125RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
    LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
    FirstLineCompensation: t.Type<import("..").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
    EliminationGhost: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("..").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("..").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("..").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigFirst: t.Type<number, number, unknown>;
        GreenRegValueConfigFirst: t.Type<number, number, unknown>;
        BlueRegValueConfigFirst: t.Type<number, number, unknown>;
        VRedRegValueConfigFirst: t.Type<number, number, unknown>;
        RedRegValueConfigSecond: t.Type<number, number, unknown>;
        GreenRegValueConfigSecond: t.Type<number, number, unknown>;
        BlueRegValueConfigSecond: t.Type<number, number, unknown>;
        VRedRegValueConfigSecond: t.Type<number, number, unknown>;
        LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
        LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
        FirstLineCompensation: t.Type<import("..").FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
        EliminationGhost: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5152RGBVExtendPropey">;
}>]>, t.PartialC<{
    EliminateAfterLow: t.Type<number, number, unknown>;
    FirstSweepEliminationMaster: t.Type<number, number, unknown>;
    FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
    FirstSweepEliminationSecond: t.Type<number, number, unknown>;
    LowAshColorCompensationOne: t.Type<number, number, unknown>;
    LowAshColorCompensationTwo: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
    GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
    EnhancedModeOne: t.Type<boolean, boolean, unknown>;
    SlowOpen: t.Type<boolean, boolean, unknown>;
    SwapErrorPoint: t.Type<number, number, unknown>;
    EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    GreenProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    BlueProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    VRedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5153RGBVExtendPropey">;
}>]>, t.PartialC<{
    OptimizationEnable: t.Type<boolean, boolean, unknown>;
    GammaPresetType: t.Type<number, number, unknown>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.PartialC<{
        OptimizationEnable: t.Type<boolean, boolean, unknown>;
        GammaPresetType: t.Type<number, number, unknown>;
    }>;
    GreenProperty: t.PartialC<{
        OptimizationEnable: t.Type<boolean, boolean, unknown>;
        GammaPresetType: t.Type<number, number, unknown>;
    }>;
    BlueProperty: t.PartialC<{
        OptimizationEnable: t.Type<boolean, boolean, unknown>;
        GammaPresetType: t.Type<number, number, unknown>;
    }>;
    VRedProperty: t.PartialC<{
        OptimizationEnable: t.Type<boolean, boolean, unknown>;
        GammaPresetType: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5155RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5166ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5166ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5166ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetBlanking: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5166ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5166RGBVExtendPropey">;
}>]>, t.PartialC<{}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
    LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    TextGhostElimination: t.Type<number, number, unknown>;
    CrossCouplingOptimization: t.Type<number, number, unknown>;
    BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
    FirstSweepBiasElimination: t.Type<number, number, unknown>;
}>, t.PartialC<{
    GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    GradientCompensation: t.Type<number, number, unknown>;
    GradientCompensationOne: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    EnableLowImprovement: t.Type<boolean, boolean, unknown>;
    EnShadeTransitOptimize: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSeven: t.Type<number, number, unknown>;
    GreenRegValueConfigSeven: t.Type<number, number, unknown>;
    BlueRegValueConfigSeven: t.Type<number, number, unknown>;
    VRedRegValueConfigSeven: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstSweepElimination: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5253ExtendProperty">;
}>]>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253ExtendProperty">;
    }>]>;
    EnableLowImprovement: t.Type<boolean, boolean, unknown>;
    EnShadeTransitOptimize: t.Type<boolean, boolean, unknown>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>, t.PartialC<{}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    DeGhostLevel: t.Type<number, number, unknown>;
    FirstSweepEliminateFirst: t.Type<number, number, unknown>;
    FirstSweepEliminateTwo: t.Type<number, number, unknown>;
    LowAshImprovementFirst: t.Type<number, number, unknown>;
    LowAshImprovementTwo: t.Type<number, number, unknown>;
    LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
    EnhancedMode: t.Type<boolean, boolean, unknown>;
    LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
    OpenDetectPower: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5353ExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    GlobalCurrentGainAdjust: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5353ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5353ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5353ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5353ExtendProperty">;
    }>]>;
    GlobalCurrentGainConst: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    EnableLowImprovement: t.Type<boolean, boolean, unknown>;
    LowImprovementFirst: t.Type<number, number, unknown>;
    LowImprovementTwo: t.Type<number, number, unknown>;
    EnableLowAshUniformity: t.Type<boolean, boolean, unknown>;
    EnableEnergyConserve: t.Type<boolean, boolean, unknown>;
    EnableGCLKMutiplier: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    DeGhostLevel: t.Type<number, number, unknown>;
    FirstSweepEliminateFirst: t.Type<number, number, unknown>;
    FirstSweepEliminateTwo: t.Type<number, number, unknown>;
    LowAshImprovementFirst: t.Type<number, number, unknown>;
    LowAshImprovementTwo: t.Type<number, number, unknown>;
    LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
    EnhancedMode: t.Type<boolean, boolean, unknown>;
    LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
    OpenDetectPower: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5354ExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    GlobalCurrentGainAdjust: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5354ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5354ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5354ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        DeGhostLevel: t.Type<number, number, unknown>;
        FirstSweepEliminateFirst: t.Type<number, number, unknown>;
        FirstSweepEliminateTwo: t.Type<number, number, unknown>;
        LowAshImprovementFirst: t.Type<number, number, unknown>;
        LowAshImprovementTwo: t.Type<number, number, unknown>;
        LowAshImprovementThrid: t.Type<boolean, boolean, unknown>;
        EnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshdimLineConpensentionY: t.Type<boolean, boolean, unknown>;
        OpenDetectPower: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5354ExtendProperty">;
    }>]>;
    GlobalCurrentGainConst: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    EnableLowImprovement: t.Type<boolean, boolean, unknown>;
    LowImprovementFirst: t.Type<number, number, unknown>;
    LowImprovementTwo: t.Type<number, number, unknown>;
    EnableLowAshUniformity: t.Type<boolean, boolean, unknown>;
    EnableEnergyConserve: t.Type<boolean, boolean, unknown>;
    EnableGCLKMutiplier: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    OpenDetectionVoltage: t.Type<number, number, unknown>;
    CloseDetectionVoltage: t.Type<number, number, unknown>;
    CoarseGrade: t.Type<number, number, unknown>;
    AdvancedLowGayCompensation: t.Type<number, number, unknown>;
    LowGayCompensation: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
    IsAmplifyCurrent: t.Type<boolean, boolean, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Dvi: t.Type<number, number, unknown>;
    ExcessiveTime: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    GextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    BextendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        OpenDetectionVoltage: t.Type<number, number, unknown>;
        CloseDetectionVoltage: t.Type<number, number, unknown>;
        CoarseGrade: t.Type<number, number, unknown>;
        AdvancedLowGayCompensation: t.Type<number, number, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5359ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    IstwoWayTransmission: t.Type<boolean, boolean, unknown>;
    IsGhostRemovalEnhance: t.Type<boolean, boolean, unknown>;
    IsSavePower: t.Type<boolean, boolean, unknown>;
    IsSavePowerPlus: t.Type<boolean, boolean, unknown>;
    FineGrade: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    Gclk: t.Type<number, number, unknown>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    IsDoublePower: t.Type<boolean, boolean, unknown>;
    RowChangePoint5359: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5359RGBExtendProperty">;
}>]>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EnResetAPDMOrPWM: t.Type<boolean, boolean, unknown>;
        EnManualSyc: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        ModeSelecte: t.Type<boolean, boolean, unknown>;
        PowerSavingMode: t.Type<boolean, boolean, unknown>;
        GclkMonitor: t.Type<boolean, boolean, unknown>;
        GclkPrivider: t.Type<boolean, boolean, unknown>;
        EnAutoCloseChannel: t.Type<boolean, boolean, unknown>;
        LedThreadType: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9263ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EnResetAPDMOrPWM: t.Type<boolean, boolean, unknown>;
        EnManualSyc: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        ModeSelecte: t.Type<boolean, boolean, unknown>;
        PowerSavingMode: t.Type<boolean, boolean, unknown>;
        GclkMonitor: t.Type<boolean, boolean, unknown>;
        GclkPrivider: t.Type<boolean, boolean, unknown>;
        EnAutoCloseChannel: t.Type<boolean, boolean, unknown>;
        LedThreadType: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9263ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EnResetAPDMOrPWM: t.Type<boolean, boolean, unknown>;
        EnManualSyc: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        ModeSelecte: t.Type<boolean, boolean, unknown>;
        PowerSavingMode: t.Type<boolean, boolean, unknown>;
        GclkMonitor: t.Type<boolean, boolean, unknown>;
        GclkPrivider: t.Type<boolean, boolean, unknown>;
        EnAutoCloseChannel: t.Type<boolean, boolean, unknown>;
        LedThreadType: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9263ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EnResetAPDMOrPWM: t.Type<boolean, boolean, unknown>;
        EnManualSyc: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        ModeSelecte: t.Type<boolean, boolean, unknown>;
        PowerSavingMode: t.Type<boolean, boolean, unknown>;
        GclkMonitor: t.Type<boolean, boolean, unknown>;
        GclkPrivider: t.Type<boolean, boolean, unknown>;
        EnAutoCloseChannel: t.Type<boolean, boolean, unknown>;
        LedThreadType: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9263ExtendProperty">;
    }>]>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CurrentSet1: t.Type<number, number, unknown>;
    CurrentSet2: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowGrayscaleCompensation: t.Type<number, number, unknown>;
    FirstScanCompensation: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    CurrentSet3: t.Type<number, number, unknown>;
    NextGhostAbatement: t.Type<number, number, unknown>;
    Adjustment: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    GrayscaleSelect: t.Type<number, number, unknown>;
    LastGhostAbatement2: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
    }>]>;
    DummyGclkEn: t.Type<boolean, boolean, unknown>;
    LastGhostAbatement1: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    RedGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    BFirstScancompensation: t.Type<number, number, unknown>;
    BlueVanishingRating: t.Type<number, number, unknown>;
    CrossEn: t.Type<boolean, boolean, unknown>;
    GCurrentCompensationThird: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    GreenVanishingRating: t.Type<number, number, unknown>;
    RCurrentCompensationThird: t.Type<number, number, unknown>;
    RedVanishingRating: t.Type<number, number, unknown>;
    VRCurrentCompensationThird: t.Type<number, number, unknown>;
    VRedVanishingRating: t.Type<number, number, unknown>;
}>, t.PartialC<{
    BCompensationMode: t.Type<number, number, unknown>;
    BCurrentCompensationFirst: t.Type<number, number, unknown>;
    BCurrentCompensationSec: t.Type<number, number, unknown>;
    BCurrentCompensationThird: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    GclkMutiRate: t.Type<boolean, boolean, unknown>;
    GCompensationMode: t.Type<number, number, unknown>;
    GCurrentCompensationFirst: t.Type<number, number, unknown>;
    GCurrentCompensationSec: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    RCompensationMode: t.Type<number, number, unknown>;
    RCurrentCompensationFirst: t.Type<number, number, unknown>;
    RCurrentCompensationSec: t.Type<number, number, unknown>;
    RCurrentCompensationFo: t.Type<number, number, unknown>;
    GCurrentCompensationFo: t.Type<number, number, unknown>;
    BCurrentCompensationFo: t.Type<number, number, unknown>;
    RFirstScancompensation: t.Type<number, number, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    VRCurrentCompensationFirst: t.Type<number, number, unknown>;
    VRCurrentCompensationSec: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip9373ExtendPropety">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    LastGhostAbatement2: t.Type<number, number, unknown>;
}>, t.PartialC<{
    CurrentSet1: t.Type<number, number, unknown>;
    CurrentSet2: t.Type<number, number, unknown>;
    CurrentSet3: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowGrayscaleCompensation: t.Type<number, number, unknown>;
    FirstScanCompensation: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    NextGhostAbatement: t.Type<number, number, unknown>;
    Adjustment: t.Type<number, number, unknown>;
    LastGhostAbatement1: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
}>]>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    GrayscaleSelect: t.Type<number, number, unknown>;
    DummyGclkEn: t.Type<boolean, boolean, unknown>;
    RedGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    WeightValueConfig: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegData: import("../../lib/common").BufferFromBase64;
    SecondRegData: import("../../lib/common").BufferFromBase64;
    ThirdRegData: import("../../lib/common").BufferFromBase64;
    FourthRegData: import("../../lib/common").BufferFromBase64;
    FifthRegData: import("../../lib/common").BufferFromBase64;
    SixthRegData: import("../../lib/common").BufferFromBase64;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    ChargingOften: t.Type<number, number, unknown>;
    LineShadowTime: t.Type<number, number, unknown>;
    ShadowChargingMode: t.Type<number, number, unknown>;
    AdditionalField: t.Type<number, number, unknown>;
    HighGrayGain: t.Type<number, number, unknown>;
    MultilevelCurrent: t.Type<boolean, boolean, unknown>;
    BlackLine: t.Type<number, number, unknown>;
    DischargeTime: t.Type<number, number, unknown>;
    DischargeR: t.Type<boolean, boolean, unknown>;
    DischargeG: t.Type<boolean, boolean, unknown>;
    DischargeB: t.Type<boolean, boolean, unknown>;
    RextR: t.Type<number, number, unknown>;
    RextG: t.Type<number, number, unknown>;
    RextB: t.Type<number, number, unknown>;
    TubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    LineTubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    Contrast: t.Type<number, number, unknown>;
    GammaGloablBright: t.Type<number, number, unknown>;
    GammaRBright: t.Type<number, number, unknown>;
    GammaGBright: t.Type<number, number, unknown>;
    GammaBBright: t.Type<number, number, unknown>;
    LineCP: t.Type<number, number, unknown>;
    CtrlEndPoint: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipAXS6018RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CouplingStrengthAdjust: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    LowGrayGoodLevel: t.Type<number, number, unknown>;
    SetWeakup: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD435ARGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CouplingStrengthAdjust: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    LowGrayGoodLevel: t.Type<number, number, unknown>;
    SetWeakup: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD455AExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD455AExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD455AExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD455AExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD455AExtendProperty">;
    }>]>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    GclkDoubleLine: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD455ARGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    SeventhRegValue: t.Type<number, number, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    ScanNumSetting: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverCycleNumSetting: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CoupledOutputShift: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    PWMGraySetting: t.Type<number, number, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    CurrentCompsentionGear: t.Type<number, number, unknown>;
    WakeUpSettings: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD555AExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD555AExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD555AExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD555AExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD555AExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD555ARGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7153ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7153ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7153ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7153ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7153ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7153RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    OPEN_DET: t.Type<boolean, boolean, unknown>;
    SCAN_LINE: t.Type<number, number, unknown>;
    PWM_OPT: t.Type<number, number, unknown>;
    GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
    PWM_GROUP: t.Type<number, number, unknown>;
    PWM_REV: t.Type<boolean, boolean, unknown>;
    PartNumPerRefValue: t.Type<number, number, unknown>;
    ADJ: t.Type<number, number, unknown>;
    IGAIN: t.Type<number, number, unknown>;
    ADJ_Enable: t.Type<boolean, boolean, unknown>;
    KeenPointVoltage: t.Type<number, number, unknown>;
    FirstLineOffsetCompensation: t.Type<number, number, unknown>;
    PWM_ALL: t.Type<number, number, unknown>;
    PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
    FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
    OPEN_RST: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    CNS7253_R: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_G: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_B: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_V: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7253RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstRegistor: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LineEliminationEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ResponseSpeed: t.Type<number, number, unknown>;
    WorkMode: t.Type<number, number, unknown>;
    SetCurrentPosition: t.Type<number, number, unknown>;
    InflectionCurrent: t.Type<number, number, unknown>;
    DMAWriteMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstRegistor: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LineEliminationEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ResponseSpeed: t.Type<number, number, unknown>;
    WorkMode: t.Type<number, number, unknown>;
    SetCurrentPosition: t.Type<number, number, unknown>;
    InflectionCurrent: t.Type<number, number, unknown>;
    DMAWriteMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017SRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CouplingStrengthAdjust: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    CurrentCompsentionGear: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2033ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2033ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2033ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2033ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2033ExtendProperty">;
    }>]>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2033RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    SeventhRegValue: t.Type<number, number, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    ScanNumSetting: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverCycleNumSetting: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CoupledOutputShift: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    PWMGraySetting: t.Type<number, number, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    CurrentCompsentionGear: t.Type<number, number, unknown>;
    WakeUpSettings: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        SeventhRegValue: t.Type<number, number, unknown>;
        RefreshRate: t.Type<number, number, unknown>;
        ScanNumSetting: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverCycleNumSetting: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CoupledOutputShift: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        PWMGraySetting: t.Type<number, number, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
        PLLFreqDivision: t.Type<number, number, unknown>;
        PLLFreqDoubling: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        CurrentCompsentionGear: t.Type<number, number, unknown>;
        WakeUpSettings: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2066RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstReg: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDM413ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDM413ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDM413ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDM413ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDM413RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    VsCorner: t.Type<number, number, unknown>;
    GlckSet: t.Type<number, number, unknown>;
    DisshdEn: t.Type<boolean, boolean, unknown>;
    PwmAdd: t.Type<boolean, boolean, unknown>;
    PwmOpt: t.Type<boolean, boolean, unknown>;
    PowerSavePd: t.Type<boolean, boolean, unknown>;
    RZ_T1H: t.Type<number, number, unknown>;
    RZ_T0H: t.Type<number, number, unknown>;
    RZ_DCLK: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3230RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    GammaSmoothingLevel: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
    ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    ClkDataTransMode: t.Type<number, number, unknown>;
    BlackScreenEnergySaving: t.Type<boolean, boolean, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3246RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
    LowGreyPittingOptimization: t.Type<number, number, unknown>;
    GammaSmoothingLevel: t.Type<number, number, unknown>;
    ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    ShadowEliminationMoment: t.Type<number, number, unknown>;
    CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
    CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
    CouplingOptimizationGrade: t.Type<number, number, unknown>;
    CouplingCoefficient: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RefreshNum: t.Type<number, number, unknown>;
    MaxRefreshNum: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    RefreshNumPerVs: t.Type<number, number, unknown>;
    LineGclkNum: t.Type<number, number, unknown>;
    R: t.Type<number, number, unknown>;
    LowGrayDisplayEnhance: t.Type<boolean, boolean, unknown>;
    BlackScreenDynamicEnergySaving: t.Type<number, number, unknown>;
    HighGrayDataIndependentRefresh: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3264RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
    LowGreyPittingOptimization: t.Type<number, number, unknown>;
    GammaSmoothingLevel: t.Type<number, number, unknown>;
    ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    ShadowEliminationMoment: t.Type<number, number, unknown>;
    CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
    CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
    CouplingOptimizationGrade: t.Type<number, number, unknown>;
    CoupledOptimization1: t.Type<number, number, unknown>;
    CouplingCoefficient: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3265ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RefreshNum: t.Type<number, number, unknown>;
    MaxRefreshNum: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CoupledOptimization1: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3265ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CoupledOptimization1: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3265ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CoupledOptimization1: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3265ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CoupledOptimization1: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3265ExtendProperty">;
    }>]>;
    RefreshNumPerVs: t.Type<number, number, unknown>;
    LineGclkNum: t.Type<number, number, unknown>;
    R: t.Type<number, number, unknown>;
    LowGrayDisplayEnhance: t.Type<boolean, boolean, unknown>;
    BlackScreenDynamicEnergySaving: t.Type<number, number, unknown>;
    HighGrayDataIndependentRefresh: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3265RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    OEWidth: t.Type<number, number, unknown>;
    OEDelay: t.Type<number, number, unknown>;
    Inflexion: t.Type<number, number, unknown>;
    HiddenMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    ErrCurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OpenTestModel: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6047RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RWhiteBalance: t.Type<number, number, unknown>;
    GWhiteBalance: t.Type<number, number, unknown>;
    BWhiteBalance: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    HandUpdata: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RGainPoint: t.Type<number, number, unknown>;
    GGainPoint: t.Type<number, number, unknown>;
    BGainPoint: t.Type<number, number, unknown>;
    RConstantCurrent: t.Type<number, number, unknown>;
    GConstantCurrent: t.Type<number, number, unknown>;
    BConstantCurrent: t.Type<number, number, unknown>;
    ROESignalSelect: t.Type<number, number, unknown>;
    GOESignalSelect: t.Type<number, number, unknown>;
    BOESignalSelect: t.Type<number, number, unknown>;
    REnableSignalSelect: t.Type<boolean, boolean, unknown>;
    GEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    BEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    RDelayTime: t.Type<number, number, unknown>;
    GDelayTime: t.Type<number, number, unknown>;
    BDelayTime: t.Type<number, number, unknown>;
    RBlankingSignalSelect: t.Type<number, number, unknown>;
    GBlankingSignalSelect: t.Type<number, number, unknown>;
    BBlankingSignalSelect: t.Type<number, number, unknown>;
    RFallingTimeSelect: t.Type<number, number, unknown>;
    GFallingTimeSelect: t.Type<number, number, unknown>;
    BFallingTimeSelect: t.Type<number, number, unknown>;
    RLATCHSelect: t.Type<number, number, unknown>;
    GLATCHSelect: t.Type<number, number, unknown>;
    BLATCHSelect: t.Type<number, number, unknown>;
    RAMSelect: t.Type<number, number, unknown>;
    GAMSelect: t.Type<number, number, unknown>;
    BAMSelect: t.Type<number, number, unknown>;
    RAMSignalSelect: t.Type<boolean, boolean, unknown>;
    GAMSignalSelect: t.Type<boolean, boolean, unknown>;
    BAMSignalSelect: t.Type<boolean, boolean, unknown>;
    RCurrentRangSelect: t.Type<number, number, unknown>;
    GCurrentRangSelect: t.Type<number, number, unknown>;
    BCurrentRangSelect: t.Type<number, number, unknown>;
    RCLKtoSDOSelect: t.Type<number, number, unknown>;
    GCLKtoSDOSelect: t.Type<number, number, unknown>;
    BCLKtoSDOSelect: t.Type<number, number, unknown>;
    ROEWidthSelect: t.Type<number, number, unknown>;
    GOEWidthSelect: t.Type<number, number, unknown>;
    BOEWidthSelect: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    BlankingMode: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6126ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFourth: t.Type<number, number, unknown>;
    GreenRegValueConfigFourth: t.Type<number, number, unknown>;
    BlueRegValueConfigFourth: t.Type<number, number, unknown>;
    VRedRegValueConfigFourth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6127ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegValueConfigFirst: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
}>, t.PartialC<{
    CurrentLowCompsention: t.Type<number, number, unknown>;
    LowCompsention: t.Type<number, number, unknown>;
    FirstCompsentionOne: t.Type<number, number, unknown>;
    ErrorDetection: t.Type<number, number, unknown>;
    GhostElimination: t.Type<number, number, unknown>;
    DetectionEable: t.Type<number, number, unknown>;
    FirstCompsentionTwo: t.Type<number, number, unknown>;
    CurrentPoint: t.Type<number, number, unknown>;
    OpenUpTime: t.Type<number, number, unknown>;
    PDMOpenTime: t.Type<number, number, unknown>;
    ParityTimeSet: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6182RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    Gain: t.Type<number, number, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6353ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
}>, t.PartialC<{
    ScanNumber: t.Type<number, number, unknown>;
    PartNumRef: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6353ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6353ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6353ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6353RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    RegFifth: t.Type<number, number, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    Gain: t.Type<number, number, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6356RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    RegFifth: t.Type<number, number, unknown>;
    FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6363ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6363ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6363ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6363ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6363ExtendProperty">;
    }>]>;
    ScanCount: t.Type<number, number, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6363RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    RegFifth: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    ChannelStaggering: t.Type<number, number, unknown>;
    IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
    CouplingOptimize: t.Type<number, number, unknown>;
    IsClampEnhancement: t.Type<boolean, boolean, unknown>;
    IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
    ChannelOpeningSpeed: t.Type<number, number, unknown>;
    ChannelClosingSpeed: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    ScanCount: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6518RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LEN: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
    LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
    SlowlyOpen: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6555RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LEN: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
    LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
    SlowlyOpen: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6565RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ConfigValue7: t.Type<number, number, unknown>;
    ConfigValue8: t.Type<number, number, unknown>;
    ConfigValue9: t.Type<number, number, unknown>;
    ConfigValue17: t.Type<number, number, unknown>;
    ConfigValue18: t.Type<number, number, unknown>;
    ConfigValue19: t.Type<number, number, unknown>;
    ConfigValue20: t.Type<number, number, unknown>;
    ConfigValue21: t.Type<number, number, unknown>;
    ConfigValue22: t.Type<number, number, unknown>;
    ConfigValue23: t.Type<number, number, unknown>;
    ConfigValue24: t.Type<number, number, unknown>;
    ConfigValue25: t.Type<number, number, unknown>;
    ConfigValue26: t.Type<number, number, unknown>;
    ConfigValue27: t.Type<number, number, unknown>;
    ConfigValue28: t.Type<number, number, unknown>;
    ConfigValue29: t.Type<number, number, unknown>;
    ConfigValue30: t.Type<number, number, unknown>;
    ConfigValue31: t.Type<number, number, unknown>;
    ConfigValue32: t.Type<number, number, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    ConfigArray: import("../../lib/common").BufferFromBase64;
    ConfigValue1: t.Type<number, number, unknown>;
    ConfigValue2: t.Type<number, number, unknown>;
    ConfigValue3: t.Type<number, number, unknown>;
    ConfigValue4: t.Type<number, number, unknown>;
    ConfigValue5: t.Type<number, number, unknown>;
    ConfigValue6: t.Type<number, number, unknown>;
    ConfigValue10: t.Type<number, number, unknown>;
    ConfigValue11: t.Type<number, number, unknown>;
    ConfigValue12: t.Type<number, number, unknown>;
    ConfigValue13: t.Type<number, number, unknown>;
    ConfigValue14: t.Type<number, number, unknown>;
    ConfigValue15: t.Type<number, number, unknown>;
    ConfigValue16: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipGW6808ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    RedFirstReg4: t.Type<number, number, unknown>;
    GreenFirstReg4: t.Type<number, number, unknown>;
    BlueFirstReg4: t.Type<number, number, unknown>;
    VRedFirstReg4: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    HB200B_T1H: t.Type<number, number, unknown>;
    HB200B_T0H: t.Type<number, number, unknown>;
    HB200B_T: t.Type<number, number, unknown>;
    ChannelOpenDetectionEn: t.Type<boolean, boolean, unknown>;
    ChannelOpenDetection: t.Type<number, number, unknown>;
    WorkingMode: t.Type<number, number, unknown>;
    AntiInterferenceEn: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHB200BRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHBS1910RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHS3257ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ModeSelect: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHS3257ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHS3257ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHS3257ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHS3257ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHS3257RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    WorkPattern: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX5011RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8055ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8055ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8055ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8055ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8055ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8055RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    LowGreyOrderOptModel: t.Type<number, number, unknown>;
    LowGreyOrderOpt2: t.Type<number, number, unknown>;
    CouplingStartTime: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    FirstLineCompensationTime: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    FirstLineCompensationLevel: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    LowGrayColorCompensation: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingReguEnable: t.Type<boolean, boolean, unknown>;
    CouplingEnhan: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    GammaTable: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    OpenCircuitDetctEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8864RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RWhiteBalance: t.Type<number, number, unknown>;
    GWhiteBalance: t.Type<number, number, unknown>;
    BWhiteBalance: t.Type<number, number, unknown>;
    HandUpdata: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsDeadPix: t.Type<boolean, boolean, unknown>;
    RGainPoint: t.Type<number, number, unknown>;
    GGainPoint: t.Type<number, number, unknown>;
    BGainPoint: t.Type<number, number, unknown>;
    RConstantCurrent: t.Type<number, number, unknown>;
    GConstantCurrent: t.Type<number, number, unknown>;
    BConstantCurrent: t.Type<number, number, unknown>;
    ROESignalSelect: t.Type<number, number, unknown>;
    GOESignalSelect: t.Type<number, number, unknown>;
    BOESignalSelect: t.Type<number, number, unknown>;
    REnableSignalSelect: t.Type<boolean, boolean, unknown>;
    GEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    BEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    RDelayTime: t.Type<number, number, unknown>;
    GDelayTime: t.Type<number, number, unknown>;
    BDelayTime: t.Type<number, number, unknown>;
    RBlankingSignalSelect: t.Type<number, number, unknown>;
    GBlankingSignalSelect: t.Type<number, number, unknown>;
    BBlankingSignalSelect: t.Type<number, number, unknown>;
    RFallingTimeSelect: t.Type<number, number, unknown>;
    GFallingTimeSelect: t.Type<number, number, unknown>;
    BFallingTimeSelect: t.Type<number, number, unknown>;
    RLATCHSelect: t.Type<number, number, unknown>;
    GLATCHSelect: t.Type<number, number, unknown>;
    BLATCHSelect: t.Type<number, number, unknown>;
    RAMSelect: t.Type<number, number, unknown>;
    GAMSelect: t.Type<number, number, unknown>;
    BAMSelect: t.Type<number, number, unknown>;
    RAMSignalSelect: t.Type<boolean, boolean, unknown>;
    GAMSignalSelect: t.Type<boolean, boolean, unknown>;
    BAMSignalSelect: t.Type<boolean, boolean, unknown>;
    RCurrentRangSelect: t.Type<number, number, unknown>;
    GCurrentRangSelect: t.Type<number, number, unknown>;
    BCurrentRangSelect: t.Type<number, number, unknown>;
    RCLKtoSDOSelect: t.Type<number, number, unknown>;
    GCLKtoSDOSelect: t.Type<number, number, unknown>;
    BCLKtoSDOSelect: t.Type<number, number, unknown>;
    ROEWidthSelect: t.Type<number, number, unknown>;
    GOEWidthSelect: t.Type<number, number, unknown>;
    BOEWidthSelect: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    BlankingMode: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2038SExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
    RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshUniformity: t.Type<number, number, unknown>;
    TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingToAdjust: t.Type<number, number, unknown>;
    CrossCouplingToAdjust: t.Type<number, number, unknown>;
    SlowlyOpening: t.Type<number, number, unknown>;
    DclkNumPerScanRegPart: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    Group_Num: t.Type<number, number, unknown>;
    GclkNum: t.Type<number, number, unknown>;
    RegValue: t.ArrayC<t.Type<number, number, unknown>>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThreeRegValue: t.Type<number, number, unknown>;
    FourRegValue: t.Type<number, number, unknown>;
    FiveRegValue: t.Type<number, number, unknown>;
    SixRegValue: t.Type<number, number, unknown>;
    SevenRegValue: t.Type<number, number, unknown>;
    EightRegValue: t.Type<number, number, unknown>;
    NineRegValue: t.Type<number, number, unknown>;
    TenRegValue: t.Type<number, number, unknown>;
    ElevenRegValue: t.Type<number, number, unknown>;
    TwelveRegValue: t.Type<number, number, unknown>;
    ThirteenRegValue: t.Type<number, number, unknown>;
    ForteenRegValue: t.Type<number, number, unknown>;
    FifteenRegValue: t.Type<number, number, unknown>;
    SixteenRegValue: t.Type<number, number, unknown>;
    SeveteenRegValue: t.Type<number, number, unknown>;
    EighteenRegValue: t.Type<number, number, unknown>;
    NineteenRegValue: t.Type<number, number, unknown>;
    TwentyRegValue: t.Type<number, number, unknown>;
    TwentyOneRegValue: t.Type<number, number, unknown>;
    TwentyTwoRegValue: t.Type<number, number, unknown>;
    TwentyThreeRegValue: t.Type<number, number, unknown>;
    TwentyFourRegValue: t.Type<number, number, unknown>;
    TwentyFiveRegValue: t.Type<number, number, unknown>;
    TwentySixRegValue: t.Type<number, number, unknown>;
    TwentySevenRegValue: t.Type<number, number, unknown>;
    TwentyEightRegValue: t.Type<number, number, unknown>;
    TwentyNineRegValue: t.Type<number, number, unknown>;
    ThirtyRegValue: t.Type<number, number, unknown>;
    ThirtyOneRegValue: t.Type<number, number, unknown>;
    ThirtyTwoRegValue: t.Type<number, number, unknown>;
    ThirtyThreeRegValue: t.Type<number, number, unknown>;
    ThirtyFourRegValue: t.Type<number, number, unknown>;
    ThirtyFiveRegValue: t.Type<number, number, unknown>;
    ThirtySixRegValue: t.Type<number, number, unknown>;
    ThirtySevenRegValue: t.Type<number, number, unknown>;
    ThirtyEightRegValue: t.Type<number, number, unknown>;
    ThirtyNineRegValue: t.Type<number, number, unknown>;
    FortyRegValue: t.Type<number, number, unknown>;
    FortyOneRegValue: t.Type<number, number, unknown>;
    FortyTwoRegValue: t.Type<number, number, unknown>;
    FortyThreeRegValue: t.Type<number, number, unknown>;
    FortyFourRegValue: t.Type<number, number, unknown>;
    FortyFiveRegValue: t.Type<number, number, unknown>;
    FortySixRegValue: t.Type<number, number, unknown>;
    FortySevenRegValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    DisplayMode: t.Type<number, number, unknown>;
    FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
    FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
    CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
    CrossCouplingToAdjustN: t.Type<number, number, unknown>;
    KneeVoltage: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2065RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
    RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshUniformity: t.Type<number, number, unknown>;
    TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingToAdjust: t.Type<number, number, unknown>;
    CrossCouplingToAdjust: t.Type<number, number, unknown>;
    SlowlyOpening: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    Group_Num: t.Type<number, number, unknown>;
    GclkNum: t.Type<number, number, unknown>;
    RegValue: t.ArrayC<t.Type<number, number, unknown>>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThreeRegValue: t.Type<number, number, unknown>;
    FourRegValue: t.Type<number, number, unknown>;
    FiveRegValue: t.Type<number, number, unknown>;
    SixRegValue: t.Type<number, number, unknown>;
    SevenRegValue: t.Type<number, number, unknown>;
    EightRegValue: t.Type<number, number, unknown>;
    NineRegValue: t.Type<number, number, unknown>;
    TenRegValue: t.Type<number, number, unknown>;
    ElevenRegValue: t.Type<number, number, unknown>;
    TwelveRegValue: t.Type<number, number, unknown>;
    ThirteenRegValue: t.Type<number, number, unknown>;
    ForteenRegValue: t.Type<number, number, unknown>;
    FifteenRegValue: t.Type<number, number, unknown>;
    SixteenRegValue: t.Type<number, number, unknown>;
    SeveteenRegValue: t.Type<number, number, unknown>;
    EighteenRegValue: t.Type<number, number, unknown>;
    NineteenRegValue: t.Type<number, number, unknown>;
    TwentyRegValue: t.Type<number, number, unknown>;
    TwentyOneRegValue: t.Type<number, number, unknown>;
    TwentyTwoRegValue: t.Type<number, number, unknown>;
    TwentyThreeRegValue: t.Type<number, number, unknown>;
    TwentyFourRegValue: t.Type<number, number, unknown>;
    TwentyFiveRegValue: t.Type<number, number, unknown>;
    TwentySixRegValue: t.Type<number, number, unknown>;
    TwentySevenRegValue: t.Type<number, number, unknown>;
    TwentyEightRegValue: t.Type<number, number, unknown>;
    TwentyNineRegValue: t.Type<number, number, unknown>;
    ThirtyRegValue: t.Type<number, number, unknown>;
    ThirtyOneRegValue: t.Type<number, number, unknown>;
    ThirtyTwoRegValue: t.Type<number, number, unknown>;
    ThirtyThreeRegValue: t.Type<number, number, unknown>;
    ThirtyFourRegValue: t.Type<number, number, unknown>;
    ThirtyFiveRegValue: t.Type<number, number, unknown>;
    ThirtySixRegValue: t.Type<number, number, unknown>;
    ThirtySevenRegValue: t.Type<number, number, unknown>;
    ThirtyEightRegValue: t.Type<number, number, unknown>;
    ThirtyNineRegValue: t.Type<number, number, unknown>;
    FortyRegValue: t.Type<number, number, unknown>;
    FortyOneRegValue: t.Type<number, number, unknown>;
    FortyTwoRegValue: t.Type<number, number, unknown>;
    FortyThreeRegValue: t.Type<number, number, unknown>;
    FortyFourRegValue: t.Type<number, number, unknown>;
    FortyFiveRegValue: t.Type<number, number, unknown>;
    FortySixRegValue: t.Type<number, number, unknown>;
    FortySevenRegValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    DisplayMode: t.Type<number, number, unknown>;
    FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
    FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
    CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
    CrossCouplingToAdjustN: t.Type<number, number, unknown>;
    KneeVoltage: t.Type<number, number, unknown>;
    DclkNumPerScanRegPart: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2055ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2055ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2055ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2055ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanType: t.Type<import("..").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshUniformity: t.Type<number, number, unknown>;
        TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingToAdjust: t.Type<number, number, unknown>;
        CrossCouplingToAdjust: t.Type<number, number, unknown>;
        SlowlyOpening: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        GclkFreqP: t.Type<number, number, unknown>;
        GclkFreqM: t.Type<number, number, unknown>;
        GclkFreqN: t.Type<number, number, unknown>;
        Group_Num: t.Type<number, number, unknown>;
        GclkNum: t.Type<number, number, unknown>;
        RegValue: t.ArrayC<t.Type<number, number, unknown>>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThreeRegValue: t.Type<number, number, unknown>;
        FourRegValue: t.Type<number, number, unknown>;
        FiveRegValue: t.Type<number, number, unknown>;
        SixRegValue: t.Type<number, number, unknown>;
        SevenRegValue: t.Type<number, number, unknown>;
        EightRegValue: t.Type<number, number, unknown>;
        NineRegValue: t.Type<number, number, unknown>;
        TenRegValue: t.Type<number, number, unknown>;
        ElevenRegValue: t.Type<number, number, unknown>;
        TwelveRegValue: t.Type<number, number, unknown>;
        ThirteenRegValue: t.Type<number, number, unknown>;
        ForteenRegValue: t.Type<number, number, unknown>;
        FifteenRegValue: t.Type<number, number, unknown>;
        SixteenRegValue: t.Type<number, number, unknown>;
        SeveteenRegValue: t.Type<number, number, unknown>;
        EighteenRegValue: t.Type<number, number, unknown>;
        NineteenRegValue: t.Type<number, number, unknown>;
        TwentyRegValue: t.Type<number, number, unknown>;
        TwentyOneRegValue: t.Type<number, number, unknown>;
        TwentyTwoRegValue: t.Type<number, number, unknown>;
        TwentyThreeRegValue: t.Type<number, number, unknown>;
        TwentyFourRegValue: t.Type<number, number, unknown>;
        TwentyFiveRegValue: t.Type<number, number, unknown>;
        TwentySixRegValue: t.Type<number, number, unknown>;
        TwentySevenRegValue: t.Type<number, number, unknown>;
        TwentyEightRegValue: t.Type<number, number, unknown>;
        TwentyNineRegValue: t.Type<number, number, unknown>;
        ThirtyRegValue: t.Type<number, number, unknown>;
        ThirtyOneRegValue: t.Type<number, number, unknown>;
        ThirtyTwoRegValue: t.Type<number, number, unknown>;
        ThirtyThreeRegValue: t.Type<number, number, unknown>;
        ThirtyFourRegValue: t.Type<number, number, unknown>;
        ThirtyFiveRegValue: t.Type<number, number, unknown>;
        ThirtySixRegValue: t.Type<number, number, unknown>;
        ThirtySevenRegValue: t.Type<number, number, unknown>;
        ThirtyEightRegValue: t.Type<number, number, unknown>;
        ThirtyNineRegValue: t.Type<number, number, unknown>;
        FortyRegValue: t.Type<number, number, unknown>;
        FortyOneRegValue: t.Type<number, number, unknown>;
        FortyTwoRegValue: t.Type<number, number, unknown>;
        FortyThreeRegValue: t.Type<number, number, unknown>;
        FortyFourRegValue: t.Type<number, number, unknown>;
        FortyFiveRegValue: t.Type<number, number, unknown>;
        FortySixRegValue: t.Type<number, number, unknown>;
        FortySevenRegValue: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        DisplayMode: t.Type<number, number, unknown>;
        FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
        FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
        CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
        CrossCouplingToAdjustN: t.Type<number, number, unknown>;
        KneeVoltage: t.Type<number, number, unknown>;
        DclkNumPerScanRegPart: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2055ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2055RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterList: t.ArrayC<t.Type<bigint, bigint, unknown>>;
    RRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    GRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    BRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    RShadowEliminationLevel: t.Type<number, number, unknown>;
    GShadowEliminationLevel: t.Type<number, number, unknown>;
    BShadowEliminationLevel: t.Type<number, number, unknown>;
    RShadowEliminationTime: t.Type<number, number, unknown>;
    GShadowEliminationTime: t.Type<number, number, unknown>;
    BShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshuniformity: t.Type<number, number, unknown>;
    RLowGrayOffset: t.Type<number, number, unknown>;
    GLowGrayOffset: t.Type<number, number, unknown>;
    BLowGrayOffset: t.Type<number, number, unknown>;
    RFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    GFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    BFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsentionFineTuning: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsentionFineTuning: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsentionFineTuning: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsentionEn: t.Type<boolean, boolean, unknown>;
    GLowGrayFirstLineDarkCompsentionEn: t.Type<boolean, boolean, unknown>;
    BLowGrayFirstLineDarkCompsentionEn: t.Type<boolean, boolean, unknown>;
    CouplingAdjustEnhacneModeEn: t.Type<boolean, boolean, unknown>;
    CouplingOptimizationOne: t.Type<number, number, unknown>;
    RCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    GCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    BCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationTwo: t.Type<number, number, unknown>;
    GCouplingOptimizationTwo: t.Type<number, number, unknown>;
    BCouplingOptimizationTwo: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RKneePointVoltage: t.Type<number, number, unknown>;
    GKneePointVoltage: t.Type<number, number, unknown>;
    BKneePointVoltage: t.Type<number, number, unknown>;
    RCurrentGain: t.Type<number, number, unknown>;
    GCurrentGain: t.Type<number, number, unknown>;
    BCurrentGain: t.Type<number, number, unknown>;
    RCurrentAmplitude: t.Type<number, number, unknown>;
    GCurrentAmplitude: t.Type<number, number, unknown>;
    BCurrentAmplitude: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    GclkNumPerScan: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    RefNumPerVs: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2076RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    TurningPointVoltage: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvanceModel: t.Type<boolean, boolean, unknown>;
    IsEliminateShadow: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2100ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    MaxUnitChipPerScan: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2112RGBVExtendPropey">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ShortDetection: t.Type<number, number, unknown>;
    ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
    SavingPowerMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    InflectionPiont: t.Type<number, number, unknown>;
    ShadowEliminationElectric: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShortDetection: t.Type<number, number, unknown>;
        ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
        SavingPowerMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
        InflectionPiont: t.Type<number, number, unknown>;
        ShadowEliminationElectric: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShortDetection: t.Type<number, number, unknown>;
        ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
        SavingPowerMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
        InflectionPiont: t.Type<number, number, unknown>;
        ShadowEliminationElectric: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShortDetection: t.Type<number, number, unknown>;
        ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
        SavingPowerMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
        InflectionPiont: t.Type<number, number, unknown>;
        ShadowEliminationElectric: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShortDetection: t.Type<number, number, unknown>;
        ErrorSurvey_OnTime: t.Type<boolean, boolean, unknown>;
        SavingPowerMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
        InflectionPiont: t.Type<number, number, unknown>;
        ShadowEliminationElectric: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2126ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    PointDetectType: t.Type<number, number, unknown>;
    SetSpecialBit: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2126RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PartNumRef: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsRemoveBad: t.Type<boolean, boolean, unknown>;
    IsRemoveBadEnhancedMode: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2159RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterList: t.ArrayC<t.Type<number, number, unknown>>;
    RRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    GRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    BRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    RShadowEliminationLevel: t.Type<number, number, unknown>;
    GShadowEliminationLevel: t.Type<number, number, unknown>;
    BShadowEliminationLevel: t.Type<number, number, unknown>;
    RShadowEliminationTime: t.Type<number, number, unknown>;
    GShadowEliminationTime: t.Type<number, number, unknown>;
    BShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshuniformity: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    ShadowEliminationEhancedEn: t.Type<boolean, boolean, unknown>;
    RLowGrayOffset: t.Type<number, number, unknown>;
    GLowGrayOffset: t.Type<number, number, unknown>;
    BLowGrayOffset: t.Type<number, number, unknown>;
    FirstLineDarkEn: t.Type<boolean, boolean, unknown>;
    RLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    CouplingAdjustEnhacneModeEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationOne: t.Type<number, number, unknown>;
    GCouplingOptimizationOne: t.Type<number, number, unknown>;
    BCouplingOptimizationOne: t.Type<number, number, unknown>;
    RCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    GCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    BCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationTwo: t.Type<number, number, unknown>;
    GCouplingOptimizationTwo: t.Type<number, number, unknown>;
    BCouplingOptimizationTwo: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RKneePointVoltage: t.Type<number, number, unknown>;
    GKneePointVoltage: t.Type<number, number, unknown>;
    BKneePointVoltage: t.Type<number, number, unknown>;
    LineShadowEliminationLevel: t.Type<number, number, unknown>;
    LineShadowEliminationMode: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    BlackScreenSavingEn: t.Type<boolean, boolean, unknown>;
    RCurrentGain: t.Type<number, number, unknown>;
    GCurrentGain: t.Type<number, number, unknown>;
    BCurrentGain: t.Type<number, number, unknown>;
    RCurrentAmplitude: t.Type<number, number, unknown>;
    GCurrentAmplitude: t.Type<number, number, unknown>;
    BCurrentAmplitude: t.Type<number, number, unknown>;
    RefreshGroupNum: t.Type<number, number, unknown>;
    RowGrayLevel: t.Type<number, number, unknown>;
    ScanCountOfChipOne: t.Type<number, number, unknown>;
    ScanCountOfChipTwo: t.Type<number, number, unknown>;
    ScanCountOfChipThree: t.Type<number, number, unknown>;
    ScanCountOfChipFour: t.Type<number, number, unknown>;
    Line_Len: t.Type<number, number, unknown>;
    Row_Len: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2210RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    CureentRedGain: t.Type<number, number, unknown>;
    CureentGreenGain: t.Type<number, number, unknown>;
    CureentBlueGain: t.Type<number, number, unknown>;
    RedShortCirult: t.Type<number, number, unknown>;
    GreenShortCirult: t.Type<number, number, unknown>;
    BlueShortCirult: t.Type<number, number, unknown>;
    PowerSavingMode: t.Type<number, number, unknown>;
    PWMAlgorithm: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipIT1505ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5034BExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5034BExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5034BExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5034BExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5034BExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    PointDetectType: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5034BRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ThermalShutdown: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    SwitchSpeed: t.Type<boolean, boolean, unknown>;
    CurrentSelection: t.Type<number, number, unknown>;
    PowerMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5038ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ThermalShutdown: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SwitchSpeed: t.Type<boolean, boolean, unknown>;
        CurrentSelection: t.Type<number, number, unknown>;
        PowerMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5038ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ThermalShutdown: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SwitchSpeed: t.Type<boolean, boolean, unknown>;
        CurrentSelection: t.Type<number, number, unknown>;
        PowerMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5038ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ThermalShutdown: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SwitchSpeed: t.Type<boolean, boolean, unknown>;
        CurrentSelection: t.Type<number, number, unknown>;
        PowerMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5038ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ThermalShutdown: t.Type<boolean, boolean, unknown>;
    }>, t.PartialC<{
        SwitchSpeed: t.Type<boolean, boolean, unknown>;
        CurrentSelection: t.Type<number, number, unknown>;
        PowerMode: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5038ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5038RGBExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    GCLKShift: t.Type<number, number, unknown>;
    SelectChargeMode: t.Type<number, number, unknown>;
    ColorShiftCompensation: t.Type<number, number, unknown>;
    GCLKRising: t.Type<boolean, boolean, unknown>;
    EnableCharge: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5043ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ColorCompensate: t.Type<number, number, unknown>;
}>, t.PartialC<{
    SetBlanking: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5166ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ColorCompensate: t.Type<number, number, unknown>;
    LowAshImproveEnable: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    SetBlanking: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI524ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Reg_First: t.Type<number, number, unknown>;
    Reg_Second: t.Type<number, number, unknown>;
    Reg_Third: t.Type<number, number, unknown>;
    Reg_Fourth: t.Type<number, number, unknown>;
    Reg_Fifth: t.Type<number, number, unknown>;
    Reg_Sixth: t.Type<number, number, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5251RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensation: t.Type<number, number, unknown>;
    GradientCompensation1: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5252BExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5252BExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5252BExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5252BExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5252BExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5252BRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensation: t.Type<number, number, unknown>;
    GradientCompensation1: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5253NewBExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5253NewBExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5253NewBExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5253NewBExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5253NewBExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5253NewBRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensation: t.Type<number, number, unknown>;
    GradientCompensation1: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5254ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5254ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5254ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5254ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5254ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5254RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegValueConfigFirst: t.Type<number, number, unknown>;
    LowCompsention: t.Type<boolean, boolean, unknown>;
    RefreshUp: t.Type<boolean, boolean, unknown>;
    GhostStall: t.Type<number, number, unknown>;
    GhostModle: t.Type<number, number, unknown>;
}>, t.PartialC<{
    SettingNoise: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
    LowAshUniformityImproved1: t.Type<number, number, unknown>;
    LowAshUniformityImproved2: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5264ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5264ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5264ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5264ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5264ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsGrayEnhncedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5264RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
    LowAshUniformityImproved1: t.Type<number, number, unknown>;
    LowAshUniformityImproved2: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsGrayEnhncedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5268RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    LowAshUniformityImproved1: t.Type<number, number, unknown>;
    LowAshUniformityImproved2: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    HighAshouplingLevel: t.Type<number, number, unknown>;
    HighAshouplingFront: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    P: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5269RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    DarkBlockCompensationOne: t.Type<number, number, unknown>;
    DarkBlockCompensationTwo: t.Type<number, number, unknown>;
    DarkBlockCompensationThree: t.Type<number, number, unknown>;
    FirstSweepElimination: t.Type<number, number, unknown>;
    UnderEliminateGhost: t.Type<number, number, unknown>;
    GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
    LowAshColorCastCompensation: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
    AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
    GradientCompensation: t.Type<number, number, unknown>;
    GradientCompensation1: t.Type<number, number, unknown>;
    DislodgeBadPointsGrade: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5754ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5754ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5754ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5754ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensation1: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5754ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5754RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ScanData: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5759CustomExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    GRGBExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Global1_Register1: t.Type<number, number, unknown>;
        Global1_Register2: t.Type<number, number, unknown>;
        Global1_Register3: t.Type<number, number, unknown>;
        Global2_Register1: t.Type<number, number, unknown>;
        Global2_Register2: t.Type<number, number, unknown>;
        Global2_Register3: t.Type<number, number, unknown>;
        Global3_Register1: t.Type<number, number, unknown>;
        Global3_Register2: t.Type<number, number, unknown>;
        Global3_Register3: t.Type<number, number, unknown>;
        R1_Register1: t.Type<number, number, unknown>;
        R1_Register2: t.Type<number, number, unknown>;
        R1_Register3: t.Type<number, number, unknown>;
        R2_Register1: t.Type<number, number, unknown>;
        R2_Register2: t.Type<number, number, unknown>;
        R2_Register3: t.Type<number, number, unknown>;
        G1_Register1: t.Type<number, number, unknown>;
        G1_Register2: t.Type<number, number, unknown>;
        G1_Register3: t.Type<number, number, unknown>;
        G2_Register1: t.Type<number, number, unknown>;
        G2_Register2: t.Type<number, number, unknown>;
        G2_Register3: t.Type<number, number, unknown>;
        B1_Register1: t.Type<number, number, unknown>;
        B1_Register2: t.Type<number, number, unknown>;
        B1_Register3: t.Type<number, number, unknown>;
        B2_Register1: t.Type<number, number, unknown>;
        B2_Register2: t.Type<number, number, unknown>;
        B2_Register3: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        RLowGrayCompsentionOne: t.Type<number, number, unknown>;
        GLowGrayCompsentionOne: t.Type<number, number, unknown>;
        BLowGrayCompsentionOne: t.Type<number, number, unknown>;
        RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
        RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
        RedGain: t.Type<number, number, unknown>;
        GreenGain: t.Type<number, number, unknown>;
        BlueGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759GRGBExtendProperty">;
    }>]>;
    CustomExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ScanData: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5759CustomExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5759ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RLowGrayCompsentionOne: t.Type<number, number, unknown>;
    GLowGrayCompsentionOne: t.Type<number, number, unknown>;
    BLowGrayCompsentionOne: t.Type<number, number, unknown>;
    RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5759GRGBExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    ChipMBI5850ExtendProperty: t.IntersectionC<[t.TypeC<{
        REG_NUMBER: t.Type<number, number, unknown>;
        MBI5850REG: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        GrayScale: t.Type<number, number, unknown>;
        EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
        BlankUnitNumPerScan: t.Type<number, number, unknown>;
        ExcessiveTime: t.Type<number, number, unknown>;
        RowChangePoint: t.Type<number, number, unknown>;
        M: t.Type<number, number, unknown>;
        N: t.Type<number, number, unknown>;
        DVI: t.Type<number, number, unknown>;
        ShowsTheGhostGear_R: t.Type<number, number, unknown>;
        ShowsTheGhostGear_G: t.Type<number, number, unknown>;
        ShowsTheGhostGear_B: t.Type<number, number, unknown>;
        ShowsTheGeargradualGhost_R: t.Type<number, number, unknown>;
        ShowsTheGeargradualGhost_G: t.Type<number, number, unknown>;
        ShowsTheGeargradualGhost_B: t.Type<number, number, unknown>;
        HiddenGhostGear_1_R: t.Type<number, number, unknown>;
        HiddenGhostGear_1_G: t.Type<number, number, unknown>;
        HiddenGhostGear_1_B: t.Type<number, number, unknown>;
        HiddenGhostGear_2_R: t.Type<number, number, unknown>;
        HiddenGhostGear_2_G: t.Type<number, number, unknown>;
        HiddenGhostGear_2_B: t.Type<number, number, unknown>;
        HiddenGhostGear_3_R: t.Type<number, number, unknown>;
        HiddenGhostGear_3_G: t.Type<number, number, unknown>;
        HiddenGhostGear_3_B: t.Type<number, number, unknown>;
        LowAshCompensation_R: t.Type<number, number, unknown>;
        LowAshCompensation_G: t.Type<number, number, unknown>;
        LowAshCompensation_B: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        DislodgeBadPointsGrade_R: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade_G: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade_B: t.Type<number, number, unknown>;
        Gain_R: t.Type<number, number, unknown>;
        Gain_G: t.Type<number, number, unknown>;
        Gain_B: t.Type<number, number, unknown>;
    }>]>;
    ChipMBI5850CustomExtendProperty: t.IntersectionC<[t.TypeC<{
        CVLED_CHANNEL_NUMBER: t.Type<number, number, unknown>;
        MBI5759ICVLED: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ICVLEDNumber: t.Type<number, number, unknown>;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5850RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstReg: t.Type<number, number, unknown>;
    SecondReg: t.Type<number, number, unknown>;
    ThirdReg: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI6033ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI6033ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI6033ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI6033ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ICNumber: t.Type<number, number, unknown>;
    GclkUnitCycle: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI6033RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    DriverSpeed: t.Type<import("..").DriverCurrentSpeedTypeEnum, "Slow" | "Fast", unknown>;
    IsCurrentBreakUp: t.Type<boolean, boolean, unknown>;
    IsInternalOscillator: t.Type<boolean, boolean, unknown>;
    IsDriverLED: t.Type<boolean, boolean, unknown>;
    IsAutoRefreshPicture: t.Type<boolean, boolean, unknown>;
    IsPictrueRepeat: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9221ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    EnResetAPDMOrPWM: t.Type<boolean, boolean, unknown>;
    EnManualSyc: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    ModeSelecte: t.Type<boolean, boolean, unknown>;
    PowerSavingMode: t.Type<boolean, boolean, unknown>;
    GclkMonitor: t.Type<boolean, boolean, unknown>;
    GclkPrivider: t.Type<boolean, boolean, unknown>;
    EnAutoCloseChannel: t.Type<boolean, boolean, unknown>;
    LedThreadType: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9263ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RIsClearGhost: t.Type<boolean, boolean, unknown>;
    GIsClearGhost: t.Type<boolean, boolean, unknown>;
    BIsClearGhost: t.Type<boolean, boolean, unknown>;
    VRIsClearGhost: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RFirstScancompensation: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    BFirstScancompensation: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    RSmallAdjust: t.Type<number, number, unknown>;
    GSmallAdjust: t.Type<number, number, unknown>;
    BSmallAdjust: t.Type<number, number, unknown>;
    VRSmallAdjust: t.Type<number, number, unknown>;
    RCurrentCompensation: t.Type<boolean, boolean, unknown>;
    GCurrentCompensation: t.Type<boolean, boolean, unknown>;
    BCurrentCompensation: t.Type<boolean, boolean, unknown>;
    VRCurrentCompensation: t.Type<boolean, boolean, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9366ExtendProperty">;
}>]>, t.PartialC<{}>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CompensationMode: t.Type<boolean, boolean, unknown>;
    LowAshImprovement: t.Type<number, number, unknown>;
    FirstSweepCompensation: t.Type<number, number, unknown>;
    EliminateGhostingSet: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9862ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationMode: t.Type<boolean, boolean, unknown>;
        LowAshImprovement: t.Type<number, number, unknown>;
        FirstSweepCompensation: t.Type<number, number, unknown>;
        EliminateGhostingSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9862ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationMode: t.Type<boolean, boolean, unknown>;
        LowAshImprovement: t.Type<number, number, unknown>;
        FirstSweepCompensation: t.Type<number, number, unknown>;
        EliminateGhostingSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9862ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationMode: t.Type<boolean, boolean, unknown>;
        LowAshImprovement: t.Type<number, number, unknown>;
        FirstSweepCompensation: t.Type<number, number, unknown>;
        EliminateGhostingSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9862ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationMode: t.Type<boolean, boolean, unknown>;
        LowAshImprovement: t.Type<number, number, unknown>;
        FirstSweepCompensation: t.Type<number, number, unknown>;
        EliminateGhostingSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMY9862ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9862RGBExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RActionSpeed: t.Type<number, number, unknown>;
    GActionSpeed: t.Type<number, number, unknown>;
    BActionSpeed: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9866ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipNT27002SExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipNT27002SExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipNT27002SExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipNT27002SExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipNT27002SExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanType: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    MyRedGain: t.Type<number, number, unknown>;
    RedRangeGain: t.Type<number, number, unknown>;
    MyGreenGain: t.Type<number, number, unknown>;
    GreenRangeGain: t.Type<number, number, unknown>;
    MyBlueGain: t.Type<number, number, unknown>;
    BlueRangeGain: t.Type<number, number, unknown>;
    GraySteps: t.Type<number, number, unknown>;
    GetTrueGraySteps: t.Type<number, number, unknown>;
    NO_GCLK: t.Type<number, number, unknown>;
    F_gclk: t.Type<number, number, unknown>;
    FrameStartTime: t.Type<number, number, unknown>;
    ScanBetweenTime: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    PrechargeTime: t.Type<number, number, unknown>;
    ScanShadowEliminationTime: t.Type<number, number, unknown>;
    ScanOpeningDelayTime: t.Type<number, number, unknown>;
    ScanCloseingDelayTime: t.Type<number, number, unknown>;
    ScanShadowEliminationVoltage: t.Type<number, number, unknown>;
    ShadowEliminationVoltageR: t.Type<number, number, unknown>;
    ShadowEliminationVoltageG: t.Type<number, number, unknown>;
    ShadowEliminationVoltageB: t.Type<number, number, unknown>;
    PulseWidthCompensationR: t.Type<number, number, unknown>;
    PulseWidthCompensationG: t.Type<number, number, unknown>;
    PulseWidthCompensationB: t.Type<number, number, unknown>;
    PrechargeVoltagR: t.Type<number, number, unknown>;
    PrechargeVoltagG: t.Type<number, number, unknown>;
    PrechargeVoltagB: t.Type<number, number, unknown>;
    ColorTemperature1R: t.Type<number, number, unknown>;
    ColorTemperature1G: t.Type<number, number, unknown>;
    ColorTemperature1B: t.Type<number, number, unknown>;
    ColorTemperature2R: t.Type<number, number, unknown>;
    ColorTemperature2G: t.Type<number, number, unknown>;
    ColorTemperature2B: t.Type<number, number, unknown>;
    ColorTemperature3R: t.Type<number, number, unknown>;
    ColorTemperature3G: t.Type<number, number, unknown>;
    ColorTemperature3B: t.Type<number, number, unknown>;
    AbnormalStatePattern: t.Type<number, number, unknown>;
    OpenVoltageR: t.Type<number, number, unknown>;
    OpenVoltageG: t.Type<number, number, unknown>;
    OpenVoltageB: t.Type<number, number, unknown>;
    DICOpenDateReplication: t.Type<boolean, boolean, unknown>;
    DICOpenDark: t.Type<boolean, boolean, unknown>;
    SavingMode: t.Type<boolean, boolean, unknown>;
    TemperatureSelevtorEn: t.Type<boolean, boolean, unknown>;
    TemperatureSelevtorLevel: t.Type<number, number, unknown>;
    ChannelCloseMode: t.Type<number, number, unknown>;
    FileNumber: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipNT27002SRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RLowAshRange: t.Type<number, number, unknown>;
    GLowAshRange: t.Type<number, number, unknown>;
    BLowAshRange: t.Type<number, number, unknown>;
    VRLowAshRange: t.Type<number, number, unknown>;
    RPrechargeFun: t.Type<boolean, boolean, unknown>;
    GPrechargeFun: t.Type<boolean, boolean, unknown>;
    BPrechargeFun: t.Type<boolean, boolean, unknown>;
    VRPrechargeFun: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5924ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    EliminationLevel: t.Type<number, number, unknown>;
    EliminateEnable: t.Type<boolean, boolean, unknown>;
    OpenCircuitLevel: t.Type<number, number, unknown>;
    ShortCircuitLevel: t.Type<number, number, unknown>;
    SlowOpen: t.Type<boolean, boolean, unknown>;
    PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("..").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("..").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("..").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5938SSRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstReg: t.Type<number, number, unknown>;
    SecondReg: t.Type<number, number, unknown>;
    ThirdReg: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    CouplingEliminationLevel: t.Type<number, number, unknown>;
    CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
    FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
    LowCompsentionOne: t.Type<number, number, unknown>;
    LowCompsentionTwo: t.Type<number, number, unknown>;
    GhostEliminationLevel: t.Type<number, number, unknown>;
    ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
    SlowOpen: t.Type<boolean, boolean, unknown>;
    OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
    PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    BitMode: t.Type<boolean, boolean, unknown>;
    OpenCircuitDetectionEn: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5965RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    BitLevel: t.Type<number, number, unknown>;
    OpenGain: t.Type<boolean, boolean, unknown>;
    RZ_T1L: t.Type<number, number, unknown>;
    RZ_T0L: t.Type<number, number, unknown>;
    RZ_T: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRZRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    EnLEDOpenShortDet: t.Type<number, number, unknown>;
    LongWaitB: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedDtVoltage: t.Type<boolean, boolean, unknown>;
    GreenDtVoltage: t.Type<boolean, boolean, unknown>;
    BlueDtVoltage: t.Type<boolean, boolean, unknown>;
    AnodeSideFastCharge: t.Type<number, number, unknown>;
    DeadTimeGCLKVsync: t.Type<number, number, unknown>;
    SLowFrame: t.Type<boolean, boolean, unknown>;
    OutPutCurRange: t.Type<boolean, boolean, unknown>;
    F50_25Hz: t.Type<boolean, boolean, unknown>;
    Dtbig: t.Type<boolean, boolean, unknown>;
    GclkSkewValue: t.Type<number, number, unknown>;
    EnLEDShortProtect: t.Type<boolean, boolean, unknown>;
    GclkE1A0A2Source: t.Type<boolean, boolean, unknown>;
    EnOverTemprDect: t.Type<boolean, boolean, unknown>;
    GrayScaleMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8060ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegValueConfigFirst: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
    RegValueConfigThird: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    ScanType: t.Type<number, number, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8080RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8081RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedRegValue: t.Type<number, number, unknown>;
    GreenRegValue: t.Type<number, number, unknown>;
    BlueRegValue: t.Type<number, number, unknown>;
    VRedRegValue: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16017DSRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    REliminateAfterLow: t.Type<number, number, unknown>;
    GEliminateAfterLow: t.Type<number, number, unknown>;
    BEliminateAfterLow: t.Type<number, number, unknown>;
    GDimCompensation: t.Type<number, number, unknown>;
    BDimCompensation: t.Type<number, number, unknown>;
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RDimCompensation: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RVanishingStrength: t.Type<number, number, unknown>;
    GVanishingStrength: t.Type<number, number, unknown>;
    BVanishingStrength: t.Type<number, number, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16027ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    BlankingEnable: t.Type<boolean, boolean, unknown>;
    BlankingVoltage: t.Type<number, number, unknown>;
    LowImproveValue: t.Type<number, number, unknown>;
    LowImproveEnable: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16136ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        BlankingEnable: t.Type<boolean, boolean, unknown>;
        BlankingVoltage: t.Type<number, number, unknown>;
        LowImproveValue: t.Type<number, number, unknown>;
        LowImproveEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16136ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        BlankingEnable: t.Type<boolean, boolean, unknown>;
        BlankingVoltage: t.Type<number, number, unknown>;
        LowImproveValue: t.Type<number, number, unknown>;
        LowImproveEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16136ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        BlankingEnable: t.Type<boolean, boolean, unknown>;
        BlankingVoltage: t.Type<number, number, unknown>;
        LowImproveValue: t.Type<number, number, unknown>;
        LowImproveEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16136ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        BlankingEnable: t.Type<boolean, boolean, unknown>;
        BlankingVoltage: t.Type<number, number, unknown>;
        LowImproveValue: t.Type<number, number, unknown>;
        LowImproveEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16136ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16136RGBExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    OpenDetection: t.Type<boolean, boolean, unknown>;
    REnableOpenInspection: t.Type<boolean, boolean, unknown>;
    GEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    BEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RDimInterval: t.Type<number, number, unknown>;
    GDimInterval: t.Type<number, number, unknown>;
    BDimInterval: t.Type<number, number, unknown>;
    RDimCompensation: t.Type<number, number, unknown>;
    GDimCompensation: t.Type<number, number, unknown>;
    BDimCompensation: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16158ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REliminateAfterLow1: t.Type<number, number, unknown>;
    GEliminateAfterLow1: t.Type<number, number, unknown>;
    BEliminateAfterLow1: t.Type<number, number, unknown>;
    RDimCompensation: t.Type<number, number, unknown>;
    GDimCompensation: t.Type<number, number, unknown>;
    BDimCompensation: t.Type<number, number, unknown>;
    REliminateAfterLow2: t.Type<number, number, unknown>;
    GEliminateAfterLow2: t.Type<number, number, unknown>;
    BEliminateAfterLow2: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16207SExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RUnderEliminateGhostOne: t.Type<number, number, unknown>;
    GUnderEliminateGhostOne: t.Type<number, number, unknown>;
    BUnderEliminateGhostOne: t.Type<number, number, unknown>;
    RUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    BUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    ROffsetCompsation: t.Type<number, number, unknown>;
    GOffsetCompsation: t.Type<number, number, unknown>;
    BOffsetCompsation: t.Type<number, number, unknown>;
    RFirstCompsation: t.Type<number, number, unknown>;
    GFirstCompsation: t.Type<number, number, unknown>;
    BFirstCompsation: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16227ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RUnderEliminateGhostOne: t.Type<number, number, unknown>;
    GUnderEliminateGhostOne: t.Type<number, number, unknown>;
    BUnderEliminateGhostOne: t.Type<number, number, unknown>;
    RUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    BUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GOffsetCompsation: t.Type<number, number, unknown>;
    BOffsetCompsation: t.Type<number, number, unknown>;
    GFirstCompsation: t.Type<number, number, unknown>;
    BFirstCompsation: t.Type<number, number, unknown>;
    SwapErrorPoint: t.Type<number, number, unknown>;
    RSwapErrorPoint: t.Type<number, number, unknown>;
    GSwapErrorPoint: t.Type<number, number, unknown>;
    BSwapErrorPoint: t.Type<number, number, unknown>;
}>, t.PartialC<{
    ROffsetCompsation: t.Type<number, number, unknown>;
    RFirstCompsation: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16237ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsShadowsEnable: t.Type<boolean, boolean, unknown>;
    MultiplierGrade: t.Type<import("..").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
    ScanTypeUshort: t.Type<number, number, unknown>;
    LowAshCompensationTwo: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    RegValueConfigFirst: t.Type<number, number, unknown>;
    LowAshCompensationOne: t.Type<number, number, unknown>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestVoltageGrade: t.Type<import("..").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
    BlankingMode: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
    IsEnergySaving: t.Type<boolean, boolean, unknown>;
    ShadowVoltageOne: t.Type<number, number, unknown>;
    ShadowVoltageTwo: t.Type<number, number, unknown>;
    PWMModel: t.Type<import("..").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
    RegValueConfigThird: t.Type<number, number, unknown>;
    RegValueConfigForth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshGrade: t.Type<import("..").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("..").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("..").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("..").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("..").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("..").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("..").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("..").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("..").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("..").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("..").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("..").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("..").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("..").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("..").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("..").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("..").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16259RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsShadowsEnable: t.Type<boolean, boolean, unknown>;
    RegValueConfigFirst: t.Type<number, number, unknown>;
    BlankingMode: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
    RegValueConfigThird: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshCompensationTwo: t.Type<number, number, unknown>;
    LowAshCompensationOne: t.Type<number, number, unknown>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestVoltageGrade: t.Type<number, number, unknown>;
    IsEnergySaving: t.Type<boolean, boolean, unknown>;
    ShadowVoltageOne: t.Type<number, number, unknown>;
    ShadowVoltageTwo: t.Type<number, number, unknown>;
    RegValueConfigForth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    PWMModle: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16359RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel_1: t.Type<number, number, unknown>;
    ShadowEliminationTime_1: t.Type<number, number, unknown>;
    ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel_2: t.Type<number, number, unknown>;
    ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel_3: t.Type<number, number, unknown>;
    FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
    FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    LowGrayCompsention1: t.Type<number, number, unknown>;
    LowGrayCompsention2: t.Type<number, number, unknown>;
    LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
    CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
    CouplingOptimization_1: t.Type<number, number, unknown>;
    CouplingOptimization_2: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    GrayScaleUniformity: t.Type<number, number, unknown>;
    CrossEliminationLevel: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16369ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16369ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16369ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16369ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16369ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    MutiRate: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16369RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
    FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
    LowGrayCompsention: t.Type<number, number, unknown>;
    CrossEliminationLevel: t.Type<number, number, unknown>;
    GrayScaleUniformity: t.Type<number, number, unknown>;
    CouplingOptimization: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    EnergySavingEnable: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    MutiRate: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16380RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel_1: t.Type<number, number, unknown>;
    ShadowEliminationTime_1: t.Type<number, number, unknown>;
    ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel_2: t.Type<number, number, unknown>;
    ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel_3: t.Type<number, number, unknown>;
    FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
    FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    LowGrayCompsention1: t.Type<number, number, unknown>;
    LowGrayCompsention2: t.Type<number, number, unknown>;
    LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
    CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
    CouplingOptimization_1: t.Type<number, number, unknown>;
    CouplingOptimization_2: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    GrayScaleUniformity: t.Type<number, number, unknown>;
    CrossEliminationLevel: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    FrequencyDoublingEn: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16388RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    EnergyPattern: t.Type<number, number, unknown>;
    LowGrayHomogeneity: t.Type<number, number, unknown>;
    CouplingOptimize2: t.Type<number, number, unknown>;
    BlankingTime1: t.Type<number, number, unknown>;
    FirstLineCompensation: t.Type<number, number, unknown>;
    LowGrayOptimize2: t.Type<number, number, unknown>;
    OpenTest: t.Type<boolean, boolean, unknown>;
    EliminateOpenCrossGrade: t.Type<number, number, unknown>;
    CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
    LowGrayOptimize1: t.Type<number, number, unknown>;
    LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
    CouplingGrade: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    BlankingGrade1: t.Type<number, number, unknown>;
    FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
    BlankingOpen2: t.Type<boolean, boolean, unknown>;
    BlankingGrade2: t.Type<number, number, unknown>;
    BlankingOpen3: t.Type<boolean, boolean, unknown>;
    BlankingGrade3: t.Type<number, number, unknown>;
    CouplingOptimize1: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        EnergyPattern: t.Type<number, number, unknown>;
        LowGrayHomogeneity: t.Type<number, number, unknown>;
        CouplingOptimize2: t.Type<number, number, unknown>;
        BlankingTime1: t.Type<number, number, unknown>;
        FirstLineCompensation: t.Type<number, number, unknown>;
        LowGrayOptimize2: t.Type<number, number, unknown>;
        OpenTest: t.Type<boolean, boolean, unknown>;
        EliminateOpenCrossGrade: t.Type<number, number, unknown>;
        CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
        LowGrayOptimize1: t.Type<number, number, unknown>;
        LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
        CouplingGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        BlankingGrade1: t.Type<number, number, unknown>;
        FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
        BlankingOpen2: t.Type<boolean, boolean, unknown>;
        BlankingGrade2: t.Type<number, number, unknown>;
        BlankingOpen3: t.Type<boolean, boolean, unknown>;
        BlankingGrade3: t.Type<number, number, unknown>;
        CouplingOptimize1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        EnergyPattern: t.Type<number, number, unknown>;
        LowGrayHomogeneity: t.Type<number, number, unknown>;
        CouplingOptimize2: t.Type<number, number, unknown>;
        BlankingTime1: t.Type<number, number, unknown>;
        FirstLineCompensation: t.Type<number, number, unknown>;
        LowGrayOptimize2: t.Type<number, number, unknown>;
        OpenTest: t.Type<boolean, boolean, unknown>;
        EliminateOpenCrossGrade: t.Type<number, number, unknown>;
        CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
        LowGrayOptimize1: t.Type<number, number, unknown>;
        LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
        CouplingGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        BlankingGrade1: t.Type<number, number, unknown>;
        FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
        BlankingOpen2: t.Type<boolean, boolean, unknown>;
        BlankingGrade2: t.Type<number, number, unknown>;
        BlankingOpen3: t.Type<boolean, boolean, unknown>;
        BlankingGrade3: t.Type<number, number, unknown>;
        CouplingOptimize1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        EnergyPattern: t.Type<number, number, unknown>;
        LowGrayHomogeneity: t.Type<number, number, unknown>;
        CouplingOptimize2: t.Type<number, number, unknown>;
        BlankingTime1: t.Type<number, number, unknown>;
        FirstLineCompensation: t.Type<number, number, unknown>;
        LowGrayOptimize2: t.Type<number, number, unknown>;
        OpenTest: t.Type<boolean, boolean, unknown>;
        EliminateOpenCrossGrade: t.Type<number, number, unknown>;
        CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
        LowGrayOptimize1: t.Type<number, number, unknown>;
        LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
        CouplingGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        BlankingGrade1: t.Type<number, number, unknown>;
        FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
        BlankingOpen2: t.Type<boolean, boolean, unknown>;
        BlankingGrade2: t.Type<number, number, unknown>;
        BlankingOpen3: t.Type<boolean, boolean, unknown>;
        BlankingGrade3: t.Type<number, number, unknown>;
        CouplingOptimize1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        EnergyPattern: t.Type<number, number, unknown>;
        LowGrayHomogeneity: t.Type<number, number, unknown>;
        CouplingOptimize2: t.Type<number, number, unknown>;
        BlankingTime1: t.Type<number, number, unknown>;
        FirstLineCompensation: t.Type<number, number, unknown>;
        LowGrayOptimize2: t.Type<number, number, unknown>;
        OpenTest: t.Type<boolean, boolean, unknown>;
        EliminateOpenCrossGrade: t.Type<number, number, unknown>;
        CouplingEnhancePattern: t.Type<boolean, boolean, unknown>;
        LowGrayOptimize1: t.Type<number, number, unknown>;
        LowGrayAcrossStripeOptimize: t.Type<number, number, unknown>;
        CouplingGrade: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        BlankingGrade1: t.Type<number, number, unknown>;
        FirstLineDarkCompensationGrade: t.Type<number, number, unknown>;
        BlankingOpen2: t.Type<boolean, boolean, unknown>;
        BlankingGrade2: t.Type<number, number, unknown>;
        BlankingOpen3: t.Type<boolean, boolean, unknown>;
        BlankingGrade3: t.Type<number, number, unknown>;
        CouplingOptimize1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16389ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    TestGain: t.Type<number, number, unknown>;
    IsErrOpen: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    LittlePeriodCount: t.Type<number, number, unknown>;
    RefreshMagnificationP1: t.Type<number, number, unknown>;
    RefreshMagnificationP2: t.Type<number, number, unknown>;
    RefreshMagnificationP3: t.Type<number, number, unknown>;
    LineScanGrayScale: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16389RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2017TDExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RSetVanishingCompensation: t.Type<number, number, unknown>;
    GSetVanishingCompensation: t.Type<number, number, unknown>;
    BSetVanishingCompensation: t.Type<number, number, unknown>;
    RSetVanishing: t.Type<number, number, unknown>;
    GSetVanishing: t.Type<number, number, unknown>;
    BSetVanishing: t.Type<number, number, unknown>;
    RConstantSettings: t.Type<number, number, unknown>;
    GConstantSettings: t.Type<number, number, unknown>;
    BConstantSettings: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2017TExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ColorCompensate: t.Type<number, number, unknown>;
    UpdataType: t.Type<boolean, boolean, unknown>;
    OEType: t.Type<boolean, boolean, unknown>;
    SetDisapparate: t.Type<number, number, unknown>;
}>, t.PartialC<{
    SetFrequency: t.Type<number, number, unknown>;
    SetConstantCurrent: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenCircuitProtection: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsCustomSecondChipReg: t.Type<boolean, boolean, unknown>;
    RedRegLowValue: t.Type<number, number, unknown>;
    RedRegHighValue: t.Type<number, number, unknown>;
    GreenRegLowValue: t.Type<number, number, unknown>;
    GreenRegHighValue: t.Type<number, number, unknown>;
    BlueRegLowValue: t.Type<number, number, unknown>;
    BlueRegHighValue: t.Type<number, number, unknown>;
    VRedRegLowValue: t.Type<number, number, unknown>;
    VRedRegHighValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2030ExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    RColumnGhostCancelingMode: t.Type<number, number, unknown>;
    GColumnGhostCancelingMode: t.Type<number, number, unknown>;
    BColumnGhostCancelingMode: t.Type<number, number, unknown>;
    VRColumnGhostCancelingMode: t.Type<number, number, unknown>;
    RColumnGhostCanceling: t.Type<number, number, unknown>;
    GColumnGhostCanceling: t.Type<number, number, unknown>;
    BColumnGhostCanceling: t.Type<number, number, unknown>;
    VRColumnGhostCanceling: t.Type<number, number, unknown>;
    RLowGrayMode: t.Type<number, number, unknown>;
    GLowGrayMode: t.Type<number, number, unknown>;
    BLowGrayMode: t.Type<number, number, unknown>;
    VRLowGrayMode: t.Type<number, number, unknown>;
    RLowGrayCompensation: t.Type<number, number, unknown>;
    GLowGrayCompensation: t.Type<number, number, unknown>;
    BLowGrayCompensation: t.Type<number, number, unknown>;
    VRLowGrayCompensation: t.Type<number, number, unknown>;
}>, t.PartialC<{}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CompensationLevel: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
    CurrentWork: t.Type<boolean, boolean, unknown>;
    SystemRetainsSecond: t.Type<number, number, unknown>;
    ConstantSettings: t.Type<number, number, unknown>;
    CurrentSynchronou: t.Type<number, number, unknown>;
    OpenCircuitCheck: t.Type<number, number, unknown>;
    VanishingMode: t.Type<number, number, unknown>;
    GCLKFrequency: t.Type<number, number, unknown>;
    SystemRetainsThird: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
}>]>, t.IntersectionC<[t.TypeC<{
    RedVanishingRating: t.Type<number, number, unknown>;
    GreenVanishingRating: t.Type<number, number, unknown>;
    BlueVanishingRating: t.Type<number, number, unknown>;
    VRedVanishingRating: t.Type<number, number, unknown>;
    RedRegValueConfigFourth: t.Type<number, number, unknown>;
    GreenRegValueConfigFourth: t.Type<number, number, unknown>;
    BlueRegValueConfigFourth: t.Type<number, number, unknown>;
    VRedRegValueConfigFourth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    UsingBright: t.Type<boolean, boolean, unknown>;
    UsingSUM2033Gamma: t.Type<boolean, boolean, unknown>;
    IsDoubleRate: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    SetDataInput: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RSetVanishingCompensation: t.Type<number, number, unknown>;
    GSetVanishingCompensation: t.Type<number, number, unknown>;
    BSetVanishingCompensation: t.Type<number, number, unknown>;
    RSetVanishing: t.Type<number, number, unknown>;
    GSetVanishing: t.Type<number, number, unknown>;
    BSetVanishing: t.Type<number, number, unknown>;
    InflectionCurrent: t.Type<number, number, unknown>;
    SetCurrentPosition: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2117ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTL3103UDExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipTL3103UDExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipTL3103UDExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipTL3103UDExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipTL3103UDExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTL3103UDRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IDMWorkTime: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsPowerMode: t.Type<boolean, boolean, unknown>;
    IDMWorkCurrent: t.Type<number, number, unknown>;
    InspectionType: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC5929ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RepeatDisplayMode: t.Type<boolean, boolean, unknown>;
    PWMDisplayMode: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    OpenCheckVoltageRed: t.Type<number, number, unknown>;
    OpenCheckVoltageGreen: t.Type<number, number, unknown>;
    OpenCheckVoltageBlue: t.Type<number, number, unknown>;
    ShortCheckVoltageRed: t.Type<number, number, unknown>;
    ShortCheckVoltageGreen: t.Type<number, number, unknown>;
    ShortCheckVoltageBlue: t.Type<number, number, unknown>;
    HiddenCheck: t.Type<number, number, unknown>;
    CheckLostGain: t.Type<number, number, unknown>;
    GlobalBrightRed: t.Type<number, number, unknown>;
    GlobalBrightGreen: t.Type<number, number, unknown>;
    GlobalBrightBlue: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC5948AExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    GlobalBrightness: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    SetTD0: t.Type<number, number, unknown>;
    GamaValue: t.Type<number, number, unknown>;
    RedNegVoltageCtrl: t.Type<number, number, unknown>;
    GreenNegVoltageCtrl: t.Type<number, number, unknown>;
    BlueNegVoltageCtrl: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    GreenInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    BlueInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    PrechargeModeControl: t.Type<number, number, unknown>;
    CaterpillarElimination: t.Type<number, number, unknown>;
    EdgeSetGCLK: t.Type<number, number, unknown>;
    PWMModelSelecte: t.Type<boolean, boolean, unknown>;
    RedInterference: t.Type<number, number, unknown>;
    GreenInterference: t.Type<number, number, unknown>;
    BlueInterference: t.Type<number, number, unknown>;
    HardwarePar: t.Type<number, number, unknown>;
    PowerSavingModeSettings: t.Type<boolean, boolean, unknown>;
    RedLowGrayscaleUniformity: t.Type<number, number, unknown>;
    GreenLowGrayscaleUniformity: t.Type<number, number, unknown>;
    BlueLowGrayscaleUniformity: t.Type<number, number, unknown>;
    HighLightInterference: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC59581ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    GlobalBrightness: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    SetTD0: t.Type<number, number, unknown>;
    CheckVoltageSetting: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedLowAshEnhancedControl: t.Type<number, number, unknown>;
    GreenLowAshEnhancedControl: t.Type<number, number, unknown>;
    BlueLowAshEnhancedControl: t.Type<number, number, unknown>;
    TimingControl: t.Type<boolean, boolean, unknown>;
    ImproveTheLowAsh: t.Type<number, number, unknown>;
    PWMModelSelecte: t.Type<boolean, boolean, unknown>;
    RedInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    GreenInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    BlueInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    ChargingMode: t.Type<boolean, boolean, unknown>;
    EdgeSetGCLK: t.Type<boolean, boolean, unknown>;
    PowerSavingModeSettings: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC5958ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegisterArray: import("../../lib/common").BufferFromBase64;
    RegArrayUI: import("../../lib/common").BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsPowerSavingMode1: t.Type<boolean, boolean, unknown>;
    PowerSavingMode2: t.Type<number, number, unknown>;
    IsBadPoints: t.Type<boolean, boolean, unknown>;
    RLowGrayGradientAdj: t.Type<number, number, unknown>;
    GLowGrayGradientAdj: t.Type<number, number, unknown>;
    BLowGrayGradientAdj: t.Type<number, number, unknown>;
    RLowGrayBrightCompensation: t.Type<number, number, unknown>;
    GLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BlackFieldRegulation: t.Type<number, number, unknown>;
    RCouplingParameterAdj1: t.Type<number, number, unknown>;
    GCouplingParameterAdj1: t.Type<number, number, unknown>;
    BCouplingParameterAdj1: t.Type<number, number, unknown>;
    RCouplingParameterAdj2: t.Type<number, number, unknown>;
    GCouplingParameterAdj2: t.Type<number, number, unknown>;
    BCouplingParameterAdj2: t.Type<number, number, unknown>;
    IsRCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsGCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsBCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    RLowAshColorCastCompensation: t.Type<number, number, unknown>;
    GLowAshColorCastCompensation: t.Type<number, number, unknown>;
    BLowAshColorCastCompensation: t.Type<number, number, unknown>;
    Is256FrameRateMode: t.Type<boolean, boolean, unknown>;
    RGain: t.Type<number, number, unknown>;
    GGain: t.Type<number, number, unknown>;
    BGain: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    ShortDetectionLevel: t.Type<number, number, unknown>;
    MaxCurrentValue: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RQuickTurnOff: t.Type<number, number, unknown>;
    GQuickTurnOff: t.Type<number, number, unknown>;
    BQuickTurnOff: t.Type<number, number, unknown>;
    FirstLineDarkAdj: t.Type<number, number, unknown>;
    IsCouplingParameterAdj3: t.Type<boolean, boolean, unknown>;
    CouplingParameterAdj4: t.Type<number, number, unknown>;
    IsCouplingParameterAdj4: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC6983ExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegisterArray: import("../../lib/common").BufferFromBase64;
        RegArrayUI: import("../../lib/common").BufferFromBase64;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        IsPowerSavingMode1: t.Type<boolean, boolean, unknown>;
        PowerSavingMode2: t.Type<number, number, unknown>;
        IsBadPoints: t.Type<boolean, boolean, unknown>;
        RLowGrayGradientAdj: t.Type<number, number, unknown>;
        GLowGrayGradientAdj: t.Type<number, number, unknown>;
        BLowGrayGradientAdj: t.Type<number, number, unknown>;
        RLowGrayBrightCompensation: t.Type<number, number, unknown>;
        GLowGrayBrightCompensation: t.Type<number, number, unknown>;
        BLowGrayBrightCompensation: t.Type<number, number, unknown>;
        BlackFieldRegulation: t.Type<number, number, unknown>;
        RCouplingParameterAdj1: t.Type<number, number, unknown>;
        GCouplingParameterAdj1: t.Type<number, number, unknown>;
        BCouplingParameterAdj1: t.Type<number, number, unknown>;
        RCouplingParameterAdj2: t.Type<number, number, unknown>;
        GCouplingParameterAdj2: t.Type<number, number, unknown>;
        BCouplingParameterAdj2: t.Type<number, number, unknown>;
        IsRCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
        IsGCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
        IsBCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
        RLowAshColorCastCompensation: t.Type<number, number, unknown>;
        GLowAshColorCastCompensation: t.Type<number, number, unknown>;
        BLowAshColorCastCompensation: t.Type<number, number, unknown>;
        Is256FrameRateMode: t.Type<boolean, boolean, unknown>;
        RGain: t.Type<number, number, unknown>;
        GGain: t.Type<number, number, unknown>;
        BGain: t.Type<number, number, unknown>;
        GlobalGain: t.Type<number, number, unknown>;
        ShortDetectionLevel: t.Type<number, number, unknown>;
        MaxCurrentValue: t.Type<number, number, unknown>;
        RSlowlyOpen: t.Type<number, number, unknown>;
        GSlowlyOpen: t.Type<number, number, unknown>;
        BSlowlyOpen: t.Type<number, number, unknown>;
        RQuickTurnOff: t.Type<number, number, unknown>;
        GQuickTurnOff: t.Type<number, number, unknown>;
        BQuickTurnOff: t.Type<number, number, unknown>;
        FirstLineDarkAdj: t.Type<number, number, unknown>;
        IsCouplingParameterAdj3: t.Type<boolean, boolean, unknown>;
        CouplingParameterAdj4: t.Type<number, number, unknown>;
        IsCouplingParameterAdj4: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipTLC6983ExtendProperty">;
    }>]>;
    TempSubField: t.Type<number, number, unknown>;
    TempICNum: t.Type<number, number, unknown>;
    TempGclkFreqR: t.Type<number, number, unknown>;
    TempBit3: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GclkFreqR: t.Type<number, number, unknown>;
    Bit3: t.Type<number, number, unknown>;
    ICNum: t.Type<number, number, unknown>;
    PWMNum: t.Type<number, number, unknown>;
    HHGCLKNum: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC6983RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg: t.Type<number, number, unknown>;
    GreenFirstReg: t.Type<number, number, unknown>;
    BlueFirstReg: t.Type<number, number, unknown>;
    VRedFirstReg: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipUCS5603RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<bigint, bigint, unknown>>;
    ConfigRegisterNum: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipXM11201GRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<bigint, bigint, unknown>>;
    ConfigRegisterNum: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipXM11202GRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<bigint, bigint, unknown>>;
    ConfigRegisterNum: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipXM11920GRGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegData: import("../../lib/common").BufferFromBase64;
    SecondRegData: import("../../lib/common").BufferFromBase64;
    ThirdRegData: import("../../lib/common").BufferFromBase64;
    FourthRegData: import("../../lib/common").BufferFromBase64;
    SixthRegData: import("../../lib/common").BufferFromBase64;
    SeventhRegData: import("../../lib/common").BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    LowGrayCompsention: t.Type<number, number, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    LineShadowEliminationStrength: t.Type<number, number, unknown>;
    ColumnShadowEliminationStrength: t.Type<number, number, unknown>;
    PreFilledMode: t.Type<number, number, unknown>;
    GrayMode: t.Type<number, number, unknown>;
    DCM_M: t.Type<number, number, unknown>;
    DCM_D: t.Type<number, number, unknown>;
    WeightValueConfig: import("../../lib/common").BufferFromBase64;
    RedOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    GreenOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    BlueOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    WhiteOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
    AlgorithmSelect: t.Type<number, number, unknown>;
    PARI: t.Type<number, number, unknown>;
    PAR2: t.Type<number, number, unknown>;
    LEDStyle: t.Type<number, number, unknown>;
    SynMode: t.Type<number, number, unknown>;
    ICLKDIVNum: t.Type<number, number, unknown>;
    ISYNCNUM: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipYY6018RGBVExtendProperty">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegValueConfigThird: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RegValueConfigFirst: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"CustomRegExtendPropertyBase">;
}>]>]>;
export type ChipBaseExtendPropey = Chip16159ExtendProperty | Chip16159RGBExtendProperty | Chip16169sExtendProperty | Chip16169sRGBExtendProperty | Chip2020ExtendProperty | Chip2028RGBVExtendPropey | Chip2053ExtendPropety | Chip2163ExtendPropety | Chip2200ExtendProperty | Chip5043RGBVExtendPropey | Chip5051BExtendPropey | Chip5051BRGBVExtendPropey | Chip5124RGBVExtendPropey | Chip5125RGBVExtendPropey | Chip5152ExtendProperty | Chip5152RGBVExtendPropey | Chip5153ExtendProperty | Chip5153RGBVExtendPropey | Chip5155ExtendProperty | Chip5155RGBVExtendPropey | Chip5166RGBVExtendPropey | Chip5252RGBVExtendPropey | Chip5253BExtendProperty | Chip5253BRGBExtendPropety | Chip5253ExtendProperty | Chip5253RGBExtendPropety | Chip5266RGBVExtendPropey | Chip5353ExtendProperty | Chip5353RGBVExtendPropey | Chip5354ExtendProperty | Chip5354RGBVExtendPropey | Chip5359ExtendProperty | Chip5359RGBExtendProperty | Chip9263RGBVExtendPropey | Chip9348ExtendProperty | Chip9348RGBVExtendPropey | Chip9373ExtendPropety | Chip9748ExtendProperty | Chip9748RGBVExtendPropey | ChipAXS6018RGBVExtendProperty | ChipCFD435AExtendProperty | ChipCFD435ARGBVExtendProperty | ChipCFD455AExtendProperty | ChipCFD455ARGBVExtendProperty | ChipCFD555AExtendProperty | ChipCFD555ARGBVExtendProperty | ChipCNS7153ExtendProperty | ChipCNS7153RGBVExtendProperty | ChipCNS7253ExtendProperty | ChipCNS7253RGBVExtendProperty | ChipCS2017ExtendProperty | ChipCS2017RGBVExtendProperty | ChipCS2017SExtendProperty | ChipCS2017SRGBVExtendProperty | ChipCS2033ExtendProperty | ChipCS2033RGBVExtendProperty | ChipCS2066ExtendProperty | ChipCS2066RGBVExtendProperty | ChipDM413ExtendProperty | ChipDM413RGBVExtendProperty | ChipDP3230RGBVExtendProperty | ChipDP3246ExtendProperty | ChipDP3246RGBVExtendProperty | ChipDP3264ExtendProperty | ChipDP3264RGBVExtendProperty | ChipDP3265ExtendProperty | ChipDP3265RGBVExtendProperty | ChipFM6047ExtendProperty | ChipFM6047RGBVExtendProperty | ChipFM6126ExtendProperty | ChipFM6127ExtendProperty | ChipFM6182ExtendProperty | ChipFM6182RGBVExtendPropey | ChipFM6353ExtendProperty | ChipFM6353RGBVExtendProperty | ChipFM6356ExtendProperty | ChipFM6356RGBVExtendProperty | ChipFM6363ExtendProperty | ChipFM6363RGBVExtendProperty | ChipFM6518ExtendProperty | ChipFM6518RGBVExtendProperty | ChipFM6555ExtendProperty | ChipFM6555RGBVExtendProperty | ChipFM6565ExtendProperty | ChipFM6565RGBVExtendProperty | ChipGW6808ExtendProperty | ChipHB200BRGBVExtendProperty | ChipHBS1910ExtendProperty | ChipHBS1910RGBVExtendProperty | ChipHS3257ExtendProperty | ChipHS3257RGBVExtendProperty | ChipHX5011RGBVExtendProperty | ChipHX8055ExtendProperty | ChipHX8055RGBVExtendProperty | ChipHX8864ExtendProperty | ChipHX8864RGBVExtendProperty | ChipICN2038SExtendProperty | ChipICN2065ExtendProperty | ChipICN2065RGBVExtendProperty | ChipICND2055ExtendProperty | ChipICND2055RGBVExtendProperty | ChipICND2076RGBVExtendProperty | ChipICND2100ExtendProperty | ChipICND2112ExtendProperty | ChipICND2112RGBVExtendPropey | ChipICND2126ExtendProperty | ChipICND2126RGBVExtendProperty | ChipICND2159ExtendProperty | ChipICND2159RGBVExtendProperty | ChipICND2210RGBVExtendProperty | ChipIT1505ExtendProperty | ChipMBI5034BExtendProperty | ChipMBI5034BRGBVExtendProperty | ChipMBI5038ExtendProperty | ChipMBI5038RGBExtendProperty | ChipMBI5043ExtendProperty | ChipMBI5166ExtendProperty | ChipMBI524ExtendProperty | ChipMBI5251ExtendProperty | ChipMBI5251RGBVExtendProperty | ChipMBI5252BExtendProperty | ChipMBI5252BRGBVExtendProperty | ChipMBI5253NewBExtendProperty | ChipMBI5253NewBRGBVExtendProperty | ChipMBI5254ExtendProperty | ChipMBI5254RGBVExtendProperty | ChipMBI525ExtendProperty | ChipMBI5264ExtendProperty | ChipMBI5264RGBVExtendProperty | ChipMBI5268ExtendProperty | ChipMBI5268RGBVExtendProperty | ChipMBI5269ExtendProperty | ChipMBI5269RGBVExtendProperty | ChipMBI5754ExtendProperty | ChipMBI5754RGBVExtendProperty | ChipMBI5759CustomExtendProperty | ChipMBI5759ExtendProperty | ChipMBI5759GRGBExtendProperty | ChipMBI5850RGBVExtendProperty | ChipMBI6033ExtendProperty | ChipMBI6033RGBVExtendProperty | ChipMY9221ExtendProperty | ChipMY9263ExtendProperty | ChipMY9366ExtendProperty | ChipMY9862ARGBExtendProperty | ChipMY9862ExtendProperty | ChipMY9862RGBExtendProperty | ChipMY9866ExtendProperty | ChipNT27002SExtendProperty | ChipNT27002SRGBVExtendProperty | ChipRT5924ExtendProperty | ChipRT5938SSExtendProperty | ChipRT5938SSRGBVExtendProperty | ChipRT5965ExtendProperty | ChipRT5965RGBVExtendProperty | ChipRZRGBVExtendProperty | ChipSCL8060ExtendProperty | ChipSCL8080ExtendProperty | ChipSCL8080RGBVExtendProperty | ChipSCL8081ExtendProperty | ChipSCL8081RGBVExtendProperty | ChipSM16017DSRGBVExtendProperty | ChipSM16017SExtendProperty | ChipSM16027ExtendProperty | ChipSM16136ExtendProperty | ChipSM16136RGBExtendProperty | ChipSM16158ExtendProperty | ChipSM16207SExtendProperty | ChipSM16227ExtendProperty | ChipSM16237ExtendProperty | ChipSM16259ExtendProperty | ChipSM16259RGBVExtendProperty | ChipSM16359ExtendProperty | ChipSM16359RGBVExtendProperty | ChipSM16369ExtendProperty | ChipSM16369RGBVExtendProperty | ChipSM16380ExtendProperty | ChipSM16380RGBVExtendProperty | ChipSM16388ExtendProperty | ChipSM16388RGBVExtendProperty | ChipSM16389ExtendProperty | ChipSM16389RGBVExtendProperty | ChipSUM2017TDExtendProperty | ChipSUM2017TExtendProperty | ChipSUM2028ExtendProperty | ChipSUM2030ExtendProperty | ChipSUM2032ExtendProperty | ChipSUM2033BaseExtendProperty | ChipSUM2033ExtendProperty | ChipSUM2117ExtendProperty | ChipTL3103UDExtendProperty | ChipTL3103UDRGBVExtendProperty | ChipTLC5929ExtendProperty | ChipTLC5948AExtendProperty | ChipTLC59581ExtendProperty | ChipTLC5958ExtendProperty | ChipTLC6983ExtendProperty | ChipTLC6983RGBVExtendProperty | ChipUCS5603RGBVExtendProperty | ChipXM11201GRGBVExtendProperty | ChipXM11202GRGBVExtendProperty | ChipXM11920GRGBVExtendProperty | ChipYY6018RGBVExtendProperty | CustomRegExtendPropertyBase;
export declare const ChipAutoAdjustRefreshRateParamBase: t.UnionC<[t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    ChipAutoRefreshRateParamList: t.ArrayC<t.PartialC<{
        AutoAdjustFreqType: t.Type<import("..").AutoAdjustFreqTypeEnum, "Freq_50HZ" | "Freq_60HZ" | "Freq_75HZ" | "Freq_120HZ" | "Freq_48HZ" | "Freq_30HZ" | "Freq_85HZ" | "Freq_100HZ" | "Freq_24HZ" | "Freq_72HZ" | "Freq_25HZ" | "Freq_240HZ", unknown>;
        RefreshRateParam: t.PartialC<{}>;
        IsConfigCurrentField: t.Type<boolean, boolean, unknown>;
    }>>;
}>, t.PartialC<{
    ScanCount: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
}>]>, t.PartialC<{
    ChipType: t.Type<import("..").ChipTypeEnum, "Chip_CommonBase" | "Chip_MBI5028" | "Chip_MBI5030" | "Chip_MBI5036" | "Chip_MBI5040" | "Chip_MBI5042" | "Chip_MBI5050" | "Chip_MBI5167" | "Chip_DM13H" | "Chip_P2518" | "Chip_SUM2017" | "Chip_P2510" | "Chip_RFT3630" | "Chip_MBI5034" | "Chip_SUM2018" | "Chip_SUM2030" | "Chip_MBI5037" | "Chip_MBI5039" | "Chip_MY9268" | "Chip_SCL8060" | "Chip_MBI5224" | "Chip_MBI5051" | "Chip_MBI5052" | "Chip_MBI5053" | "Chip_MY9266" | "Chip_MY9269" | "Chip_MBI5042B" | "Chip_MBI5045" | "Chip_SUM2032" | "Chip_MBI5152" | "Chip_MY9221" | "Chip_MBI5124" | "Chip_MBI5151" | "Chip_MBI5153" | "Chip_MY9163" | "Chip_MBI6030" | "Chip_RT5924" | "Chip_MY9262" | "Chip_SM16136" | "Chip_MY9868" | "Chip_SUM2028" | "Chip_TLC5958" | "Chip_MBI5266" | "Chip_SM16158" | "Chip_TLC5929" | "Chip_MBI5166" | "Chip_MBI5155" | "Chip_MBI5122" | "Chip_MBI6023" | "Chip_MBI5124A" | "Chip_MY9366" | "Chip_MBI5252" | "Chip_MBI5043" | "Chip_MBIA043" | "Chip_MY9862" | "Chip_MBI5041B" | "Chip_MBI5041Q" | "Chip_MBI5038" | "Chip_ICN2038" | "Chip_ICN2027" | "Chip_SM16027" | "Chip_SM16159" | "Chip_TLS3001" | "Chip_TLC59581" | "Chip_MBI5353" | "Chip_GW6205" | "Chip_GW6202B" | "Chip_SUM2017T" | "Chip_SUM2033" | "Chip_MY9231" | "Chip_SUM2130" | "Chip_SUM2131" | "Chip_MY9868A" | "Chip_MY9862A" | "Chip_ICN2038A" | "Chip_MY9263" | "Chip_UCS9812" | "Chip_MBI5051B" | "Chip_MBI6020" | "Chip_MBI5253" | "Chip_MBI6120" | "Chip_ICN2053" | "Chip_MY9373" | "Chip_SM16017S" | "Chip_SC6618" | "Chip_SM16207S" | "Chip_SUM2117" | "Chip_TLC5948A" | "Chip_ICN2038S" | "Chip_MY9348" | "Chip_SUM2035" | "Chip_SUM2135" | "Chip_SUM20167" | "Chip_TM1916" | "Chip_SUM2030T" | "Chip_GW6808" | "Chip_GW98XX" | "Chip_SC6660" | "Chip_LS9960" | "Chip_SM16237" | "Chip_ICN2038S_Common" | "Chip_LS9918" | "Chip_UCS5603" | "Chip_MBI5125" | "Chip_MBI5125A" | "Chip_ICND2100" | "Chip_ICND2110" | "Chip_ICND2055" | "Chip_ICN2045" | "Chip_ICN2013" | "Chip_ICN2050" | "Chip_ICN205X" | "Chip_SM16227" | "Chip_LS9929" | "Chip_MBI5354" | "Chip_SM16188B" | "Chip_FM6182" | "Chip_MBI5359" | "Chip_ICN2065" | "Chip_MBI5253B" | "Chip_MY9866" | "Chip_SCL8080" | "Chip_SM16259" | "Chip_NVS6867" | "Chip_SUM6082" | "Chip_UCS8902" | "Chip_SM16237P" | "Chip_SM16227P" | "Chip_MY9748" | "Chip_FM6142" | "Chip_FM6153" | "Chip_ICND2200" | "Chip_SUM2017TD" | "Chip_ISA2020" | "Chip_IT1505" | "Chip_SM16237DS" | "Chip_FM6126" | "Chip_LS9930" | "Chip_LD1512" | "Chip_MBI5124New" | "Chip_UCS1912" | "Chip_LS9961" | "Chip_TLC6946" | "Chip_ICND2112" | "Chip_ICND2046" | "Chip_ICN2038S_通用" | "Chip_UCS512C" | "Chip_SM16359" | "Chip_MBI5759" | "Chip_MY9866_Common" | "Chip_LS9919" | "Chip_MBI5850" | "Chip_CNS7153" | "Chip_ICND2163" | "Chip_LS9917" | "Chip_MBI5325" | "Chip_MBI5325D_DPWM" | "Chip_SM16218" | "Chip_ICND2153" | "Chip_ICND2150" | "Chip_SCIC2023" | "Chip_MY9553" | "Chip_MY9553_Common" | "Chip_SM16169S" | "Chip_LS9920" | "Chip_LS9926" | "Chip_LS9935" | "Chip_ICND2076" | "Chip_HX8055" | "Chip_ICND2047" | "Chip_SUM2036" | "Chip_FM6648" | "Chip_FM6127" | "Chip_CNS7253" | "Chip_XM11920G" | "Chip_MBI5251" | "Chip_SCL8081" | "Chip_MBI5754" | "Chip_VOD5153" | "Chip_MBI5254" | "Chip_CS2017" | "Chip_CS2017S" | "Chip_FM6353" | "Chip_FM6356" | "Chip_YY6018" | "Chip_DP5525" | "Chip_MBI5864" | "Chip_CS2033" | "Chip_MBI5264" | "Chip_HS3257" | "Chip_LS9935B" | "Chip_LS9928" | "Chip_TLC6983" | "Chip_XM11201G" | "Chip_XM11202G" | "Chip_AXS6018" | "Chip_CS2066" | "Chip_SM16369" | "Chip_HX8864" | "Chip_FM6565" | "Chip_FM6555" | "Chip_MBI6033" | "Chip_SCL8061" | "Chip_RT5965" | "Chip_MY9758" | "Chip_ICND2210" | "Chip_FM6047" | "Chip_DM413" | "Chip_FM6363" | "Chip_ICND2159" | "Chip_RM1A00" | "Chip_RT7920" | "Chip_SM16017DS" | "Chip_LS9903" | "Chip_D8023" | "Chip_FM6518" | "Chip_MBI5268" | "Chip_TL3102UD" | "Chip_HBS1910" | "Chip_DP3264" | "Chip_DP3246" | "Chip_SM16389" | "Chip_D2618" | "Chip_MBI5252B" | "Chip_RZ" | "Chip_HX5011" | "Chip_ICND2126" | "Chip_MBI5253NewB" | "Chip_CFD455A" | "Chip_DP3230" | "Chip_LS9936" | "Chip_CFD435A" | "Chip_SM16380" | "Chip_MBI5034B" | "Chip_TL3103UD" | "Chip_HB200B" | "Chip_CFD555A" | "Chip_RT5938SS" | "Chip_LS9931" | "Chip_NT27002S" | "Chip_SM16388" | "Chip_DP3265" | "Chip_MBI5269" | "Chip_CFD335A" | "Chip_RT5938SS_Common" | "Chip_TBS3268" | "Chip_MTS01" | "Chip_XM11480G" | "Unknown", unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
    AutoAdjustParamAddress: t.Type<number, number, unknown>;
    AutoAdjustParamDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2065AutoRefreshRataParam">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    ChipAutoRefreshRateParamList: t.ArrayC<t.PartialC<{
        AutoAdjustFreqType: t.Type<import("..").AutoAdjustFreqTypeEnum, "Freq_50HZ" | "Freq_60HZ" | "Freq_75HZ" | "Freq_120HZ" | "Freq_48HZ" | "Freq_30HZ" | "Freq_85HZ" | "Freq_100HZ" | "Freq_24HZ" | "Freq_72HZ" | "Freq_25HZ" | "Freq_240HZ", unknown>;
        RefreshRateParam: t.PartialC<{}>;
        IsConfigCurrentField: t.Type<boolean, boolean, unknown>;
    }>>;
}>, t.PartialC<{
    ScanCount: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
}>]>, t.PartialC<{
    ChipType: t.Type<import("..").ChipTypeEnum, "Chip_CommonBase" | "Chip_MBI5028" | "Chip_MBI5030" | "Chip_MBI5036" | "Chip_MBI5040" | "Chip_MBI5042" | "Chip_MBI5050" | "Chip_MBI5167" | "Chip_DM13H" | "Chip_P2518" | "Chip_SUM2017" | "Chip_P2510" | "Chip_RFT3630" | "Chip_MBI5034" | "Chip_SUM2018" | "Chip_SUM2030" | "Chip_MBI5037" | "Chip_MBI5039" | "Chip_MY9268" | "Chip_SCL8060" | "Chip_MBI5224" | "Chip_MBI5051" | "Chip_MBI5052" | "Chip_MBI5053" | "Chip_MY9266" | "Chip_MY9269" | "Chip_MBI5042B" | "Chip_MBI5045" | "Chip_SUM2032" | "Chip_MBI5152" | "Chip_MY9221" | "Chip_MBI5124" | "Chip_MBI5151" | "Chip_MBI5153" | "Chip_MY9163" | "Chip_MBI6030" | "Chip_RT5924" | "Chip_MY9262" | "Chip_SM16136" | "Chip_MY9868" | "Chip_SUM2028" | "Chip_TLC5958" | "Chip_MBI5266" | "Chip_SM16158" | "Chip_TLC5929" | "Chip_MBI5166" | "Chip_MBI5155" | "Chip_MBI5122" | "Chip_MBI6023" | "Chip_MBI5124A" | "Chip_MY9366" | "Chip_MBI5252" | "Chip_MBI5043" | "Chip_MBIA043" | "Chip_MY9862" | "Chip_MBI5041B" | "Chip_MBI5041Q" | "Chip_MBI5038" | "Chip_ICN2038" | "Chip_ICN2027" | "Chip_SM16027" | "Chip_SM16159" | "Chip_TLS3001" | "Chip_TLC59581" | "Chip_MBI5353" | "Chip_GW6205" | "Chip_GW6202B" | "Chip_SUM2017T" | "Chip_SUM2033" | "Chip_MY9231" | "Chip_SUM2130" | "Chip_SUM2131" | "Chip_MY9868A" | "Chip_MY9862A" | "Chip_ICN2038A" | "Chip_MY9263" | "Chip_UCS9812" | "Chip_MBI5051B" | "Chip_MBI6020" | "Chip_MBI5253" | "Chip_MBI6120" | "Chip_ICN2053" | "Chip_MY9373" | "Chip_SM16017S" | "Chip_SC6618" | "Chip_SM16207S" | "Chip_SUM2117" | "Chip_TLC5948A" | "Chip_ICN2038S" | "Chip_MY9348" | "Chip_SUM2035" | "Chip_SUM2135" | "Chip_SUM20167" | "Chip_TM1916" | "Chip_SUM2030T" | "Chip_GW6808" | "Chip_GW98XX" | "Chip_SC6660" | "Chip_LS9960" | "Chip_SM16237" | "Chip_ICN2038S_Common" | "Chip_LS9918" | "Chip_UCS5603" | "Chip_MBI5125" | "Chip_MBI5125A" | "Chip_ICND2100" | "Chip_ICND2110" | "Chip_ICND2055" | "Chip_ICN2045" | "Chip_ICN2013" | "Chip_ICN2050" | "Chip_ICN205X" | "Chip_SM16227" | "Chip_LS9929" | "Chip_MBI5354" | "Chip_SM16188B" | "Chip_FM6182" | "Chip_MBI5359" | "Chip_ICN2065" | "Chip_MBI5253B" | "Chip_MY9866" | "Chip_SCL8080" | "Chip_SM16259" | "Chip_NVS6867" | "Chip_SUM6082" | "Chip_UCS8902" | "Chip_SM16237P" | "Chip_SM16227P" | "Chip_MY9748" | "Chip_FM6142" | "Chip_FM6153" | "Chip_ICND2200" | "Chip_SUM2017TD" | "Chip_ISA2020" | "Chip_IT1505" | "Chip_SM16237DS" | "Chip_FM6126" | "Chip_LS9930" | "Chip_LD1512" | "Chip_MBI5124New" | "Chip_UCS1912" | "Chip_LS9961" | "Chip_TLC6946" | "Chip_ICND2112" | "Chip_ICND2046" | "Chip_ICN2038S_通用" | "Chip_UCS512C" | "Chip_SM16359" | "Chip_MBI5759" | "Chip_MY9866_Common" | "Chip_LS9919" | "Chip_MBI5850" | "Chip_CNS7153" | "Chip_ICND2163" | "Chip_LS9917" | "Chip_MBI5325" | "Chip_MBI5325D_DPWM" | "Chip_SM16218" | "Chip_ICND2153" | "Chip_ICND2150" | "Chip_SCIC2023" | "Chip_MY9553" | "Chip_MY9553_Common" | "Chip_SM16169S" | "Chip_LS9920" | "Chip_LS9926" | "Chip_LS9935" | "Chip_ICND2076" | "Chip_HX8055" | "Chip_ICND2047" | "Chip_SUM2036" | "Chip_FM6648" | "Chip_FM6127" | "Chip_CNS7253" | "Chip_XM11920G" | "Chip_MBI5251" | "Chip_SCL8081" | "Chip_MBI5754" | "Chip_VOD5153" | "Chip_MBI5254" | "Chip_CS2017" | "Chip_CS2017S" | "Chip_FM6353" | "Chip_FM6356" | "Chip_YY6018" | "Chip_DP5525" | "Chip_MBI5864" | "Chip_CS2033" | "Chip_MBI5264" | "Chip_HS3257" | "Chip_LS9935B" | "Chip_LS9928" | "Chip_TLC6983" | "Chip_XM11201G" | "Chip_XM11202G" | "Chip_AXS6018" | "Chip_CS2066" | "Chip_SM16369" | "Chip_HX8864" | "Chip_FM6565" | "Chip_FM6555" | "Chip_MBI6033" | "Chip_SCL8061" | "Chip_RT5965" | "Chip_MY9758" | "Chip_ICND2210" | "Chip_FM6047" | "Chip_DM413" | "Chip_FM6363" | "Chip_ICND2159" | "Chip_RM1A00" | "Chip_RT7920" | "Chip_SM16017DS" | "Chip_LS9903" | "Chip_D8023" | "Chip_FM6518" | "Chip_MBI5268" | "Chip_TL3102UD" | "Chip_HBS1910" | "Chip_DP3264" | "Chip_DP3246" | "Chip_SM16389" | "Chip_D2618" | "Chip_MBI5252B" | "Chip_RZ" | "Chip_HX5011" | "Chip_ICND2126" | "Chip_MBI5253NewB" | "Chip_CFD455A" | "Chip_DP3230" | "Chip_LS9936" | "Chip_CFD435A" | "Chip_SM16380" | "Chip_MBI5034B" | "Chip_TL3103UD" | "Chip_HB200B" | "Chip_CFD555A" | "Chip_RT5938SS" | "Chip_LS9931" | "Chip_NT27002S" | "Chip_SM16388" | "Chip_DP3265" | "Chip_MBI5269" | "Chip_CFD335A" | "Chip_RT5938SS_Common" | "Chip_TBS3268" | "Chip_MTS01" | "Chip_XM11480G" | "Unknown", unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
    AutoAdjustParamAddress: t.Type<number, number, unknown>;
    AutoAdjustParamDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2055AutoRefreshRataParam">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    ChipAutoRefreshRateParamList: t.ArrayC<t.PartialC<{
        AutoAdjustFreqType: t.Type<import("..").AutoAdjustFreqTypeEnum, "Freq_50HZ" | "Freq_60HZ" | "Freq_75HZ" | "Freq_120HZ" | "Freq_48HZ" | "Freq_30HZ" | "Freq_85HZ" | "Freq_100HZ" | "Freq_24HZ" | "Freq_72HZ" | "Freq_25HZ" | "Freq_240HZ", unknown>;
        RefreshRateParam: t.PartialC<{}>;
        IsConfigCurrentField: t.Type<boolean, boolean, unknown>;
    }>>;
}>, t.PartialC<{
    ScanCount: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
}>]>, t.PartialC<{
    ChipType: t.Type<import("..").ChipTypeEnum, "Chip_CommonBase" | "Chip_MBI5028" | "Chip_MBI5030" | "Chip_MBI5036" | "Chip_MBI5040" | "Chip_MBI5042" | "Chip_MBI5050" | "Chip_MBI5167" | "Chip_DM13H" | "Chip_P2518" | "Chip_SUM2017" | "Chip_P2510" | "Chip_RFT3630" | "Chip_MBI5034" | "Chip_SUM2018" | "Chip_SUM2030" | "Chip_MBI5037" | "Chip_MBI5039" | "Chip_MY9268" | "Chip_SCL8060" | "Chip_MBI5224" | "Chip_MBI5051" | "Chip_MBI5052" | "Chip_MBI5053" | "Chip_MY9266" | "Chip_MY9269" | "Chip_MBI5042B" | "Chip_MBI5045" | "Chip_SUM2032" | "Chip_MBI5152" | "Chip_MY9221" | "Chip_MBI5124" | "Chip_MBI5151" | "Chip_MBI5153" | "Chip_MY9163" | "Chip_MBI6030" | "Chip_RT5924" | "Chip_MY9262" | "Chip_SM16136" | "Chip_MY9868" | "Chip_SUM2028" | "Chip_TLC5958" | "Chip_MBI5266" | "Chip_SM16158" | "Chip_TLC5929" | "Chip_MBI5166" | "Chip_MBI5155" | "Chip_MBI5122" | "Chip_MBI6023" | "Chip_MBI5124A" | "Chip_MY9366" | "Chip_MBI5252" | "Chip_MBI5043" | "Chip_MBIA043" | "Chip_MY9862" | "Chip_MBI5041B" | "Chip_MBI5041Q" | "Chip_MBI5038" | "Chip_ICN2038" | "Chip_ICN2027" | "Chip_SM16027" | "Chip_SM16159" | "Chip_TLS3001" | "Chip_TLC59581" | "Chip_MBI5353" | "Chip_GW6205" | "Chip_GW6202B" | "Chip_SUM2017T" | "Chip_SUM2033" | "Chip_MY9231" | "Chip_SUM2130" | "Chip_SUM2131" | "Chip_MY9868A" | "Chip_MY9862A" | "Chip_ICN2038A" | "Chip_MY9263" | "Chip_UCS9812" | "Chip_MBI5051B" | "Chip_MBI6020" | "Chip_MBI5253" | "Chip_MBI6120" | "Chip_ICN2053" | "Chip_MY9373" | "Chip_SM16017S" | "Chip_SC6618" | "Chip_SM16207S" | "Chip_SUM2117" | "Chip_TLC5948A" | "Chip_ICN2038S" | "Chip_MY9348" | "Chip_SUM2035" | "Chip_SUM2135" | "Chip_SUM20167" | "Chip_TM1916" | "Chip_SUM2030T" | "Chip_GW6808" | "Chip_GW98XX" | "Chip_SC6660" | "Chip_LS9960" | "Chip_SM16237" | "Chip_ICN2038S_Common" | "Chip_LS9918" | "Chip_UCS5603" | "Chip_MBI5125" | "Chip_MBI5125A" | "Chip_ICND2100" | "Chip_ICND2110" | "Chip_ICND2055" | "Chip_ICN2045" | "Chip_ICN2013" | "Chip_ICN2050" | "Chip_ICN205X" | "Chip_SM16227" | "Chip_LS9929" | "Chip_MBI5354" | "Chip_SM16188B" | "Chip_FM6182" | "Chip_MBI5359" | "Chip_ICN2065" | "Chip_MBI5253B" | "Chip_MY9866" | "Chip_SCL8080" | "Chip_SM16259" | "Chip_NVS6867" | "Chip_SUM6082" | "Chip_UCS8902" | "Chip_SM16237P" | "Chip_SM16227P" | "Chip_MY9748" | "Chip_FM6142" | "Chip_FM6153" | "Chip_ICND2200" | "Chip_SUM2017TD" | "Chip_ISA2020" | "Chip_IT1505" | "Chip_SM16237DS" | "Chip_FM6126" | "Chip_LS9930" | "Chip_LD1512" | "Chip_MBI5124New" | "Chip_UCS1912" | "Chip_LS9961" | "Chip_TLC6946" | "Chip_ICND2112" | "Chip_ICND2046" | "Chip_ICN2038S_通用" | "Chip_UCS512C" | "Chip_SM16359" | "Chip_MBI5759" | "Chip_MY9866_Common" | "Chip_LS9919" | "Chip_MBI5850" | "Chip_CNS7153" | "Chip_ICND2163" | "Chip_LS9917" | "Chip_MBI5325" | "Chip_MBI5325D_DPWM" | "Chip_SM16218" | "Chip_ICND2153" | "Chip_ICND2150" | "Chip_SCIC2023" | "Chip_MY9553" | "Chip_MY9553_Common" | "Chip_SM16169S" | "Chip_LS9920" | "Chip_LS9926" | "Chip_LS9935" | "Chip_ICND2076" | "Chip_HX8055" | "Chip_ICND2047" | "Chip_SUM2036" | "Chip_FM6648" | "Chip_FM6127" | "Chip_CNS7253" | "Chip_XM11920G" | "Chip_MBI5251" | "Chip_SCL8081" | "Chip_MBI5754" | "Chip_VOD5153" | "Chip_MBI5254" | "Chip_CS2017" | "Chip_CS2017S" | "Chip_FM6353" | "Chip_FM6356" | "Chip_YY6018" | "Chip_DP5525" | "Chip_MBI5864" | "Chip_CS2033" | "Chip_MBI5264" | "Chip_HS3257" | "Chip_LS9935B" | "Chip_LS9928" | "Chip_TLC6983" | "Chip_XM11201G" | "Chip_XM11202G" | "Chip_AXS6018" | "Chip_CS2066" | "Chip_SM16369" | "Chip_HX8864" | "Chip_FM6565" | "Chip_FM6555" | "Chip_MBI6033" | "Chip_SCL8061" | "Chip_RT5965" | "Chip_MY9758" | "Chip_ICND2210" | "Chip_FM6047" | "Chip_DM413" | "Chip_FM6363" | "Chip_ICND2159" | "Chip_RM1A00" | "Chip_RT7920" | "Chip_SM16017DS" | "Chip_LS9903" | "Chip_D8023" | "Chip_FM6518" | "Chip_MBI5268" | "Chip_TL3102UD" | "Chip_HBS1910" | "Chip_DP3264" | "Chip_DP3246" | "Chip_SM16389" | "Chip_D2618" | "Chip_MBI5252B" | "Chip_RZ" | "Chip_HX5011" | "Chip_ICND2126" | "Chip_MBI5253NewB" | "Chip_CFD455A" | "Chip_DP3230" | "Chip_LS9936" | "Chip_CFD435A" | "Chip_SM16380" | "Chip_MBI5034B" | "Chip_TL3103UD" | "Chip_HB200B" | "Chip_CFD555A" | "Chip_RT5938SS" | "Chip_LS9931" | "Chip_NT27002S" | "Chip_SM16388" | "Chip_DP3265" | "Chip_MBI5269" | "Chip_CFD335A" | "Chip_RT5938SS_Common" | "Chip_TBS3268" | "Chip_MTS01" | "Chip_XM11480G" | "Unknown", unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
    AutoAdjustParamAddress: t.Type<number, number, unknown>;
    AutoAdjustParamDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5850AutoRefreshRataParam">;
}>]>, t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    ChipAutoRefreshRateParamList: t.ArrayC<t.PartialC<{
        AutoAdjustFreqType: t.Type<import("..").AutoAdjustFreqTypeEnum, "Freq_50HZ" | "Freq_60HZ" | "Freq_75HZ" | "Freq_120HZ" | "Freq_48HZ" | "Freq_30HZ" | "Freq_85HZ" | "Freq_100HZ" | "Freq_24HZ" | "Freq_72HZ" | "Freq_25HZ" | "Freq_240HZ", unknown>;
        RefreshRateParam: t.PartialC<{}>;
        IsConfigCurrentField: t.Type<boolean, boolean, unknown>;
    }>>;
}>, t.PartialC<{
    ScanCount: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
}>]>, t.PartialC<{
    ChipType: t.Type<import("..").ChipTypeEnum, "Chip_CommonBase" | "Chip_MBI5028" | "Chip_MBI5030" | "Chip_MBI5036" | "Chip_MBI5040" | "Chip_MBI5042" | "Chip_MBI5050" | "Chip_MBI5167" | "Chip_DM13H" | "Chip_P2518" | "Chip_SUM2017" | "Chip_P2510" | "Chip_RFT3630" | "Chip_MBI5034" | "Chip_SUM2018" | "Chip_SUM2030" | "Chip_MBI5037" | "Chip_MBI5039" | "Chip_MY9268" | "Chip_SCL8060" | "Chip_MBI5224" | "Chip_MBI5051" | "Chip_MBI5052" | "Chip_MBI5053" | "Chip_MY9266" | "Chip_MY9269" | "Chip_MBI5042B" | "Chip_MBI5045" | "Chip_SUM2032" | "Chip_MBI5152" | "Chip_MY9221" | "Chip_MBI5124" | "Chip_MBI5151" | "Chip_MBI5153" | "Chip_MY9163" | "Chip_MBI6030" | "Chip_RT5924" | "Chip_MY9262" | "Chip_SM16136" | "Chip_MY9868" | "Chip_SUM2028" | "Chip_TLC5958" | "Chip_MBI5266" | "Chip_SM16158" | "Chip_TLC5929" | "Chip_MBI5166" | "Chip_MBI5155" | "Chip_MBI5122" | "Chip_MBI6023" | "Chip_MBI5124A" | "Chip_MY9366" | "Chip_MBI5252" | "Chip_MBI5043" | "Chip_MBIA043" | "Chip_MY9862" | "Chip_MBI5041B" | "Chip_MBI5041Q" | "Chip_MBI5038" | "Chip_ICN2038" | "Chip_ICN2027" | "Chip_SM16027" | "Chip_SM16159" | "Chip_TLS3001" | "Chip_TLC59581" | "Chip_MBI5353" | "Chip_GW6205" | "Chip_GW6202B" | "Chip_SUM2017T" | "Chip_SUM2033" | "Chip_MY9231" | "Chip_SUM2130" | "Chip_SUM2131" | "Chip_MY9868A" | "Chip_MY9862A" | "Chip_ICN2038A" | "Chip_MY9263" | "Chip_UCS9812" | "Chip_MBI5051B" | "Chip_MBI6020" | "Chip_MBI5253" | "Chip_MBI6120" | "Chip_ICN2053" | "Chip_MY9373" | "Chip_SM16017S" | "Chip_SC6618" | "Chip_SM16207S" | "Chip_SUM2117" | "Chip_TLC5948A" | "Chip_ICN2038S" | "Chip_MY9348" | "Chip_SUM2035" | "Chip_SUM2135" | "Chip_SUM20167" | "Chip_TM1916" | "Chip_SUM2030T" | "Chip_GW6808" | "Chip_GW98XX" | "Chip_SC6660" | "Chip_LS9960" | "Chip_SM16237" | "Chip_ICN2038S_Common" | "Chip_LS9918" | "Chip_UCS5603" | "Chip_MBI5125" | "Chip_MBI5125A" | "Chip_ICND2100" | "Chip_ICND2110" | "Chip_ICND2055" | "Chip_ICN2045" | "Chip_ICN2013" | "Chip_ICN2050" | "Chip_ICN205X" | "Chip_SM16227" | "Chip_LS9929" | "Chip_MBI5354" | "Chip_SM16188B" | "Chip_FM6182" | "Chip_MBI5359" | "Chip_ICN2065" | "Chip_MBI5253B" | "Chip_MY9866" | "Chip_SCL8080" | "Chip_SM16259" | "Chip_NVS6867" | "Chip_SUM6082" | "Chip_UCS8902" | "Chip_SM16237P" | "Chip_SM16227P" | "Chip_MY9748" | "Chip_FM6142" | "Chip_FM6153" | "Chip_ICND2200" | "Chip_SUM2017TD" | "Chip_ISA2020" | "Chip_IT1505" | "Chip_SM16237DS" | "Chip_FM6126" | "Chip_LS9930" | "Chip_LD1512" | "Chip_MBI5124New" | "Chip_UCS1912" | "Chip_LS9961" | "Chip_TLC6946" | "Chip_ICND2112" | "Chip_ICND2046" | "Chip_ICN2038S_通用" | "Chip_UCS512C" | "Chip_SM16359" | "Chip_MBI5759" | "Chip_MY9866_Common" | "Chip_LS9919" | "Chip_MBI5850" | "Chip_CNS7153" | "Chip_ICND2163" | "Chip_LS9917" | "Chip_MBI5325" | "Chip_MBI5325D_DPWM" | "Chip_SM16218" | "Chip_ICND2153" | "Chip_ICND2150" | "Chip_SCIC2023" | "Chip_MY9553" | "Chip_MY9553_Common" | "Chip_SM16169S" | "Chip_LS9920" | "Chip_LS9926" | "Chip_LS9935" | "Chip_ICND2076" | "Chip_HX8055" | "Chip_ICND2047" | "Chip_SUM2036" | "Chip_FM6648" | "Chip_FM6127" | "Chip_CNS7253" | "Chip_XM11920G" | "Chip_MBI5251" | "Chip_SCL8081" | "Chip_MBI5754" | "Chip_VOD5153" | "Chip_MBI5254" | "Chip_CS2017" | "Chip_CS2017S" | "Chip_FM6353" | "Chip_FM6356" | "Chip_YY6018" | "Chip_DP5525" | "Chip_MBI5864" | "Chip_CS2033" | "Chip_MBI5264" | "Chip_HS3257" | "Chip_LS9935B" | "Chip_LS9928" | "Chip_TLC6983" | "Chip_XM11201G" | "Chip_XM11202G" | "Chip_AXS6018" | "Chip_CS2066" | "Chip_SM16369" | "Chip_HX8864" | "Chip_FM6565" | "Chip_FM6555" | "Chip_MBI6033" | "Chip_SCL8061" | "Chip_RT5965" | "Chip_MY9758" | "Chip_ICND2210" | "Chip_FM6047" | "Chip_DM413" | "Chip_FM6363" | "Chip_ICND2159" | "Chip_RM1A00" | "Chip_RT7920" | "Chip_SM16017DS" | "Chip_LS9903" | "Chip_D8023" | "Chip_FM6518" | "Chip_MBI5268" | "Chip_TL3102UD" | "Chip_HBS1910" | "Chip_DP3264" | "Chip_DP3246" | "Chip_SM16389" | "Chip_D2618" | "Chip_MBI5252B" | "Chip_RZ" | "Chip_HX5011" | "Chip_ICND2126" | "Chip_MBI5253NewB" | "Chip_CFD455A" | "Chip_DP3230" | "Chip_LS9936" | "Chip_CFD435A" | "Chip_SM16380" | "Chip_MBI5034B" | "Chip_TL3103UD" | "Chip_HB200B" | "Chip_CFD555A" | "Chip_RT5938SS" | "Chip_LS9931" | "Chip_NT27002S" | "Chip_SM16388" | "Chip_DP3265" | "Chip_MBI5269" | "Chip_CFD335A" | "Chip_RT5938SS_Common" | "Chip_TBS3268" | "Chip_MTS01" | "Chip_XM11480G" | "Unknown", unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ConfigMode: t.Type<import("..").AutoAdjustFreqConfigModeEnum, "Addr_1B00" | "Addr_0200" | "Addr_1B00And0200" | "UnKnow", unknown>;
    AutoAdjustParamAddress: t.Type<number, number, unknown>;
    AutoAdjustParamDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8080AutoRefreshRataParam">;
}>]>]>;
export type ChipAutoAdjustRefreshRateParamBase = ChipICN2065AutoRefreshRataParam | ChipICND2055AutoRefreshRataParam | ChipMBI5850AutoRefreshRataParam | ChipSCL8080AutoRefreshRataParam;

import * as t from 'io-ts';
export declare const ChipSCL8060ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    EnLEDOpenShortDet: t.Type<number, number, unknown>;
    LongWaitB: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedDtVoltage: t.Type<boolean, boolean, unknown>;
    GreenDtVoltage: t.Type<boolean, boolean, unknown>;
    BlueDtVoltage: t.Type<boolean, boolean, unknown>;
    AnodeSideFastCharge: t.Type<number, number, unknown>;
    DeadTimeGCLKVsync: t.Type<number, number, unknown>;
    SLowFrame: t.Type<boolean, boolean, unknown>;
    OutPutCurRange: t.Type<boolean, boolean, unknown>;
    F50_25Hz: t.Type<boolean, boolean, unknown>;
    Dtbig: t.Type<boolean, boolean, unknown>;
    GclkSkewValue: t.Type<number, number, unknown>;
    EnLEDShortProtect: t.Type<boolean, boolean, unknown>;
    GclkE1A0A2Source: t.Type<boolean, boolean, unknown>;
    EnOverTemprDect: t.Type<boolean, boolean, unknown>;
    GrayScaleMode: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSCL8060ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:45870
 */
export declare const ChipSCL8060ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    EnLEDOpenShortDet: t.Type<number, number, unknown>;
    LongWaitB: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedDtVoltage: t.Type<boolean, boolean, unknown>;
    GreenDtVoltage: t.Type<boolean, boolean, unknown>;
    BlueDtVoltage: t.Type<boolean, boolean, unknown>;
    AnodeSideFastCharge: t.Type<number, number, unknown>;
    DeadTimeGCLKVsync: t.Type<number, number, unknown>;
    SLowFrame: t.Type<boolean, boolean, unknown>;
    OutPutCurRange: t.Type<boolean, boolean, unknown>;
    F50_25Hz: t.Type<boolean, boolean, unknown>;
    Dtbig: t.Type<boolean, boolean, unknown>;
    GclkSkewValue: t.Type<number, number, unknown>;
    EnLEDShortProtect: t.Type<boolean, boolean, unknown>;
    GclkE1A0A2Source: t.Type<boolean, boolean, unknown>;
    EnOverTemprDect: t.Type<boolean, boolean, unknown>;
    GrayScaleMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8060ExtendProperty">;
}>]>;
export interface ChipSCL8060ExtendProperty extends t.TypeOf<typeof ChipSCL8060ExtendProperty> {
}

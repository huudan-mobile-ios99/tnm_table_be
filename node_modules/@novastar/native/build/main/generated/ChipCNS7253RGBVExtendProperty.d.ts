import * as t from 'io-ts';
import { ChipCNS7253ExtendProperty } from './ChipCNS7253ExtendProperty';
export declare const ChipCNS7253RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    CNS7253_R: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_G: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_B: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_V: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCNS7253RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCNS7253.decompiled.cs:362
 */
export declare const ChipCNS7253RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    CNS7253_R: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_G: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_B: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    CNS7253_V: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        OPEN_DET: t.Type<boolean, boolean, unknown>;
        SCAN_LINE: t.Type<number, number, unknown>;
        PWM_OPT: t.Type<number, number, unknown>;
        GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
        PWM_GROUP: t.Type<number, number, unknown>;
        PWM_REV: t.Type<boolean, boolean, unknown>;
        PartNumPerRefValue: t.Type<number, number, unknown>;
        ADJ: t.Type<number, number, unknown>;
        IGAIN: t.Type<number, number, unknown>;
        ADJ_Enable: t.Type<boolean, boolean, unknown>;
        KeenPointVoltage: t.Type<number, number, unknown>;
        FirstLineOffsetCompensation: t.Type<number, number, unknown>;
        PWM_ALL: t.Type<number, number, unknown>;
        PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
        FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
        OPEN_RST: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7253RGBVExtendProperty">;
}>]>;
export interface ChipCNS7253RGBVExtendProperty extends t.TypeOf<typeof ChipCNS7253RGBVExtendProperty> {
    CNS7253_R?: ChipCNS7253ExtendProperty;
    CNS7253_G?: ChipCNS7253ExtendProperty;
    CNS7253_B?: ChipCNS7253ExtendProperty;
    CNS7253_V?: ChipCNS7253ExtendProperty;
}

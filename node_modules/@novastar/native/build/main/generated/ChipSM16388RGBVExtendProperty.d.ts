import * as t from 'io-ts';
import { ChipSM16388ExtendProperty } from './ChipSM16388ExtendProperty';
export declare const ChipSM16388RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    FrequencyDoublingEn: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16388RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16388.decompiled.cs:6903
 */
export declare const ChipSM16388RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel_1: t.Type<number, number, unknown>;
        ShadowEliminationTime_1: t.Type<number, number, unknown>;
        ShadowEliminationEnable_2: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_2: t.Type<number, number, unknown>;
        ShadowEliminationEnable_3: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel_3: t.Type<number, number, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        FirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        LowGrayCompsention1: t.Type<number, number, unknown>;
        LowGrayCompsention2: t.Type<number, number, unknown>;
        LowGrayHorizontalStripesImproved: t.Type<number, number, unknown>;
        CoupledEnhancementModeEn: t.Type<boolean, boolean, unknown>;
        CouplingOptimization_1: t.Type<number, number, unknown>;
        CouplingOptimization_2: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16388ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    FrequencyDoublingEn: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16388RGBVExtendProperty">;
}>]>;
export interface ChipSM16388RGBVExtendProperty extends t.TypeOf<typeof ChipSM16388RGBVExtendProperty> {
    RedExtendProperty?: ChipSM16388ExtendProperty;
    GreenExtendProperty?: ChipSM16388ExtendProperty;
    BlueExtendProperty?: ChipSM16388ExtendProperty;
    VRedExtendProperty?: ChipSM16388ExtendProperty;
}

import * as t from 'io-ts';
import { ChipFM6047ExtendProperty } from './ChipFM6047ExtendProperty';
export declare const ChipFM6047RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OpenTestModel: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6047RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6047.decompiled.cs:6347
 */
export declare const ChipFM6047RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OpenTestModel: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        OEWidth: t.Type<number, number, unknown>;
        OEDelay: t.Type<number, number, unknown>;
        Inflexion: t.Type<number, number, unknown>;
        HiddenMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        OpenTestEnable: t.Type<boolean, boolean, unknown>;
        ErrCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6047RGBVExtendProperty">;
}>]>;
export interface ChipFM6047RGBVExtendProperty extends t.TypeOf<typeof ChipFM6047RGBVExtendProperty> {
    RedProperty?: ChipFM6047ExtendProperty;
    GreenProperty?: ChipFM6047ExtendProperty;
    BlueProperty?: ChipFM6047ExtendProperty;
    VRedProperty?: ChipFM6047ExtendProperty;
}

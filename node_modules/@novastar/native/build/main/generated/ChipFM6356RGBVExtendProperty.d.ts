import * as t from 'io-ts';
import { ChipFM6356ExtendProperty } from './ChipFM6356ExtendProperty';
export declare const ChipFM6356RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6356RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6356.decompiled.cs:313
 */
export declare const ChipFM6356RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6356ExtendProperty">;
    }>]>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6356RGBVExtendProperty">;
}>]>;
export interface ChipFM6356RGBVExtendProperty extends t.TypeOf<typeof ChipFM6356RGBVExtendProperty> {
    RedProperty?: ChipFM6356ExtendProperty;
    GreenProperty?: ChipFM6356ExtendProperty;
    BlueProperty?: ChipFM6356ExtendProperty;
    VRedProperty?: ChipFM6356ExtendProperty;
}

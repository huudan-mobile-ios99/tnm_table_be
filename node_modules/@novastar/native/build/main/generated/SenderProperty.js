"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SenderProperty = void 0;
const t = __importStar(require("io-ts"));
const common = __importStar(require("../lib/common"));
const AudioControlMode_1 = require("./AudioControlMode");
const DviSelectMode_1 = require("./DviSelectMode");
const HDEnableMode_1 = require("./HDEnableMode");
const SourceSelectLoadMode_1 = require("./SourceSelectLoadMode");
const VedioSelectMode_1 = require("./VedioSelectMode");
/**
 * @category Codecs
 * @desc Codec for interface {@link SenderProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:53072
 */
exports.SenderProperty = t.intersection([
    t.type({
        FieldRate: common.withDefault(common.Numeric, 60),
        DviSelect: common.withDefault(DviSelectMode_1.DviSelectMode, 'DVI'),
        AudioControl: common.withDefault(AudioControlMode_1.AudioControlMode, 'External'),
        HDEnable: common.withDefault(HDEnableMode_1.HDEnableMode, 'Bit8'),
        LoadSelect: common.withDefault(SourceSelectLoadMode_1.SourceSelectLoadMode, 'BackUpLoad'),
        VedioSelect: common.withDefault(VedioSelectMode_1.VedioSelectMode, 'Manual'),
    }),
    t.partial({
        CompanyID: common.Int32,
        ModalID: common.Int32,
        SN: t.string,
        IsSerdes: common.Bool,
        Is3DEnable: common.Bool,
    }),
], 'SenderProperty');
//# sourceMappingURL=SenderProperty.js.map
import * as t from 'io-ts';
export declare const ChipTLC5948AExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RepeatDisplayMode: t.Type<boolean, boolean, unknown>;
    PWMDisplayMode: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    OpenCheckVoltageRed: t.Type<number, number, unknown>;
    OpenCheckVoltageGreen: t.Type<number, number, unknown>;
    OpenCheckVoltageBlue: t.Type<number, number, unknown>;
    ShortCheckVoltageRed: t.Type<number, number, unknown>;
    ShortCheckVoltageGreen: t.Type<number, number, unknown>;
    ShortCheckVoltageBlue: t.Type<number, number, unknown>;
    HiddenCheck: t.Type<number, number, unknown>;
    CheckLostGain: t.Type<number, number, unknown>;
    GlobalBrightRed: t.Type<number, number, unknown>;
    GlobalBrightGreen: t.Type<number, number, unknown>;
    GlobalBrightBlue: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC5948AExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:43609
 */
export declare const ChipTLC5948AExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RepeatDisplayMode: t.Type<boolean, boolean, unknown>;
    PWMDisplayMode: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    OpenCheckVoltageRed: t.Type<number, number, unknown>;
    OpenCheckVoltageGreen: t.Type<number, number, unknown>;
    OpenCheckVoltageBlue: t.Type<number, number, unknown>;
    ShortCheckVoltageRed: t.Type<number, number, unknown>;
    ShortCheckVoltageGreen: t.Type<number, number, unknown>;
    ShortCheckVoltageBlue: t.Type<number, number, unknown>;
    HiddenCheck: t.Type<number, number, unknown>;
    CheckLostGain: t.Type<number, number, unknown>;
    GlobalBrightRed: t.Type<number, number, unknown>;
    GlobalBrightGreen: t.Type<number, number, unknown>;
    GlobalBrightBlue: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC5948AExtendProperty">;
}>]>;
export interface ChipTLC5948AExtendProperty extends t.TypeOf<typeof ChipTLC5948AExtendProperty> {
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharByteSequenceType = exports.CharByteSequenceTypeEnum = void 0;
const EnumFromString_1 = __importDefault(require("../lib/common/EnumFromString"));
/** @category Enums */
var CharByteSequenceTypeEnum;
(function (CharByteSequenceTypeEnum) {
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["UpDown_LeftRight"] = 0] = "UpDown_LeftRight";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["UpDown_RightLeft"] = 1] = "UpDown_RightLeft";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["DownUp_LeftRight"] = 2] = "DownUp_LeftRight";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["DownUp_RightLeft"] = 3] = "DownUp_RightLeft";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["LeftRight_UpDown"] = 4] = "LeftRight_UpDown";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["LeftRight_DownUp"] = 5] = "LeftRight_DownUp";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["RightLeft_UpDown"] = 6] = "RightLeft_UpDown";
    CharByteSequenceTypeEnum[CharByteSequenceTypeEnum["RightLeft_DownUp"] = 7] = "RightLeft_DownUp";
})(CharByteSequenceTypeEnum = exports.CharByteSequenceTypeEnum || (exports.CharByteSequenceTypeEnum = {}));
/**
 * @category Codecs
 * @desc Codec for {@link CharByteSequenceTypeEnum}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:58660
 */
exports.CharByteSequenceType = (0, EnumFromString_1.default)(CharByteSequenceTypeEnum, 'CharByteSequenceType');
//# sourceMappingURL=CharByteSequenceType.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LEDModuleProperty = void 0;
const t = __importStar(require("io-ts"));
const common = __importStar(require("../lib/common"));
const ChipType_1 = require("./ChipType");
const DataDirectionType_1 = require("./DataDirectionType");
const DecodeType_1 = require("./DecodeType");
const MaxValue_1 = __importDefault(require("./MaxValue"));
const OEPolarityType_1 = require("./OEPolarityType");
const ScanType_1 = require("./ScanType");
const ScreenDriveType_1 = require("./ScreenDriveType");
/**
 * @category Codecs
 * @desc Codec for interface {@link LEDModuleProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:23639
 */
exports.LEDModuleProperty = t.intersection([
    t.type({
        ModuleVersion: common.string_20,
        ModulePixelCols: common.Int32_16,
        ModulePixelRows: common.Int32_8,
        ScanType: common.withDefault(ScanType_1.ScanType, 'Scan_2'),
        OEPolarity: common.withDefault(OEPolarityType_1.OEPolarityType, 'LowEnable'),
        DecType: common.withDefault(DecodeType_1.DecodeType, 'Decode138'),
        DataGroup: common.UInt8_2,
        TotalPointInTable: common.Int32_128,
        SerialColorNum: common.UInt8_3,
        SerialDotsNumPerColor: common.UInt8_1,
        ChipMinLawRepeatNumber: common.Int32_1,
        DriverChipType: common.withDefault(ChipType_1.ChipType, 'Chip_MBI5036'),
    }),
    t.partial({
        Name: t.string,
        DataDirectType: DataDirectionType_1.DataDirectionType,
        DataGroupSequence: common.buffer_MAX_MODULEDATAGROUP,
        ScanABCDCode: new common.BufferFromBase64('ScanABCDCode', MaxValue_1.default.MAX_SCAN),
        NewScanABCDCode: new common.BufferFromBase64('NewScanABCDCode', MaxValue_1.default.MAX_SCAN_NEW),
        ScanABCDCodeSpecila: new common.BufferFromBase64('ScanABCDCodeSpecila', MaxValue_1.default.MAX_SCANSPECIAL),
        RGBCode: common.buffer_COLOR_COUNT,
        PointTableData: new common.BufferFromBase64('PointTableData', 256),
        RowsCtrlByDataGroup: common.buffer_MAX_MODULEDATAGROUP,
        ScreenDriveType: ScreenDriveType_1.ScreenDriveType,
        LineBias: common.Int32,
        StartPositionOfDataGroup: common.buffer_MAX_MODULEDATAGROUP,
        SerialRGBCode: common.buffer_COLOR_COUNT,
        ChannelEnableData: common.buffer_2,
        ChannelData: common.buffer_2,
        ChipNumber: common.UInt8,
        DriverChipTypeExtend: common.UInt8,
        DriverTypePro: common.UInt8,
        DecodeTypePro: common.UInt8,
    }),
], 'LEDModuleProperty');
//# sourceMappingURL=LEDModuleProperty.js.map
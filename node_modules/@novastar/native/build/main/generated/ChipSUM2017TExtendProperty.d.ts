import * as t from 'io-ts';
export declare const ChipSUM2017TExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RSetVanishingCompensation: t.Type<number, number, unknown>;
    GSetVanishingCompensation: t.Type<number, number, unknown>;
    BSetVanishingCompensation: t.Type<number, number, unknown>;
    RSetVanishing: t.Type<number, number, unknown>;
    GSetVanishing: t.Type<number, number, unknown>;
    BSetVanishing: t.Type<number, number, unknown>;
    RConstantSettings: t.Type<number, number, unknown>;
    GConstantSettings: t.Type<number, number, unknown>;
    BConstantSettings: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSUM2017TExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:49789
 */
export declare const ChipSUM2017TExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RSetVanishingCompensation: t.Type<number, number, unknown>;
    GSetVanishingCompensation: t.Type<number, number, unknown>;
    BSetVanishingCompensation: t.Type<number, number, unknown>;
    RSetVanishing: t.Type<number, number, unknown>;
    GSetVanishing: t.Type<number, number, unknown>;
    BSetVanishing: t.Type<number, number, unknown>;
    RConstantSettings: t.Type<number, number, unknown>;
    GConstantSettings: t.Type<number, number, unknown>;
    BConstantSettings: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2017TExtendProperty">;
}>]>;
export interface ChipSUM2017TExtendProperty extends t.TypeOf<typeof ChipSUM2017TExtendProperty> {
}

import * as t from 'io-ts';
import { ChipCFD435AExtendProperty } from './ChipCFD435AExtendProperty';
export declare const ChipCFD435ARGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCFD435ARGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCFD435A.decompiled.cs:6479
 */
export declare const ChipCFD435ARGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        LineBlankStrength: t.Type<number, number, unknown>;
        LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
        CouplingStrengthAdjust: t.Type<number, number, unknown>;
        OpenTestPointAdjust: t.Type<number, number, unknown>;
        CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
        LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
        CouplingRangeAdjust: t.Type<number, number, unknown>;
        PerDriverEnable: t.Type<boolean, boolean, unknown>;
        OpenProtectEnable: t.Type<boolean, boolean, unknown>;
        ScanMode: t.Type<number, number, unknown>;
        CurrentGear: t.Type<number, number, unknown>;
        LowGrayCompsentionStrength: t.Type<number, number, unknown>;
        OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
        CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
        ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
        DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
        LineEliminationLength: t.Type<number, number, unknown>;
        OutputResponse: t.Type<number, number, unknown>;
        PerDriverMode: t.Type<number, number, unknown>;
        PerDriverTimeSetting: t.Type<number, number, unknown>;
        OpentestThresholdValue: t.Type<number, number, unknown>;
        LowGrayGoodLevel: t.Type<number, number, unknown>;
        SetWeakup: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCFD435AExtendProperty">;
    }>]>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCFD435ARGBVExtendProperty">;
}>]>;
export interface ChipCFD435ARGBVExtendProperty extends t.TypeOf<typeof ChipCFD435ARGBVExtendProperty> {
    RedProperty?: ChipCFD435AExtendProperty;
    GreenProperty?: ChipCFD435AExtendProperty;
    BlueProperty?: ChipCFD435AExtendProperty;
    VRedProperty?: ChipCFD435AExtendProperty;
}

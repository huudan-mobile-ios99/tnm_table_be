import * as t from 'io-ts';
import { ChipHX8864ExtendProperty } from './ChipHX8864ExtendProperty';
export declare const ChipHX8864RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    GammaTable: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    OpenCircuitDetctEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipHX8864RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHX8864.decompiled.cs:7816
 */
export declare const ChipHX8864RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        FifthRegValue: t.Type<number, number, unknown>;
        SixthRegValue: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGreyOrderOptModel: t.Type<number, number, unknown>;
        LowGreyOrderOpt2: t.Type<number, number, unknown>;
        CouplingStartTime: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        FirstLineCompensationTime: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        FirstLineCompensationLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        LowGrayColorCompensation: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingReguEnable: t.Type<boolean, boolean, unknown>;
        CouplingEnhan: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
    }>]>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    GammaTable: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    OpenCircuitDetctEnable: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8864RGBVExtendProperty">;
}>]>;
export interface ChipHX8864RGBVExtendProperty extends t.TypeOf<typeof ChipHX8864RGBVExtendProperty> {
    RedProperty?: ChipHX8864ExtendProperty;
    GreenProperty?: ChipHX8864ExtendProperty;
    BlueProperty?: ChipHX8864ExtendProperty;
    VRedProperty?: ChipHX8864ExtendProperty;
}

import * as t from 'io-ts';
export declare const ChipSUM2030ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenCircuitProtection: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsCustomSecondChipReg: t.Type<boolean, boolean, unknown>;
    RedRegLowValue: t.Type<number, number, unknown>;
    RedRegHighValue: t.Type<number, number, unknown>;
    GreenRegLowValue: t.Type<number, number, unknown>;
    GreenRegHighValue: t.Type<number, number, unknown>;
    BlueRegLowValue: t.Type<number, number, unknown>;
    BlueRegHighValue: t.Type<number, number, unknown>;
    VRedRegLowValue: t.Type<number, number, unknown>;
    VRedRegHighValue: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSUM2030ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:47546
 */
export declare const ChipSUM2030ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenCircuitProtection: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsCustomSecondChipReg: t.Type<boolean, boolean, unknown>;
    RedRegLowValue: t.Type<number, number, unknown>;
    RedRegHighValue: t.Type<number, number, unknown>;
    GreenRegLowValue: t.Type<number, number, unknown>;
    GreenRegHighValue: t.Type<number, number, unknown>;
    BlueRegLowValue: t.Type<number, number, unknown>;
    BlueRegHighValue: t.Type<number, number, unknown>;
    VRedRegLowValue: t.Type<number, number, unknown>;
    VRedRegHighValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2030ExtendProperty">;
}>]>;
export interface ChipSUM2030ExtendProperty extends t.TypeOf<typeof ChipSUM2030ExtendProperty> {
}

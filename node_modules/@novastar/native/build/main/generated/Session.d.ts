/// <reference types="node" />
/// <reference types="node" />
/**
 * @see Automatically generated from ../decompiled/Nova.Equipment.Protocol.TGProtocol.decompiled.cs:3218
 */
import { Buffer } from 'buffer';
import { Duplex } from 'stream';
import { Connection, Session } from '@novastar/codec';
import { AudioControlModeEnum } from './AudioControlMode';
import { AudioFrequencyModeEnum } from './AudioFrequencyMode';
import { BaudRateTypeEnum } from './BaudRateType';
import { CardTypeEnum } from './CardType';
import { ChipTypeEnum } from './ChipType';
import { CoefficientSourceTypeEnum } from './CoefficientSourceType';
import { CorrectTypeEnum } from './CorrectType';
import { DVIEncryptTypeEnum } from './DVIEncryptType';
import { DataDirectionTypeEnum } from './DataDirectionType';
import { DecodeTypeEnum } from './DecodeType';
import { DviSelectModeEnum } from './DviSelectMode';
import { GhostRemoveModeTypeEnum } from './GhostRemoveModeType';
import { GrayModeTypeEnum } from './GrayModeType';
import { GrayRealizeTypeEnum } from './GrayRealizeType';
import { HDEnableModeEnum } from './HDEnableMode';
import { HDRTypeEnum } from './HDRType';
import { HLGModelEnum } from './HLGModel';
import { HWBrightAdjustTypeEnum } from './HWBrightAdjustType';
import { LowDelayModeEnum } from './LowDelayMode';
import { ModulationModeTypeEnum } from './ModulationModeType';
import { ModuleCascadeDiretionEnum } from './ModuleCascadeDiretion';
import { OEPolarityTypeEnum } from './OEPolarityType';
import { OpticalWorkModeEnum } from './OpticalWorkMode';
import { PowerCtrlModeEnum } from './PowerCtrlMode';
import { PowerOperateTypeEnum } from './PowerOperateType';
import { ResetAndSwitchCommandTypeEnum } from './ResetAndSwitchCommandType';
import { ScanTypeEnum } from './ScanType';
import { ScreenDriveTypeEnum } from './ScreenDriveType';
import { ShowTypeWhenPortDisconnectedEnum } from './ShowTypeWhenPortDisconnected';
import { SmartSetModeEnum } from './SmartSetMode';
import { SourceSelectLoadModeEnum } from './SourceSelectLoadMode';
import { SourceSelectModeEnum } from './SourceSelectMode';
import { StandbyModeEnum } from './StandbyMode';
import { TestModeEnum } from './TestMode';
import { VedioSelectModeEnum } from './VedioSelectMode';
import { VirtualModeTypeEnum } from './VirtualModeType';
export default class SessionAPI<S extends Duplex> implements Session<S> {
    #private;
    readonly connection: Connection<S>;
    constructor(connection: Connection<S>);
    get isConnected(): boolean;
    close(): boolean;
    pushTimeout(timeout: number): void;
    popTimeout(): number;
    ReadDeviceType(addr: number): Promise<number>;
    ReadCompanyID(addr: number): Promise<number>;
    ReadControllerModelId(addr: number): Promise<number>;
    ReadCommunicationProtocol(addr: number): Promise<number>;
    ReadLanguageLibraryFlag(addr: number): Promise<number>;
    ReadControllerSnHigh(addr: number): Promise<Buffer>;
    SetControllerSnHigh(addr: number, controllerSnHigh: number[] | Buffer): Promise<void>;
    ReadLicenseInfo(addr: number): Promise<Buffer>;
    ReadSortOrder(addr: number): Promise<number>;
    SetSortOrder(addr: number, bBroadcast: boolean, sortOrder: number): Promise<void>;
    ReadSaveSendCardsParameters(addr: number): Promise<number>;
    SetSaveSendCardsParameters(addr: number, bBroadcast: boolean, saveSendCardsParameters: number): Promise<void>;
    ReadReturnFactoryValues(addr: number): Promise<number>;
    SetReturnFactoryValues(addr: number, bBroadcast: boolean, returnFactoryValues: number): Promise<void>;
    ReadTestPoint(addr: number): Promise<number>;
    SetTestPoint(addr: number, bBroadcast: boolean, testPoint: number): Promise<void>;
    ReadSenderFunctionInfo(addr: number): Promise<Buffer>;
    ReadSenderABLInfo(addr: number): Promise<Buffer>;
    SetSenderABLParmsState(addr: number, bBroadcast: boolean, info: number[] | Buffer): Promise<void>;
    SetSenderScrenPeakLum(addr: number, bBroadcast: boolean, info: number[] | Buffer): Promise<void>;
    SetSender_ImageEnState(addr: number, bBroadcast: boolean, info: number): Promise<void>;
    SetSender_EDEState(addr: number, bBroadcast: boolean, info: number): Promise<void>;
    ReadControllerPhysical(addr: number): Promise<number>;
    ReadTemperature(addr: number): Promise<number>;
    ReadHumidity(addr: number): Promise<number>;
    ReadFan(addr: number): Promise<number>;
    SetFieldRateMode(addr: number, bBroadcast: boolean, fieldRateMode: number): Promise<void>;
    ReadFieldRateMode(addr: number): Promise<number>;
    ReadFieldRate(addr: number): Promise<number>;
    SetFieldRate(addr: number, bBroadcast: boolean, setFieldRate: number): Promise<void>;
    ReadAudioControl(addr: number): Promise<number>;
    SetAudioControl(addr: number, bBroadcast: boolean, audioControl: number): Promise<void>;
    SetAudioControl_1(addr: number, bBroadcast: boolean, audioCtrlMode: AudioControlModeEnum): Promise<void>;
    Sender_ReadActiveSourceType(addr: number): Promise<number>;
    Sender_SetSourceType(addr: number, bBroadcast: boolean, sourceMode: SourceSelectModeEnum): Promise<void>;
    Sender_ReadDVIModeSettingType(addr: number): Promise<number>;
    ReadIoControl(addr: number): Promise<number>;
    SetIoControl(addr: number, bBroadcast: boolean, ioControl: number): Promise<void>;
    ReadSenderBrightnessLux(addr: number): Promise<number>;
    ReadRtco(addr: number): Promise<Buffer>;
    SetRtco(addr: number, bBroadcast: boolean, rtco: number[] | Buffer): Promise<void>;
    ReadIsSerdes(addr: number): Promise<number>;
    SetIsSerdes(addr: number, bBroadcast: boolean, IsSerdes: boolean): Promise<void>;
    ReadIsHasDVI(addr: number): Promise<number>;
    ReadMasterOrSlave(addr: number): Promise<number>;
    SetMasterOrSlave(addr: number, bBroadcast: boolean, masterOrSlaveBytes: number[] | Buffer): Promise<void>;
    ReadMasterOrSlaveNext(addr: number): Promise<number>;
    SetMasterOrSlaveNext(addr: number, bBroadcast: boolean, masterOrSlaveBytes: number[] | Buffer): Promise<void>;
    ReadMasterOrSlaveAllData(addr: number): Promise<Buffer>;
    SetMasterOrSlave_1: () => void;
    SetMasterOrSlaveNew16Addr(addr: number, bBroadcast: boolean, masterOrSlaveBytes: number[] | Buffer): Promise<void>;
    SetMasterOrSlaveNew32Addr(addr: number, bBroadcast: boolean, masterOrSlaveBytes: number[] | Buffer): Promise<void>;
    ReadDVI0FieldRate(addr: number): Promise<number>;
    ReadDVI1FieldRate(addr: number): Promise<number>;
    ReadHoldTime(addr: number): Promise<number>;
    SetHoldTime(addr: number, bBroadcast: boolean, holdTimeSec: number): Promise<void>;
    ReadIsHasGenLock(addr: number): Promise<number>;
    ReadDviMode(addr: number): Promise<number>;
    SetDviMode(addr: number, bBroadcast: boolean, dviMode: number): Promise<void>;
    SetDviMode_1(addr: number, bBroadcast: boolean, dviMode: VedioSelectModeEnum): Promise<void>;
    ReadDviSelect(addr: number): Promise<number>;
    SetDviSelect(addr: number, bBroadcast: boolean, dviSelect: number): Promise<void>;
    SetDviSelect_1(addr: number, bBroadcast: boolean, dviSelectMode: DviSelectModeEnum): Promise<void>;
    ReadSourceSingalState(addr: number): Promise<number>;
    ReadSelectSingalType(addr: number): Promise<number>;
    ReadDviWidth(addr: number, index: number): Promise<number>;
    SetDviWidth(addr: number, bBroadcast: boolean, dviWidth: number, index: number): Promise<void>;
    SetRealDviWidth(addr: number, bBroadcast: boolean, dviWidth: number): Promise<void>;
    ReadDviHeight(addr: number, index: number): Promise<number>;
    SetDviHeight(addr: number, bBroadcast: boolean, dvi0Height: number, index: number): Promise<void>;
    ReadDviOffsetX(addr: number, index: number): Promise<number>;
    SetDviOffsetX(addr: number, bBroadcast: boolean, dviOffsetX: number, index: number): Promise<void>;
    ReadDviOffsetY(addr: number, index: number): Promise<number>;
    SetDviOffsetY(addr: number, bBroadcast: boolean, dviOffsetY: number, index: number): Promise<void>;
    ReadDvi1Dvi0OffsetX(addr: number): Promise<number>;
    SetDvi1Dvi0OffsetX(addr: number, bBroadcast: boolean, dvi1Dvi0OffsetX: number): Promise<void>;
    ReadDvi1Dvi0OffsetY(addr: number): Promise<number>;
    SetDvi1Dvi0OffsetY(addr: number, bBroadcast: boolean, dvi1Dvi0OffsetY: number): Promise<void>;
    SetSenderCardSmartSetMode(addr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadPortEnable(addr: number, index: number): Promise<number>;
    SetPortEnable(addr: number, bBroadcast: boolean, portEnable: number, index: number): Promise<void>;
    ReadNewPortEnable(addr: number, index: number): Promise<number>;
    SetNewPortEnable(addr: number, bBroadcast: boolean, portEnable: number, index: number): Promise<void>;
    ReadAllPortEnable(addr: number): Promise<Buffer>;
    SetPortEnable_1(addr: number, bBroadcast: boolean, portEnable: number[] | Buffer, portIndex: number): Promise<void>;
    ReadPortWidth(addr: number, index: number): Promise<number>;
    SetPortWidth(addr: number, bBroadcast: boolean, portWidth: number, index: number): Promise<void>;
    ReadAllPortWidth(addr: number): Promise<Buffer>;
    ReadPortHeight(addr: number, index: number): Promise<number>;
    SetPortHeight(addr: number, bBroadcast: boolean, portHeight: number, index: number): Promise<void>;
    ReadAllPortHeight(addr: number): Promise<Buffer>;
    ReadPortOffsetX(addr: number, index: number): Promise<number>;
    SetPortOffsetX(addr: number, bBroadcast: boolean, portOffsetX: number, index: number): Promise<void>;
    ReadAllPortOffsetX(addr: number, index: number): Promise<Buffer>;
    ReadPortOffsetY(addr: number, index: number): Promise<number>;
    SetPortOffsetY(addr: number, bBroadcast: boolean, portOffsetY: number, index: number): Promise<void>;
    ReadAllPortOffsetY(addr: number): Promise<Buffer>;
    SetFreeSenderPorts(senderAddr: number, bBroadcast: boolean, datas: number[] | Buffer, portInde: number, freeIndex: number): Promise<void>;
    SetSenderVideoEnclosingMode(senderindex: number, width: number, height: number): Promise<void>;
    ReadScaleEn(addr: number): Promise<number>;
    SetScaleEn(addr: number, bBroadcast: boolean, isEnableScale: boolean): Promise<void>;
    ReadColScalePara(addr: number): Promise<number>;
    SetColScalePara(addr: number, bBroadcast: boolean, colScalePar: number): Promise<void>;
    ReadEndColScalePos(addr: number): Promise<number>;
    SetEndColScalePos(addr: number, bBroadcast: boolean, endColScalePos: number): Promise<void>;
    ReadRowScalePara(addr: number): Promise<number>;
    SetRowScalePara(addr: number, bBroadcast: boolean, rowScalePar: number): Promise<void>;
    ReadEndRowScalePos(addr: number): Promise<number>;
    SetEndRowScalePos(addr: number, bBroadcast: boolean, endRowScalePos: number): Promise<void>;
    ReadAllScaleInfo(addr: number): Promise<Buffer>;
    SetAllScaleInfo: () => void;
    WriteDviOf4KInfo(addr: number, bBroadcast: boolean, dviInfoBytes: number[] | Buffer): Promise<void>;
    ReadDviOf4KInfo(addr: number): Promise<Buffer>;
    WriteDviOf1600Info: () => void;
    SetPortOfDVI(addr: number, bBroadcast: boolean, dviIndex: number, portIndex: number): Promise<void>;
    WriteDviOf1600OffestInfo: () => void;
    ReadDviOf1600OffestInfo(addr: number): Promise<Buffer>;
    WriteDVIWHOf1600Info: () => void;
    SetBackUpOrRestoreCmd(addr: number, bBroadcast: boolean, writeData: number): Promise<void>;
    ReadBackUpFinishFlag(addr: number): Promise<number>;
    ReadBackUpFileHeader(addr: number): Promise<Buffer>;
    WriteBackUpFileHeader(addr: number, bBroadcast: boolean, writeData: number[] | Buffer): Promise<void>;
    SetRestoreFinishFlag(addr: number, bBroadcast: boolean, writeData: number): Promise<void>;
    ReadRestoreFinishFlag(addr: number, length: number): Promise<Buffer>;
    ReadHWRestoreFinishFlag(addr: number, length: number): Promise<Buffer>;
    ReadBackUpParamFromSender(addr: number, length: number): Promise<Buffer>;
    RestoreSenderConfig(addr: number, bBroadcast: boolean, writeData: number[] | Buffer): Promise<void>;
    ReadEthernetPortScannerX(addr: number, portIndex: number, scannerIndex: number): Promise<number>;
    SetEthernetPortScannerX(addr: number, bBroadcast: boolean, ethernetPortScannerX: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadEthernetPortScannerY(addr: number, portIndex: number, scannerIndex: number): Promise<number>;
    SetEthernetPortScannerY(addr: number, bBroadcast: boolean, ethernetPortScannerY: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadEthernetPortScannerXY(addr: number, portIndex: number, scannerIndex: number): Promise<Buffer>;
    SetEthernetPortScannerXY(addr: number, bBroadcast: boolean, ethernetPortScannerX: number, ethernetPortScannerY: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadNumberOfCardOrScanBoardInPort(addr: number, portIndex: number, cardType: CardTypeEnum): Promise<number>;
    SetNumberOfCardOrScanBoardInPort(addr: number, bBroadcast: boolean, number: number, portIndex: number, cardType: CardTypeEnum): Promise<void>;
    SetFreeVirtualNetworkPort(addr: number, bBroadcast: boolean, number: number, portIndex: number): Promise<void>;
    ReadVirtualEnable(addr: number): Promise<number>;
    SetVirtualEnable(addr: number, bBroadcast: boolean, virtualEnable: VirtualModeTypeEnum): Promise<void>;
    ReadDisplayMode(addr: number): Promise<number>;
    ReadHDEnable(addr: number): Promise<number>;
    SetHDEnable(addr: number, bBroadcast: boolean, hdEnable: HDEnableModeEnum): Promise<void>;
    SetHDEnableEx(addr: number, bBroadcast: boolean, hdEnable: number): Promise<void>;
    ReadLoadMode(addr: number): Promise<number>;
    SetLoadMode(addr: number, bBroadcast: boolean, loadMode: SourceSelectLoadModeEnum): Promise<void>;
    ReadMirrorMode(addr: number, isPreposition: boolean): Promise<number>;
    SetMirrorMode(addr: number, bBroadcast: boolean, mirrorModeData: number, isPreposition: boolean): Promise<void>;
    ReadLowDelayMode(addr: number): Promise<number>;
    SetLowDelayMode(addr: number, bBroadcast: boolean, lowDelayMode: LowDelayModeEnum): Promise<void>;
    ReadCabinetRotation(addr: number): Promise<number>;
    SetAutoScreen(addr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_McuProgramLength(addr: number): Promise<number>;
    SetSender_McuProgramLength(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_McuProgramLength: number): Promise<void>;
    ReadSender_McuProgramEdition(addr: number): Promise<number>;
    SetSender_McuProgramEdition(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_McuProgramEdition: number): Promise<void>;
    ReadSender_McuProgramRemarks(addr: number): Promise<Buffer>;
    SetSender_McuProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_McuProgramRemarks: number[] | Buffer): Promise<void>;
    ReadSender_McuProgramInfo(addr: number): Promise<Buffer>;
    SetSender_McuProgramInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_McuProgramRemarks: number[] | Buffer): Promise<void>;
    SetSender_Reset(): Promise<void>;
    SetSender_Reset_1(addr: number, bBroadcast: boolean): Promise<void>;
    SetSender_EncryptHandShake: () => void;
    SetSender_McuUpdateProgrammFinish(addr: number, bBroadcast: boolean, updateFinishData: number): Promise<void>;
    ReadSender_FPGAProgramLength(addr: number): Promise<number>;
    SetSender_FPGAProgramLength(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_FPGAProgramLength: number): Promise<void>;
    ReadSender_FPGAProgramEdition(addr: number): Promise<number>;
    SetSender_FPGAProgramEdition(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_FPGAProgramEdition: number): Promise<void>;
    ReadSender_FPGAProgramRemarks(addr: number): Promise<Buffer>;
    SetSender_FPGAProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_FPGAProgramRemarks: number[] | Buffer): Promise<void>;
    ReadSender_FPGAProgramInfo(addr: number): Promise<Buffer>;
    SetSender_FPGAProgramInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sender_FPGAProgramRemarks: number[] | Buffer): Promise<void>;
    ReadSender_SoftwareSpace(addr: number, dataLength: number, addrOffset: number): Promise<Buffer>;
    SetSender_SoftwareSpace(addr: number, bBroadcast: boolean, sender_SoftwareSpace: number[] | Buffer, dataLength: number, addrOffset: number): Promise<void>;
    ReadSender_EDIDSpace(addr: number): Promise<Buffer>;
    SetSender_EDIDSpace(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, Passward: number[] | Buffer): Promise<void>;
    ReadSender_EdidInterlacedFlag(addr: number): Promise<number>;
    ReadSender_ScreenConfigSpace(addr: number): Promise<Buffer>;
    SetSender_ScreenConfigSpace(addr: number, bBroadcast: boolean, screenConfig: number[] | Buffer): Promise<void>;
    ReadSender_ScreenConfigFlagSpace(addr: number): Promise<number>;
    SetSender_ScreenConfigFlagSpace(addr: number, bBroadcast: boolean, screenConfig: number[] | Buffer): Promise<void>;
    ReadSender_RedundantStateSpace(addr: number): Promise<Buffer>;
    SetSender_RedundantStateSpace(addr: number, bBroadcast: boolean, redundantState: number[] | Buffer): Promise<void>;
    ReadSender_RedundantStateNewSpace(addr: number): Promise<Buffer>;
    SetSender_RedundantStateNewSpace(addr: number, bBroadcast: boolean, redundantState: number[] | Buffer): Promise<void>;
    ReadSender_RedundantStateSpaceAllData(addr: number): Promise<Buffer>;
    ReadSender_RedundantStateOver32SpaceAllData(addr: number): Promise<Buffer>;
    ReadSender_Enable3DStateSpace(addr: number): Promise<number>;
    SetSender_Enable3DStateSpace(addr: number, bBroadcast: boolean, enable3DState: number): Promise<void>;
    ReadSender_ThreeDPerSpace(addr: number): Promise<number>;
    SetSender_ThreeDPerSpace(addr: number, bBroadcast: boolean, enable3DState: number[] | Buffer): Promise<void>;
    SetFlagEnableAccelerate(addr: number, bBroadcast: boolean, isOpen: boolean): Promise<void>;
    ReadSender_OpticalWorkMode(addr: number): Promise<number>;
    SetSender_OpticalWorkMode(addr: number, bBroadcast: boolean, opticalWorkMode: OpticalWorkModeEnum): Promise<void>;
    ReadSender_HDRState(addr: number): Promise<number>;
    ReadSender_HDRInfo(addr: number): Promise<number>;
    SetSender_HDRState(addr: number, bBroadcast: boolean, enableHDRState: boolean): Promise<void>;
    ReadSender_HDR10MinLum(addr: number): Promise<number>;
    SetSender_HDR10MinLum(addr: number, bBroadcast: boolean, HDR10MinLum: number): Promise<void>;
    SetSender_ScreenPeakLight(addr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetSender_AmbientLight(addr: number, bBroadcast: boolean, HDRAmbientLight: number): Promise<void>;
    SetSender_HLGModel(addr: number, bBroadcast: boolean, hLGModel: HLGModelEnum): Promise<void>;
    ReadSender_HLGModel(addr: number): Promise<number>;
    SetSender_GrayDepthAndBit(addr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetSender_SetHDRType(addr: number, bBroadcast: boolean, hDRType: HDRTypeEnum): Promise<void>;
    ReadSender_IsSupportBackUpTestMode(addr: number): Promise<number>;
    SetSender_BackUpTestMode(addr: number, bBroadcast: boolean, backUpTestMode: boolean): Promise<void>;
    ReadSender_ComplexCfgScreenFlagSpace(addr: number): Promise<number>;
    SetSender_ComplexCfgScreenFlagSpace(addr: number, bBroadcast: boolean, IsComplexCfgScreen: boolean): Promise<void>;
    ReadSender_AuthorizeTime(addr: number): Promise<number>;
    SetSender_AuthorizeTime(addr: number, bBroadcast: boolean, authorizeTimeBytes: number[] | Buffer): Promise<void>;
    ReadSender_AuthorizePassward(addr: number): Promise<Buffer>;
    SetSender_AuthorizePassward(addr: number, bBroadcast: boolean, Passward: number[] | Buffer): Promise<void>;
    ReadSender_EnableProgramBright(addr: number): Promise<number>;
    SetSender_EnableProgramBright(addr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    SetSender_EnableProgramBright_1(addr: number, bBroadcast: boolean, data: number): Promise<void>;
    ReadSender_HWProBrightSegemntCnt(addr: number): Promise<number>;
    SetSender_HWProBrightSegemntCnt(addr: number, bBroadcast: boolean, segementCnt: number): Promise<void>;
    ReadSender_EnablePartBrightOfHWPro(addr: number): Promise<number>;
    SetSender_EnablePartBrightOfHWPro(addr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    ReadSender_EnableGammaOfHWPro(addr: number): Promise<number>;
    SetSender_EnableGammaOfHWPro(addr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    ReadSender_EnableGainOfHWPro(addr: number): Promise<number>;
    SetSender_EnableGainOfHWPro(addr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    ReadSender_EnableAndSegementOfHWPro(addr: number): Promise<Buffer>;
    SetSender_EnableAndSegementOfHWPro: () => void;
    SetSender_HWProgramBrightInfo: () => void;
    SetSender_HWProgramAllCtrlInfo: () => void;
    ReadSender_HWProgramAllInfo(addr: number): Promise<Buffer>;
    ReadSender_EnableSmartBright(addr: number, dataLength: number): Promise<Buffer>;
    SetSender_HWSmartBright(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    SetHWSmartBrightIsEnable(addr: number, bBoradcast: boolean, isEnable: boolean): Promise<void>;
    ReadSender_HWBrightAdjustType(addr: number): Promise<number>;
    SetSender_HWBrightAdjustType(addr: number, bBroadcast: boolean, enableAutoData: HWBrightAdjustTypeEnum): Promise<void>;
    ReadSender_EnableReadHWAutoBright(addr: number): Promise<number>;
    SetSender_EnableHWAutoBright(addr: number, bBroadcast: boolean, enableAutoData: boolean): Promise<void>;
    ReadSender_ReadHWAutoBright(addr: number): Promise<Buffer>;
    SetSender_WriteHWAutoBright: () => void;
    ReadSender_EnableDVIEncrypt(addr: number): Promise<number>;
    SetSender_EnableDVIEncrypt(addr: number, bBroadcast: boolean, encryptType: DVIEncryptTypeEnum): Promise<void>;
    Sender_UnLock(addr: number, bBroadcast: boolean, passWord: number): Promise<void>;
    Scaner_UnLock(addr: number, bBroadcast: boolean, passWord: number): Promise<void>;
    ReadUseRecordInfo(addr: number, offaddr: number): Promise<Buffer>;
    ReadSender_EncryptKeyLength(addr: number): Promise<number>;
    SetSender_EncryptKeyLength(addr: number, bBroadcast: boolean, keyLength: number): Promise<void>;
    ReadSender_EncryptKey(addr: number): Promise<Buffer>;
    SetSender_EncryptKey(addr: number, bBroadcast: boolean, key: number[] | Buffer): Promise<void>;
    ReadSender_EncryptKeyRegion(addr: number): Promise<Buffer>;
    SetSender_EncryptKeyRegion: () => void;
    ReadSender_EncryptPassword(addr: number): Promise<Buffer>;
    SetSender_EncryptPassword(addr: number, bBroadcast: boolean, Passward: number[] | Buffer): Promise<void>;
    ReadSender_DVIResolutionWidth(addr: number): Promise<number>;
    SetSender_DVIResolutionWidth(addr: number, bBroadcast: boolean, dviWidth: number): Promise<void>;
    ReadSender_DVIResolutionHeight(addr: number): Promise<number>;
    SetSender_DVIResolutionHeight(addr: number, bBroadcast: boolean, dviHeight: number): Promise<void>;
    ReadSender_DVIRows(addr: number): Promise<number>;
    SetSender_DVIRows(addr: number, bBroadcast: boolean, dviRows: number): Promise<void>;
    ReadSender_DVICols(addr: number): Promise<number>;
    SetSender_DVICols(addr: number, bBroadcast: boolean, dviCols: number): Promise<void>;
    ReadSender_EncryptAllInfo(addr: number): Promise<Buffer>;
    SetSender_EncryptAllInfo: () => void;
    SetSender_ResetDVIEncrypt: () => void;
    SetSender_10bitGammaValue(addr: number, bBroadcast: boolean, gammaValue: number): Promise<void>;
    ReadSender_10bitGammaValue(addr: number): Promise<number>;
    SetSender_12bitGammaValue(addr: number, bBroadcast: boolean, gammaValue: number): Promise<void>;
    ReadSender_12bitGammaValue(addr: number): Promise<number>;
    ReadDoorSwitchDetection(addr: number): Promise<number>;
    SetDoorSwitchDetection(addr: number, bBroadcast: boolean, data: number): Promise<void>;
    SetShowNormal(addr: number, bBroadcast: boolean, data: number): Promise<void>;
    SetLCDSwitch(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, tem: number): Promise<void>;
    ReadLCDSwitch(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetWorkModeIn660Pro(addr: number, bBroadcast: boolean, data: number): Promise<void>;
    ReadWorkModeIn660Pro(addr: number): Promise<number>;
    ReadVirtualMap(addr: number): Promise<number>;
    SetVirtualMap(addr: number, bBroadcast: boolean, virtualMap: number): Promise<void>;
    Set660ConfigFileSendOver(addr: number, bBroadcast: boolean, data: number): Promise<void>;
    ReadSender_VideoScalingMode(addr: number): Promise<number>;
    SetSender_VideoScalingMode(addr: number, bBoradcast: boolean, scalingMode: number): Promise<void>;
    ReadSender_VideoScreenOffset(addr: number): Promise<number>;
    SetSender_VideoScreenOffset(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_VideoInputCut(addr: number): Promise<Buffer>;
    SetSender_VideoInputCut(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_VideoWindowRect(addr: number): Promise<Buffer>;
    SetSender_VideoWindowRect(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_VideoMosaicData(addr: number): Promise<Buffer>;
    SetSender_VideoMosaicData(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_InputVedioSource(addr: number): Promise<number>;
    SetSender_InputVedioSource(addr: number, bBoradcast: boolean, data: number): Promise<void>;
    ReadSender_VideoInputSource(addr: number): Promise<Buffer>;
    SetSender_VideoInputSource(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_VideoRealDvi(addr: number): Promise<Buffer>;
    ReadSender_EnableSyncAndTotalData(addr: number): Promise<Buffer>;
    SetSender_EnableSyncAndTotalData(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    SetSoftToHWHeartbeatTime(addr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_HardWareBackupInfos(addr: number, dataLength: number): Promise<Buffer>;
    SetSender_HardWareBackupInfos(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadSender_ScreenAdjustBrightFlag(addr: number): Promise<number>;
    SetSender_ScreenAdjustBrightCommand(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    Read_EquipmentIP(addr: number): Promise<Buffer>;
    Set_EquipmentIP(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    Read_VideoSourceState(addr: number): Promise<Buffer>;
    ReadSender_HWScreenDisplayFlag(addr: number): Promise<number>;
    WriteSender_HWScreenDisplayInfo(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteSender_HWScreenData(addr: number, bBoradcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadMasterOrSlaveState(addr: number): Promise<number>;
    ReadSenderCPUIdData(addr: number): Promise<Buffer>;
    ReadSenderDVIStatus(addr: number): Promise<number>;
    SetMasterOrSlaveState: () => void;
    SetSender_AllFileLength: () => void;
    SetSender_CurSendFileLength: () => void;
    SetSender5C_FPGA: () => void;
    SetSender4C_FPGA: () => void;
    SetSender8028_FPGA: () => void;
    SetSender207_Mcu: () => void;
    SetSender_ImageFileData: () => void;
    SetSender_WordStockFileData: () => void;
    SetSender_WebpageFileData: () => void;
    ReadSender_ImageProgramEdition(addr: number): Promise<number>;
    ReadSender_ImageProgramTailEdition(addr: number): Promise<number>;
    ReadSender_WebProgramEdition(addr: number): Promise<number>;
    ReadSender_WebProgramTailEdition(addr: number): Promise<number>;
    ReadSender_WordStockProgramEdition(addr: number): Promise<number>;
    ReadSender_WordStockProgramTailEdition(addr: number): Promise<number>;
    ReadSender_V900IsInBoot(addr: number): Promise<number>;
    WriteSourceBackupInfo: () => void;
    WriteSourceBackupInfoNew: () => void;
    ReadSourceBackupInfo(addr: number, readLength: number): Promise<Buffer>;
    ReadDeviceTable(addr: number, readLen: number): Promise<Buffer>;
    ReadSupportDeviceTableTag(addr: number): Promise<number>;
    ReadDeviceExtendType(addr: number): Promise<number>;
    ReadResolutionExtend(addr: number): Promise<Buffer>;
    ReadToneValue(addr: number): Promise<number>;
    SetToneValue(addr: number, bBroadcast: boolean, dht: number): Promise<void>;
    ReadSaturationValue(addr: number): Promise<number>;
    SetSaturationValue(addr: number, bBroadcast: boolean, dht: number): Promise<void>;
    ReadContrastValue(addr: number): Promise<number>;
    SetContrastValue(addr: number, bBroadcast: boolean, dht: number): Promise<void>;
    GetDeviceLevel(addr: number): Promise<number>;
    ReadBlankingTime5253Value(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetBlankingTime5253Value(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, BlankingTime5253Value: number[] | Buffer): Promise<void>;
    ReadLowAshCompensationOne5253Value(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLowAshCompensationOne5253Value(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, LowAshCompensationOne5253Value: number): Promise<void>;
    ReadLowAshCompensationTwo5253Value(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLowAshCompensationTwo5253Value(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, LowAshCompensationTwo5253Value: number): Promise<void>;
    SetConfigRegisterWrite7(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadDeltaTValue(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDeltaTValue(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, deltaT: number): Promise<void>;
    ReadDHTValue(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDHTValue(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dht: number): Promise<void>;
    WriteSUM2033GammaSwitchState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadSUM2033GammaSwitchState(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    SetMBI5252ChannelState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    SetMBI5252AutoResetState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    SetMBI5252ManualReset(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    SetMBI5252AutoReset(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    SetMBI5252AutoResetTime(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadMBI5252AutoResetTime(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadScannerMouldeState(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    WriteScannerMouldeState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadScannerRT5958TinyAfterglow(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    WriteScannerRT5958TinyAfterglow(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadScannerRT5958TinyLineFeed(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    WriteScannerRT5958TinyLineFeed(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadScanCardModle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadA4ScanCardModle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadScanCardGoldenFPGAProgramVerion(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRealPhysicalGroup(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, realPhysical: number): Promise<void>;
    SetIrregularCabinetRealGroup(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadIrregularCabinetRealGroup(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    SetIrregularCabinetDataGroupOutputInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadIrregularCabinetDataGroupOutputInfo(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    SetRemoveChipChannelData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadRemoveChipChannelData(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    SetScannerDehumidPara(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadScannerDehumidPara(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDehumidAdjustTime(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadDehumidAdjustTime(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScreenEncrypt(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, screenEncrypt: number): Promise<void>;
    SetScreenDecrypt(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, screenDecrypt: number): Promise<void>;
    SetCoefficientStore2SpiFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientStore2SpiFlash: number): Promise<void>;
    SaveBrightDarkLineFixCoefsToFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientStore2SpiFlash: number): Promise<void>;
    RecoveryCoefficientStore2SpiFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientStore2SpiFlash: number): Promise<void>;
    SetCoefficientStore2IIcFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientStore2IIcFlash: number): Promise<void>;
    SetCoefficientReloadFromSpiFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientReloadFromSpiFlash: number): Promise<void>;
    SetCheckModuleFlashCmd(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, checkModuleFlashCmd: number): Promise<void>;
    ReadCheckModuleFlashResult(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadCheckModuleFlashResult_1(addr: number, portAddr: number, scanBoardAddr: number, readDataLength: number): Promise<Buffer>;
    SetCheckModuleFlashResult: () => void;
    SetUpdateCorrectionCoefficientCmd(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, valueFlag: number): Promise<void>;
    GetScanerFunctionTable(Sender: number, portAddr: number, Scan: number): Promise<Buffer>;
    GetGrayCoefficientEN(Sender: number, portAddr: number, Scan: number): Promise<number>;
    SetGrayCoefficientEN(Sender: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number): Promise<void>;
    SetMaskOpreation(Sender: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    GetScannerSpiSpeedAdjust(Sender: number, portAddr: number, Scan: number): Promise<number>;
    SetScannerSpiSpeedAdjust(Sender: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, speed: number[] | Buffer): Promise<void>;
    SetSoftwareCoefficientAccelerateFlag(Sender: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, Is3x3: boolean): Promise<void>;
    ModuleOperCmd(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadLightPlankFlashTopology(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetLightPlankFlashTopology(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, LightPlankFlashTopologyBytes: number[] | Buffer): Promise<void>;
    SetCoefficientReloadFromIIcFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientReloadFromIIcFlash: number): Promise<void>;
    SetCoefficientInSpiFlashErase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientInSpiFlashErase: number): Promise<void>;
    SetBrightDarkLineCoefsErase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientErase: number): Promise<void>;
    ReadBrightDarkLineFixState(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadCorrectionState(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLowlumCoefficientErase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientErase: number[] | Buffer): Promise<void>;
    SetCoefficientInIIcFlashErase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficientInIIcFlashErase: number): Promise<void>;
    SetRebootGoldenFPGAProgram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rebootGoldenFPGAProgram: number): Promise<void>;
    SetRebootWorkFPGAProgram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rebootWorkFPGAProgram: number): Promise<void>;
    SetFPGAWorkProgramStore(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, FPGAWorkProgramStore: number): Promise<void>;
    SetRebootWorkMCUProgram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rebootWorkMCUProgram: number): Promise<void>;
    SetMCUWorkProgramStore(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, MCUWorkProgramStore: number): Promise<void>;
    SetFPGAGoldenProgramStore(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, FPGAGoldenProgramStore: number): Promise<void>;
    SetParameterReloadFromSpiFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, parameterReloadFromSpiFlash: number): Promise<void>;
    SetParameterStore2SpiFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, parameterStore2SpiFlash: number): Promise<void>;
    SetParameterSender3D(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, parameterSender3D: number): Promise<void>;
    SetParameterCorrectCoefficientComponent(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, parameterChromaOrBrightness: number): Promise<void>;
    SetRecaculateParameter(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, recaculateParameter: number): Promise<void>;
    SetGenLinearScanBoardRunLineTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, genLinearTable: number): Promise<void>;
    SetCoefficienceFromDvi(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficienceFromDvi: number): Promise<void>;
    SetCoefficienceFromDviCommon(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    SaveCoefficienceCommon(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, val: number): Promise<void>;
    SetStoreStartingLogoImage(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, storeStartingLogoImage: number): Promise<void>;
    SetStoreNoSignalLogoImage(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, storeNoSignalLogoImage: number): Promise<void>;
    SetStartLedCheck(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, startLedCheck: number): Promise<void>;
    SetReadColorCoef(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, val: number): Promise<void>;
    SetConfigRegister(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegister2017(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterFor2200(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Read2200RegisterData(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetConfigRegisterFor2020(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Set5359RegAddress(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Read5359RegAddress(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    Write6867RegData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Read6867RegData(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    SetAreaCoefsOperate(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterWriteType2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterWrite3(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetIntialRegConfigData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetUseColorAdjustMatrix(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEnableClrMatrix: boolean): Promise<void>;
    ReadConfigRegiste3rRead(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetConfigRegisterWrite4(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterWrite4_1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterWrite5(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigRegisterWrite6(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetConfigSpecialRegisterWrite(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Set2055RegisterWrite(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Read2055RegisterData(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    Set2055UnitRegisterWrite(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, unit: number): Promise<void>;
    Read2055UnitRegisterData(addr: number, portAddr: number, scanBoardAddr: number, unit: number): Promise<Buffer>;
    ReadWheelReadingCureParameterToFactoryAreaData(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadOnePackageSBParameters(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadOnePackageSBParameters_1(addr: number, portAddr: number, scanBoardAddr: number, dataLength: number): Promise<Buffer>;
    SetOnePackageSBParameters(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadLowAshCompensation(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetLowAshCompensation(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadReduceHighContrast(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetReduceHighContrast(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, reduceHighData: number): Promise<void>;
    SetEnSwipErrorPoint(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    Set16259EnSwipErrorPoint(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadGamma(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGamma(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, gamma: number): Promise<void>;
    SetSenderConrectionMode(addr: number, bBroadcast: boolean, isOpen: boolean): Promise<void>;
    SetScanConrectionMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpen: boolean): Promise<void>;
    ReadGrayBit(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGrayBit(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, grayBit: number): Promise<void>;
    ReadUCS512CDisplayMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetUCS512CDisplayMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, displayMode: number): Promise<void>;
    ReadGlobalBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGlobalBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, globalBrightness: number): Promise<void>;
    SetGlobalBrightnessOf2053(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, globalBrightness: number): Promise<void>;
    ReadRedBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRedBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, redBrightness: number): Promise<void>;
    ReadGreenBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGreenBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, greenBrightness: number): Promise<void>;
    ReadBlueBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetBlueBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blueBrightness: number): Promise<void>;
    ReadVRedBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetVRedBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, vRedBrightness: number): Promise<void>;
    ReadScreenDriveType(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScreenDriveType(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, driverType: ScreenDriveTypeEnum): Promise<void>;
    ReadAllBrightnessInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadRGBBrightness(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRGBBrightness(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, redBrightness: number, greenBrightness: number, blueBrightness: number, vRedBrightness: number): Promise<void>;
    ReadDclkHighRatio(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDclkHighRatio(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dclkHighRatio: number): Promise<void>;
    ReadDataDirection(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDataDirection(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dataDriection: DataDirectionTypeEnum): Promise<void>;
    ReadModuleWidth(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetModuleWidth(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, moduleWidth: number): Promise<void>;
    SetScanSwitchMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, switchMode: number): Promise<void>;
    ReadModuleHeight(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetModuleHeight(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, moduleHeight: number): Promise<void>;
    ReadModuleWidthAndHeigth(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadDriverType(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDriverType(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, driverType: ChipTypeEnum): Promise<void>;
    ReadScanMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanMode: ScanTypeEnum): Promise<void>;
    ReadOEPority(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetOEPority(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, oEPority: OEPolarityTypeEnum): Promise<void>;
    ReadDecodeType(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDecodeType(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, decodeType: DecodeTypeEnum): Promise<void>;
    ReadGroupNumInModule(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGroupNumInModule(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, groupNumInModule: number): Promise<void>;
    ReadDataGroupSequence(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDataGroupSequence: () => void;
    ReadModuelCols(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetModuelCols(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, moduleCols: number): Promise<void>;
    ReadModuelRows(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetModuelRows(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, moduleRows: number): Promise<void>;
    ReadControlWidth(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetControlWidth(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, controlWidth: number): Promise<void>;
    ReadControlHeight(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetControlHeight(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, controlHeight: number): Promise<void>;
    ReadPhysicalTotalDataGroupNum(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetPhysicalTotalDataGroupNum(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalDataGroupNum: number): Promise<void>;
    ReadICNumber(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetICNumber(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, iCNumber: number): Promise<void>;
    ReadHalfFreqSetMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetHalfFreqSetMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalDataGroupNum: number): Promise<void>;
    ReadCascadeDiretion(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetCascadeDiretion(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, cascadeDiretion: ModuleCascadeDiretionEnum): Promise<void>;
    ReadTotalPointInTable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTotalPointInTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalPointInTable: number): Promise<void>;
    ReadPointNumPerDrive(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetPointNumPerDrive(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, pointNumPerDrive: number): Promise<void>;
    ReadIrregularScreenDrive(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetIrregularScreenDrive(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isIrregularScreenDrive: boolean): Promise<void>;
    ReadLogicalTotalDataGroupNum(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLogicalTotalDataGroupNum(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, logicalDataGroupNum: number): Promise<void>;
    ReadDriverFucntion(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDriverFucntion(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, driverFunc: number): Promise<void>;
    ReadDExtendMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDExtendMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, extendMode: number): Promise<void>;
    ReadGrayDepth(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGrayDepth(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, grayDepth: number): Promise<void>;
    ReadGrayMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGrayMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, grayRealize: GrayRealizeTypeEnum, grayMode: GrayModeTypeEnum): Promise<void>;
    ReadRefNumPerVs(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRefNumPerVs(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, refNumPerVs: number): Promise<void>;
    ReadGhostRemoveMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGhostRemoveMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, ghostRemoveMode: GhostRemoveModeTypeEnum): Promise<void>;
    ReadBlankUnitNumPerScan(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetBlankUnitNumPerScan(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankUnitNumPerScan: number): Promise<void>;
    ReadRowChangePoint(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRowChangePoint(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rowChangePoint: number): Promise<void>;
    ReadABCDRollOver(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetABCDRollOver(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isRollOver: boolean): Promise<void>;
    SetABCDRollOver_1: () => void;
    ReadGclkNumPerScan(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGclkNumPerScan(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, gclkNumPerScan: number): Promise<void>;
    ReadLightTimePerSubFieldRatio(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLightTimePerSubFieldRatio(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lightTimePerSubFieldRatio: number): Promise<void>;
    ReadShiftUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetShiftUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, shiftUnitNumPerSubField: number): Promise<void>;
    ReadTotalLightCdfResault(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTotalLightCdfResault(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, TotalLightCdfResault: number): Promise<void>;
    ReadTotalUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTotalUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalUnitNumPerSubField: number): Promise<void>;
    ReadLightTimePerSubField(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLightTimePerSubField(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lightTimePerSubField: number): Promise<void>;
    ReadDclkUnitCycle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDclkUnitCycle(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dclkUnitCycle: number): Promise<void>;
    ReadDclkPhase(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDclkPhase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dclkPhase: number): Promise<void>;
    ReadDclkHigh(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDclkHigh(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dclkHigh: number): Promise<void>;
    ReadGclkUnitCycle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGclkUnitCycle(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, gclkUnitCycle: number): Promise<void>;
    ReadGclkPhase(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGclkPhase(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, gclkPhase: number): Promise<void>;
    ReadGclkHigh(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGclkHigh(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, gclkHigh: number): Promise<void>;
    ReadSubField(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetSubField: () => void;
    ReadRowsCtrlByDataGroup(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetRowsCtrlByDataGroup(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, countCtrlByDataGroup: number[] | Buffer): Promise<void>;
    ReadTotalGclkUnitNumPerScan(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTotalGclkUnitNumPerScan(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalGclk: number): Promise<void>;
    ReadCorrectionOn(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetCorrectionOnROELine(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, correctionInfo: number[] | Buffer): Promise<void>;
    SetCorrectionOnEx(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, bCorrectionOn: boolean): Promise<void>;
    SetCorrectionOn(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, bCorrectionOn: boolean): Promise<void>;
    SetCorrectionOn_1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpenCorrect: boolean, type: CorrectTypeEnum, retainClrInfo: boolean): Promise<void>;
    SetCorrectionOn_2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number): Promise<void>;
    SetLowlumCorrectionOn: () => void;
    SetCorrectionOnROE(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpenCorrect: boolean, type: CorrectTypeEnum, retainClrInfo: boolean): Promise<void>;
    SetCorrectionOnROELine_1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpenCorrect: boolean, type: CorrectTypeEnum, retainClrInfo: boolean): Promise<void>;
    SetBrightDarkLineFixState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, stateByte: number): Promise<void>;
    SetBrightDarkLineFixStateEx: () => void;
    ReadCoefficientSource(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetCoefficientSource(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, coefficienceSource: CoefficientSourceTypeEnum): Promise<void>;
    ReadShowLastFrameWhenCableNotConected(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetShowLastFrameWhenCableNotConected(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, showMode: ShowTypeWhenPortDisconnectedEnum): Promise<void>;
    ReadDisplayModeWhenNoSignal(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDisplayModeWhenNoSignal: () => void;
    ReadABCDCode(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetABCDCode: () => void;
    ReadLineBias(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLineBias(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lineBias: number): Promise<void>;
    ReadRgbCode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRgbCode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, red: number, green: number, blue: number, virtualRed: number): Promise<void>;
    ReadRgain(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetRgain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rgain: number): Promise<void>;
    ReadGgain(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGgain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, ggain: number): Promise<void>;
    ReadBgain(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetBgain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, bgain: number): Promise<void>;
    ReadVRgain(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetVRgain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, vRgain: number): Promise<void>;
    ReadThreshold(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetThreshold(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, threshold: number): Promise<void>;
    ReadSymmetricalOutputMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSymmetricalOutputMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, outPutMode: number): Promise<void>;
    ReadColorMatrix(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetColorMatrix: () => void;
    ReadStartPositionOfDataGroup(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetStartPositionOfDataGroup(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, startPositionOfDataGroup: number[] | Buffer): Promise<void>;
    ReadCabinetSerialNum(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetvCabinetSerialNum(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, cabinetSerialNum: number): Promise<void>;
    ReadConfigRegister(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadMbi5042GrayEnhanced(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetMbi5042GrayEnhanced(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    ReadNoCorrectionThreshold(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetNoCorrectionThreshold: () => void;
    ReadNoCorrectionAttenuation(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetNoCorrectionAttenuation: () => void;
    ReadCtrlEndPoint(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetCtrlEndPoint(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, ctrlEndPoint: number): Promise<void>;
    ReadLocalStartX(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadLocalStartY(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadNewOERamEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetNewOERamEnable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, newOERamEnable: number): Promise<void>;
    SetNewOERamEnable_1: () => void;
    ReadLowGrayCompensation(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLowGrayCompensation(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lowGrayCpt: number): Promise<void>;
    ReadAddrExtend(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetAddrExtend(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, addrExtend: number): Promise<void>;
    ReadTwentyDataGroup(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTwentyDataGroup(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEanbleTwentyDataGroup: boolean): Promise<void>;
    ReadGroupSwapEn(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGroupSwapEn(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEnableGroupSwapEn: boolean): Promise<void>;
    ReadGroupSwapInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetGroupSwapInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, groupSwapInfo: number[] | Buffer): Promise<void>;
    ReadSerialColorNum(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSerialColorNum(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, serialColorNum: number): Promise<void>;
    ReadSerialDotsNumPerColor(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSerialDotsNumPerColor(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, serialDotsNumPerColor: number): Promise<void>;
    ReadSerialRGBCode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSerialRGBCode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, red: number, green: number, blue: number, virtualRed: number): Promise<void>;
    ReadTVCardDVI0Width(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTVCardDVI0Width(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dviWidth: number): Promise<void>;
    ReadTVCardDVI0Height(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTVCardDVI0Height(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dviHeight: number): Promise<void>;
    ReadTVCardDVI0OffsetX(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTVCardDVI0OffsetX(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dviOffsetX: number): Promise<void>;
    ReadTVCardDVI0OffsetY(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTVCardDVI0OffsetY(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, dviOffsetY: number): Promise<void>;
    ReadLogicShiftUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLogicShiftUnitNumPerSubField(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, ShiftUnitNum: number): Promise<void>;
    ReadDviEncyptEn(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDviEncyptEn(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isDviEncypt: boolean): Promise<void>;
    ReadPCMacAddr(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetPCMacAddr(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, sendCardSn: number[] | Buffer): Promise<void>;
    SetDVIEncryptAllInfo: () => void;
    ResetDVIEncryptAllInfo: () => void;
    ReadKillMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetKillMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, killMode: number): Promise<void>;
    ReadSelfTestMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSelfTestMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, selfTestMode: TestModeEnum): Promise<void>;
    ReadLockMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetLockMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lockMode: number): Promise<void>;
    SetTemprature(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, tem: number): Promise<void>;
    ReadTemprature(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    Set5pinControlLight(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, tem: number): Promise<void>;
    Read5pinControlLight(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadScreenEncrypt(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadSmartSetMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSmartSetMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, smartMode: SmartSetModeEnum): Promise<void>;
    SetSmartSetMode_1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, smartMode: number): Promise<void>;
    ReadAverMatrix(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadColorAdjustEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetColorAdjustEnable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    ReadAdjustMatrixAndEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetColorAdjustMatrixAndEnable: () => void;
    SetColorAdjustMatrixAndEnableNew(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isEnable: boolean): Promise<void>;
    SetColorAdjustMatrixAndDataNew(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, byteData: number): Promise<void>;
    ReadScaleInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScaleInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scaleInfo: number): Promise<void>;
    SetScanerDirectModeEnable(addr: number, portAddr: number, scanBoardAddr: number, broadcast: boolean, enable: boolean): Promise<void>;
    ReadScanerDirectModeEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadTotalLightCdfRes(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetTotalLightCdfRes(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, totalLightCdfRes: number): Promise<void>;
    ReadModuleScanSequenceInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetModuleScanSequenceInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanSequenceInfo: number[] | Buffer): Promise<void>;
    ReadScannerFunctionConfig(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetSender_ModuleFileData: () => void;
    ReadModule_McuProgramLength(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadModule_McuProgramEdition(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadModule_McuProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetRedGammaTableData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, is22Bit: boolean): Promise<void>;
    SetExtendRedGammaTableData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, is22Bit: boolean): Promise<void>;
    WriteCorrectionDataToScan(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, length: number, registerAddr: number): Promise<void>;
    ReadCorrectionDataToScan(addr: number, portAddr: number, scanBoardAddr: number, readLength: number, registerAddr: number): Promise<Buffer>;
    WriteSwitchCommand: () => void;
    ReadScanerBurningProgramPackage(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_FPGAProgramLength(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_FPGAProgramLength(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_FPGAProgramLength: number): Promise<void>;
    ReadScanner_FPGAProgramEdition(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_FPGAProgramEdition(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_FPGAProgramEdition: number): Promise<void>;
    ReadScanner_FPGAProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_FPGAProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_FPGAProgramRemarks: number[] | Buffer): Promise<void>;
    ReadScanner_FPGAProgramInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_FPGAProgramInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_FPGAProgramRemarks: number[] | Buffer): Promise<void>;
    ReadSender3D_FPGAProgramInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadSender3D_McuProgramInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetSender_ScannerFPGAFileData: () => void;
    ReadScanner_McuProgram(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_McuProgramLength(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_McuProgramLength(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_McuProgramLength: number): Promise<void>;
    ReadScanner_McuProgramEdition(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_McuProgramEdition(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_McuProgramEdition: number): Promise<void>;
    ReadScanner_McuProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_McuProgramRemarks(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_McuProgramRemarks: number[] | Buffer): Promise<void>;
    SetSender_ScannerMcuFileData: () => void;
    ReadScanner_McuProgramInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_McuProgramInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, scanner_McuProgramRemarks: number[] | Buffer): Promise<void>;
    ReadTempInfoOfScanCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadHumiOfScanCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadVoltageOfScanCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadAttachedMonitorCardExist(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadAttachedMonitorCardModle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadAttachedMonitorCardProgramVersion(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadTempInfoOfMonitorCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadHumiOfMonitorCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadSmokeWarningOfMonitorCard(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadFanSpeedOfMonitorCard(addr: number, portAddr: number, scanBoardAddr: number, readCountOfFan: number, beginIdnexOfFan: number): Promise<Buffer>;
    ReadVoltageOfMonitorCard(addr: number, portAddr: number, scanBoardAddr: number, readCountOfValtage: number, beginIdnexOfValtage: number): Promise<Buffer>;
    ReadAllStatus(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadAllStatus_1(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadAllModuelStatus(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadHubMonitorStatus(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadHubMonitorStatus_1(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadAutoCorrectUpload(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetAutoCorrectUpload(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, AutoCorrect: boolean): Promise<void>;
    ReadScanCardAllStatus(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadScanner_MutiChipRamA(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    SetScanner_MutiChipRamA(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamA: number[] | Buffer): Promise<void>;
    ReadScanner_MutiChipRamB(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    SetScanner_MutiChipRamB(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamB: number[] | Buffer): Promise<void>;
    ReadScanner_MutiChipRamC(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    SetScanner_MutiChipRamC(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamC: number[] | Buffer): Promise<void>;
    SetScanner_MutiChipRamD(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, mutiChipRamD: number[] | Buffer): Promise<void>;
    Set2038SBlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Read2038SBlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    Set2038SBlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Read2038SBlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    Set2038SPhotoBlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Set2038SPhotoBlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Set9868ABlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Read9868ABlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    Set9868ABlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Read9868ABlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    Set9868APhotoBlankOptimizationLevel1(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    Set9868APhotoBlankOptimizationLevel2(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, blankLevelValue: number): Promise<void>;
    ReadScanner_NewOETable(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_NewOETable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, newOETable: number[] | Buffer): Promise<void>;
    ReadScanner_NewOEHighTable(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_NewOEHighTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, newOETable: number[] | Buffer): Promise<void>;
    ReadScanner_ColorRestore(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_ColorRestore(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, colorRestore: number[] | Buffer): Promise<void>;
    SetScanner_DMFirst(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMFirst: number[] | Buffer): Promise<void>;
    SetScanner_DMPM(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMPM: number[] | Buffer): Promise<void>;
    SetScanner_DMSecond(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMSecond: number[] | Buffer): Promise<void>;
    SetScanner_DMThird(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMThird: number[] | Buffer): Promise<void>;
    SetScanner_OE(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMThird: number[] | Buffer): Promise<void>;
    SetScanner_DMWSP(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, DMWSP: number[] | Buffer): Promise<void>;
    ReadScanner_DMFirst(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_DMPM(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_DMSecond(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_DMThird(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_DMWSP(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScanner_LowGrayCodeTable(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_LowGrayCodeTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lowGrayCodeTable: number[] | Buffer): Promise<void>;
    SetScanner_AutoRefreshRate(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, autoRefreshRateData: number[] | Buffer): Promise<void>;
    ReadSingleChipMicyocoSpaceAuto(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetSingleChipMicyocoSpaceAuto: () => void;
    ReadSingleChipMicyocoSpace(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSingleChipMicyocoSpace(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, singleChipMicyocoSpace: number): Promise<void>;
    ReadConnectRelayTemperature(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetConnectRelayTemperature: () => void;
    ReadDisConnectRelayTemperature(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDisConnectRelayTemperature: () => void;
    ReadScannerRecordTime(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerRecordTime(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    ReadPowerWorkState(addr: number, portAddr: number, scanBoardAddr: number, powerBackNumber: number): Promise<Buffer>;
    ReadScannerDigitalTubeSwitch(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerDigitalTubeSwitch(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpen: boolean): Promise<void>;
    ReadConfigFileID(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetConfigFileID(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, configFileID: number): Promise<void>;
    ReadScannerIrCabientCfg(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScannerIrCabientCfg(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadScannerCabinetID(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScannerCabinetID: () => void;
    ReadScannerCabinetCorrectLocationSize(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScannerCabinetCorrectLocationSize: () => void;
    ReadSpecialFrameRate(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetSpecialFrameRate: () => void;
    ReadMoudleNumber(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetMoudleNumber(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, MoudleNumber: number): Promise<void>;
    ReadDoubleCardSpace(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerRecordCmd(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, bStartRecord: boolean): Promise<void>;
    ReadDoubleCardRecordCmd(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadDoubleCardEaraseState(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetDoubleCardEaraseState(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, EaraseTag: number): Promise<void>;
    ReadDoubleEaraseStateCmd(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadDoubleModelFrameRate(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerFrameRate(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, frameRate: number): Promise<void>;
    ReadModuleConfigInfo(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    SetModuleConfigInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ExtendModuleOperCmd(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, length: number): Promise<void>;
    ReadExtendModuleConfigInfo(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    ReadScannerBacklightSwitch(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerBacklightSwitch(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpen: boolean): Promise<void>;
    ReadBitErrorRateData(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    WriteBitErrorRateClearData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    WriteScanerSlavaFlashToSdram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    WriteScanerSdramToSlaveFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    MoveCorrectionFromSlaveFlashToSdram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    MoveCorrectionFromMasterFlashToSdram(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    MoveCorrectionFromSdramToSlaveFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    MoveCorrectionFromSdramToMasterFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    WriteMappingFrontToScaner(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer, dataLength: number): Promise<void>;
    WriteScanerMapping: () => void;
    SaveScannerFontLibToFlash(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    WriteScannerResetEn(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, isOpen: boolean, length: number): Promise<void>;
    ReadScannerResetEn(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    WriteScannerResetCycleNum(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, cycleNum: number, length: number): Promise<void>;
    ReadScannerResetCycleNum(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    WriteScannerResetCommand(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, resetType: ResetAndSwitchCommandTypeEnum): Promise<void>;
    Switch2053IP(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, switchIP2053Enable: boolean): Promise<void>;
    SwitchAutoOrManualLinearTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, switchAutoOrManualEnable: boolean): Promise<void>;
    StartAutoLinearTable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean): Promise<void>;
    SetSpecialParam(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, rowChangePoint: number): Promise<void>;
    ReadGammaMaxValue2053(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGammaMaxValue2053: () => void;
    ReadGammaMaxValue(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetGammaMaxValue(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, GammaMaxValue2053: number): Promise<void>;
    ReadEnhancedMode2053(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetEnhancedMode2053: () => void;
    SetScanBoardDataTo2000(addr: number, portIndex: number, scanIndex: number, data: number[] | Buffer, length: number): Promise<void>;
    ReadScanBoardDataTo2000(addr: number, portAddr: number, scanBoardAddr: number, length: number): Promise<Buffer>;
    SetScanBoardDataTo2500(addr: number, portIndex: number, scanIndex: number, data: number[] | Buffer, length: number): Promise<void>;
    ReadScanBoardDataTo2500(addr: number, portAddr: number, scanBoardAddr: number, length: number): Promise<Buffer>;
    ReadABCDESignalDelay(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetABCDESignalDelay(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, ABCDESignalDelay: number): Promise<void>;
    ReadScannerColorSupportInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerRGBColor(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetScanner18bitGrayScale: () => void;
    SetScanner18bitWhiteGrayScale: () => void;
    SetScannerGrayScale: () => void;
    SetScannerWhiteGrayScale: () => void;
    SetScanner22bitGrayScale: () => void;
    SetScannerGrayScaleCoef: () => void;
    ReadScannerGrayScaleCoef(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetMagnitudes(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadMagnitudes(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    ReadScannerColorInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerColorInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetColorAdjustMatrixType(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadColorAdjustMatrixType(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadColorManageCoefData(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_ColorManageCoefData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, colorRestore: number[] | Buffer): Promise<void>;
    ReadMGCoefData(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetScanner_MGCoefData: () => void;
    ReadMGParmData(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_MGParmData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadMGEnParmData(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner_MGEnParmData(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number): Promise<void>;
    ReadScanner18BitEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScanner18BitEnable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, enable: boolean): Promise<void>;
    SetScannerxBitEnable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, da: number): Promise<void>;
    SetScannerxBit1d8(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, da: number[] | Buffer): Promise<void>;
    SetScannerxBit1d9(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, da: number[] | Buffer): Promise<void>;
    ReadClearViewInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    SetClearViewInfo: () => void;
    ReadClearViewEnableInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetClearViewEnableInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, enable: boolean): Promise<void>;
    Set2038SDelayTime(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, delayTime: number): Promise<void>;
    Read2038SDelayTime(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetCustomGammaConfigInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, customGammaConfigInfo: number): Promise<void>;
    ReadCustomGammaConfigInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    WriteScannerDoubleLock(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadScannerDoubleLock(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    ReadScannerLowDelayEnable(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetScannerLowDelayEnable(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, lowDelayEnable: boolean): Promise<void>;
    ReadSenderLowDelayEnable(addr: number): Promise<number>;
    SetSenderLowDelayEnable(addr: number, bBroadcast: boolean, enableLowDelay: boolean): Promise<void>;
    FuncCard_ReadCompanyID(addr: number): Promise<number>;
    FuncCard_ReadCompanyID_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadFuncCardModle(addr: number): Promise<number>;
    FuncCard_ReadFuncCardModle_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadGoldenFPGAVersion(addr: number): Promise<number>;
    FuncCard_ReadGoldenFPGAVersion_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadIsMonitorCardExist(addr: number): Promise<number>;
    FuncCard_ReadIsMonitorCardExist_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadMonitorCardModle(addr: number): Promise<number>;
    FuncCard_ReadMonitorCardModle_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadMonitorFPGAVersion(addr: number): Promise<number>;
    FuncCard_ReadMonitorFPGAVersion_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadFuncCardFPGALength(addr: number): Promise<number>;
    FuncCard_ReadFuncCardFPGALength_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetFuncCardFPGALength(addr: number, bBroadcast: boolean, fpgaLength: number): Promise<void>;
    FuncCard_SetFuncCardFPGALength_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, fpgaLength: number): Promise<void>;
    FuncCard_ReadFuncCardFPGAVersion(addr: number): Promise<number>;
    FuncCard_ReadFuncCardFPGAVersion_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetFuncCardFPGAVersion(addr: number, bBroadcast: boolean, fpgaVersion: number): Promise<void>;
    FuncCard_SetFuncCardFPGAVersion_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, fpgaVersion: number): Promise<void>;
    FuncCard_ReadFuncCardFPGADescription(addr: number): Promise<Buffer>;
    FuncCard_ReadFuncCardFPGADescription_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetFuncCardFPGADescription(addr: number, bBroadcast: boolean, funcCard_FPGADescription: number[] | Buffer): Promise<void>;
    FuncCard_SetFuncCardFPGADescription_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, funcCard_FPGADescription: number[] | Buffer): Promise<void>;
    FuncCard_SetFPGAData(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, data: number[] | Buffer, offset: number): Promise<void>;
    FuncCard_ReadFuncCardMCULength(addr: number): Promise<number>;
    FuncCard_ReadFuncCardMCULength_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetFuncCardMCULength(addr: number, bBroadcast: boolean, mcuLength: number): Promise<void>;
    FuncCard_SetFuncCardMCULength_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, mcuLength: number): Promise<void>;
    FuncCard_ReadFuncCardMCUVersion(addr: number): Promise<number>;
    FuncCard_ReadFuncCardMCUVersion_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetFuncCardMCUVersion(addr: number, bBroadcast: boolean, mcuVersion: number): Promise<void>;
    FuncCard_SetFuncCardMCUVersion_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, mcuVersion: number): Promise<void>;
    FuncCard_ReadFuncCardMCUDescription(addr: number): Promise<Buffer>;
    FuncCard_ReadFuncCardMCUDescription_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetFuncCardMCUDescription(addr: number, bBroadcast: boolean, funcCard_MCUDescription: number[] | Buffer): Promise<void>;
    FuncCard_SetFuncCardMCUDescription_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, mcuDescription: number[] | Buffer): Promise<void>;
    FuncCard_SetRebootBootFpgaProgram(addr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetRebootBootFpgaProgram_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetRebootAppFpgaProgram(addr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetRebootAppFpgaProgram_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetStoreFpgaBootProgram(addr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetStoreFpgaBootProgram_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetStoreFpgaAppProgram(addr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_SetStoreFpgaAppProgram_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    FuncCard_ReadTempInfoOfFuncCard(addr: number): Promise<number>;
    FuncCard_ReadTempInfoOfFuncCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadHumiOfFuncCard(addr: number): Promise<number>;
    FuncCard_ReadHumiOfFuncCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadVoltageOfFuncCard(addr: number): Promise<number>;
    FuncCard_ReadVoltageOfFuncCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadLinkStateOfMonitorCard(addr: number): Promise<number>;
    FuncCard_ReadLinkStateOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadTempInfoOfMonitorCard(addr: number): Promise<number>;
    FuncCard_ReadTempInfoOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadHumiOfMonitorCard(addr: number): Promise<number>;
    FuncCard_ReadHumiOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadSmokeWarningOfMonitorCard(addr: number): Promise<number>;
    FuncCard_ReadSmokeWarningOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadFanSpeedOfMonitorCard(addr: number, readCountOfFan: number, beginIdnexOfFan: number): Promise<Buffer>;
    FuncCard_ReadFanSpeedOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number, readCountOfFan: number, beginIdnexOfFan: number): Promise<Buffer>;
    FuncCard_ReadVoltageOfMonitorCard(addr: number, readCountOfValtage: number, beginIdnexOfValtage: number): Promise<Buffer>;
    FuncCard_ReadVoltageOfMonitorCard_1(addr: number, portAddr: number, funcCardAddr: number, readCountOfValtage: number, beginIdnexOfValtage: number): Promise<Buffer>;
    FuncCard_ReadFuncCardAllStatus(addr: number): Promise<number>;
    FuncCard_ReadFuncCardAllStatus_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_ReadMonitorCardAllInfo(addr: number): Promise<Buffer>;
    FuncCard_ReadMonitorCardAllInfo_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_ReadMonitorCardAllStatus(addr: number): Promise<Buffer>;
    FuncCard_ReadMonitorCardAllStatus_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_ReadTimeOnFuncCard(addr: number): Promise<Buffer>;
    FuncCard_ReadTimeOnFuncCard_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetTimeOnFuncCard: () => void;
    FuncCard_SetTimeOnFuncCard_1: () => void;
    FuncCard_ReadPowerPortCtrl(addr: number, powerIndex: number): Promise<number>;
    FuncCard_ReadPowerPortCtrl_1(addr: number, portAddr: number, funcCardAddr: number, powerIndex: number): Promise<number>;
    FuncCard_SetPowerPortCtrl(addr: number, bBroadcast: boolean, powerCtrlMode: PowerOperateTypeEnum, powerIndex: number): Promise<void>;
    FuncCard_SetPowerPortCtrl_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, powerCtrlMode: PowerOperateTypeEnum, powerIndex: number): Promise<void>;
    FuncCard_ReadAllPowerPortCtrl(addr: number): Promise<Buffer>;
    FuncCard_ReadAllPowerPortCtrl_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetAllPowerPortCtrl: () => void;
    FuncCard_SetAllPowerPortCtrl_1: () => void;
    FuncCard_ReadPowerOperTime(addr: number): Promise<Buffer>;
    FuncCard_ReadPowerOperTime_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetPowerOperTime: () => void;
    FuncCard_SetPowerOperTime_1: () => void;
    FuncCard_ReadPowerCtrlMode(addr: number): Promise<number>;
    FuncCard_ReadPowerCtrlMode_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetPowerCtrlMode(addr: number, bBroadcast: boolean, powerCtrlMode: PowerCtrlModeEnum): Promise<void>;
    FuncCard_SetPowerCtrlMode_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, powerCtrlMode: PowerCtrlModeEnum): Promise<void>;
    FuncCard_ReadDelayTime(addr: number): Promise<number>;
    FuncCard_ReadDelayTime_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetDelayTime(addr: number, bBroadcast: boolean, delayTime: number): Promise<void>;
    FuncCard_SetDelayTime_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, delayTime: number): Promise<void>;
    FuncCard_ReadPowerPortCtrlTotal(addr: number): Promise<number>;
    FuncCard_ReadPowerPortCtrlTotal_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetPowerPortCtrlTotal(addr: number, bBroadcast: boolean, operType: PowerOperateTypeEnum): Promise<void>;
    FuncCard_SetPowerPortCtrlTotal_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, operType: PowerOperateTypeEnum): Promise<void>;
    FuncCard_ReadOutDeviceValue(addr: number): Promise<Buffer>;
    FuncCard_ReadOutDeviceValue_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_ReadOutDeviceValue_2(addr: number, dataLength: number): Promise<Buffer>;
    FuncCard_ReadOutDeviceValue_3(addr: number, portAddr: number, funcCardAddr: number, dataLength: number): Promise<Buffer>;
    FuncCard_ReadOutTAndHumValue(addr: number): Promise<Buffer>;
    FuncCard_ReadOutTAndHumValue_1(addr: number, portAddr: number, funcCardAddr: number): Promise<Buffer>;
    FuncCard_SetOutDevice: () => void;
    FuncCard_SetOutDevice_1: () => void;
    FuncCard_SetOutDevice_2(addr: number, bBroadcast: boolean, outDeviceAddr: number, baudType: BaudRateTypeEnum, otherDeviceProtocol: number[] | Buffer): Promise<void>;
    FuncCard_SetOutDevice_3(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, outDeviceAddr: number, baudType: BaudRateTypeEnum, otherDeviceProtocol: number[] | Buffer): Promise<void>;
    FuncCard_SaveToHWOutDevice: () => void;
    FuncCard_SaveToHWOutDevice_1: () => void;
    FuncCard_ReadAudioFrequency(addr: number): Promise<number>;
    FuncCard_ReadAudioFrequency_1(addr: number, portAddr: number, funcCardAddr: number): Promise<number>;
    FuncCard_SetAudioFrequency(addr: number, bBroadcast: boolean, freMode: AudioFrequencyModeEnum): Promise<void>;
    FuncCard_SetAudioFrequency_1(addr: number, portAddr: number, funcCardAddr: number, bBroadcast: boolean, freMode: AudioFrequencyModeEnum): Promise<void>;
    ReadVirtualFrameRate(addr: number): Promise<number>;
    SetVirtualFrameRate(addr: number, bBroadcast: boolean, virtualFrameRate: number): Promise<void>;
    ReadVirtualCaptureEnable(addr: number): Promise<number>;
    SetVirtualCaptureEnable(addr: number, bBroadcast: boolean, virtualCaptureEnable: boolean): Promise<void>;
    ReadVirtualImageDataSource(addr: number): Promise<number>;
    SetVirtualImageDataSource(addr: number, bBroadcast: boolean, virtuaImageDataSource: number): Promise<void>;
    ReadVirtualSendDataEnable(addr: number): Promise<number>;
    SetVirtualSendEnable(addr: number, bBroadcast: boolean, virtualSendEnable: boolean): Promise<void>;
    ReadWindowBmpTimeoutSet(addr: number): Promise<number>;
    SetVirtualWindowBmpTimeoutSet(addr: number, bBroadcast: boolean, virtuaWindowBmpTimeoutSet: number): Promise<void>;
    ReadSender_DistributeEnable(addr: number): Promise<number>;
    SetSender_DistributeEnable(addr: number, bBroadcast: boolean, functionType: ModulationModeTypeEnum): Promise<void>;
    ReadSender_DistributePortSeting(addr: number): Promise<number>;
    SetSender_DistributePortSeting(addr: number, bBroadcast: boolean, dataValue: number[] | Buffer): Promise<void>;
    ReadSaveDistributeParameters(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    SetSaveDistributeParameters(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, saveSendCardsParameters: number): Promise<void>;
    ReadDistributeReturnFactoryValues(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    SetDistributeReturnFactoryValues(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, returnFactoryValues: number): Promise<void>;
    Distribute_ReadCompanyID(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_ReadDistributeModle(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_ReadGoldenFPGAVersion(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_ReadDistributeFPGALength(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_SetDistributeFPGALength(addr: number, portAddr: number, distributAddr: number, bBroadcast: boolean, fpgaLength: number): Promise<void>;
    Distribute_ReadFuncCardFPGAVersion(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_SetFuncCardFPGAVersion(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, fpgaVersion: number): Promise<void>;
    Distribute_ReadDistributeFPGADescription(addr: number, portAddr: number, distributeAddr: number): Promise<Buffer>;
    Distribute_SetFuncCardFPGADescription(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, distribute_FPGADescription: number[] | Buffer): Promise<void>;
    Distribute_ReadDistributeMCULength(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_SetDistributeMCULength(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, mcuLength: number): Promise<void>;
    Distribute_ReadDistributeMCUVersion(addr: number, portAddr: number, distributeAddr: number): Promise<number>;
    Distribute_SetDistributeMCUVersion(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, mcuVersion: number): Promise<void>;
    Distribute_ReadDistributeMCUDescription(addr: number, portAddr: number, distributeAddr: number): Promise<Buffer>;
    Distribute_SetDistributeMCUDescription(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, mcuDescription: number[] | Buffer): Promise<void>;
    Distribute_SetRebootBootFpgaProgram(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    Distribute_SetRebootAppFpgaProgram(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, distributeModle: number): Promise<void>;
    Distribute_SetStoreFpgaBootProgram(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, funcCardModle: number): Promise<void>;
    Distribute_SetStoreFpgaAppProgram(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, distributeModle: number): Promise<void>;
    ReadDistributeEthernetPortScannerX(addr: number, portAddr: number, distributeAddr: number, portIndex: number, scannerIndex: number): Promise<number>;
    SetDistributeEthernetPortScannerX(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, ethernetPortScannerX: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadDistributeEthernetPortScannerY(addr: number, portAddr: number, distributeAddr: number, portIndex: number, scannerIndex: number): Promise<number>;
    SetDistributeEthernetPortScannerY(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, ethernetPortScannerY: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadDistributeEthernetPortScannerXY(addr: number, portAddr: number, distributeAddr: number, portIndex: number, scannerIndex: number): Promise<Buffer>;
    SetDistributeEthernetPortScannerXY(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, ethernetPortScannerX: number, ethernetPortScannerY: number, portIndex: number, scannerIndex: number): Promise<void>;
    ReadDistributeNumberOfCardOrScanBoardInPort(addr: number, portAddr: number, distributeAddr: number, portIndex: number, cardType: CardTypeEnum): Promise<number>;
    SetDistributeNumberOfCardOrScanBoardInPort(addr: number, portAddr: number, distributeAddr: number, bBroadcast: boolean, number: number, portIndex: number, cardType: CardTypeEnum): Promise<void>;
    WriteGroupSwapInfo: () => void;
    ReadGroupSwapInfo_1(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    WriteMonitorDataSwapInfo: () => void;
    ReadMonitorDataSwapInfo(addr: number, portAddr: number, scanBoardAddr: number, readLength: number): Promise<Buffer>;
    WriteFirstGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteSecondGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteThirdGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteFourthGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteFifthGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteSixthGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteSeventhGroupRegistorGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteFirstGroupRegistorRGBGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteSecGroupRegistorRGBGain(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteRotateAngleInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadRotateAngle(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    WriteCabinetInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadCabinetInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    WriteSaveCabinetInfo(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteBrightPriorityMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    ReadBrightnessModel(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetBrightnessModel(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, brightnessmodel: number): Promise<void>;
    ReadStandbyMode(addr: number, portAddr: number, scanBoardAddr: number): Promise<number>;
    SetStandbyMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, standbyMode: StandbyModeEnum): Promise<void>;
    ReadScannerFunctionInfo(addr: number, portAddr: number, scanBoardAddr: number): Promise<Buffer>;
    WriteLowCoef(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    WriteHighCoef(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number[] | Buffer): Promise<void>;
    SetXbitGammaMode(addr: number, portAddr: number, scanBoardAddr: number, bBroadcast: boolean, data: number): Promise<void>;
}

import * as t from 'io-ts';
import { ChipFM6518ExtendProperty } from './ChipFM6518ExtendProperty';
export declare const ChipFM6518RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    ScanCount: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6518RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6518.decompiled.cs:6602
 */
export declare const ChipFM6518RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
        RegFourth: t.Type<number, number, unknown>;
        RegFifth: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<number, number, unknown>;
        IsFirstLineSlantsDark: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        ChannelStaggering: t.Type<number, number, unknown>;
        IsCouplingOptimize: t.Type<boolean, boolean, unknown>;
        CouplingOptimize: t.Type<number, number, unknown>;
        IsClampEnhancement: t.Type<boolean, boolean, unknown>;
        IsShadowingEnhancement: t.Type<boolean, boolean, unknown>;
        ChannelOpeningSpeed: t.Type<number, number, unknown>;
        ChannelClosingSpeed: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6518ExtendProperty">;
    }>]>;
    ScanCount: t.Type<number, number, unknown>;
    IsStarSwipPoint: t.Type<boolean, boolean, unknown>;
    IsAdvancedModel: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6518RGBVExtendProperty">;
}>]>;
export interface ChipFM6518RGBVExtendProperty extends t.TypeOf<typeof ChipFM6518RGBVExtendProperty> {
    RedProperty?: ChipFM6518ExtendProperty;
    GreenProperty?: ChipFM6518ExtendProperty;
    BlueProperty?: ChipFM6518ExtendProperty;
    VRedProperty?: ChipFM6518ExtendProperty;
}

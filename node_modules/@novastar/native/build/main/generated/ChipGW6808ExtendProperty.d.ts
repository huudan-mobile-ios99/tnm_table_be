import * as t from 'io-ts';
import * as common from '../lib/common';
export declare const ChipGW6808ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ConfigValue7: t.Type<number, number, unknown>;
    ConfigValue8: t.Type<number, number, unknown>;
    ConfigValue9: t.Type<number, number, unknown>;
    ConfigValue17: t.Type<number, number, unknown>;
    ConfigValue18: t.Type<number, number, unknown>;
    ConfigValue19: t.Type<number, number, unknown>;
    ConfigValue20: t.Type<number, number, unknown>;
    ConfigValue21: t.Type<number, number, unknown>;
    ConfigValue22: t.Type<number, number, unknown>;
    ConfigValue23: t.Type<number, number, unknown>;
    ConfigValue24: t.Type<number, number, unknown>;
    ConfigValue25: t.Type<number, number, unknown>;
    ConfigValue26: t.Type<number, number, unknown>;
    ConfigValue27: t.Type<number, number, unknown>;
    ConfigValue28: t.Type<number, number, unknown>;
    ConfigValue29: t.Type<number, number, unknown>;
    ConfigValue30: t.Type<number, number, unknown>;
    ConfigValue31: t.Type<number, number, unknown>;
    ConfigValue32: t.Type<number, number, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    ConfigArray: common.BufferFromBase64;
    ConfigValue1: t.Type<number, number, unknown>;
    ConfigValue2: t.Type<number, number, unknown>;
    ConfigValue3: t.Type<number, number, unknown>;
    ConfigValue4: t.Type<number, number, unknown>;
    ConfigValue5: t.Type<number, number, unknown>;
    ConfigValue6: t.Type<number, number, unknown>;
    ConfigValue10: t.Type<number, number, unknown>;
    ConfigValue11: t.Type<number, number, unknown>;
    ConfigValue12: t.Type<number, number, unknown>;
    ConfigValue13: t.Type<number, number, unknown>;
    ConfigValue14: t.Type<number, number, unknown>;
    ConfigValue15: t.Type<number, number, unknown>;
    ConfigValue16: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipGW6808ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:46890
 */
export declare const ChipGW6808ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ConfigValue7: t.Type<number, number, unknown>;
    ConfigValue8: t.Type<number, number, unknown>;
    ConfigValue9: t.Type<number, number, unknown>;
    ConfigValue17: t.Type<number, number, unknown>;
    ConfigValue18: t.Type<number, number, unknown>;
    ConfigValue19: t.Type<number, number, unknown>;
    ConfigValue20: t.Type<number, number, unknown>;
    ConfigValue21: t.Type<number, number, unknown>;
    ConfigValue22: t.Type<number, number, unknown>;
    ConfigValue23: t.Type<number, number, unknown>;
    ConfigValue24: t.Type<number, number, unknown>;
    ConfigValue25: t.Type<number, number, unknown>;
    ConfigValue26: t.Type<number, number, unknown>;
    ConfigValue27: t.Type<number, number, unknown>;
    ConfigValue28: t.Type<number, number, unknown>;
    ConfigValue29: t.Type<number, number, unknown>;
    ConfigValue30: t.Type<number, number, unknown>;
    ConfigValue31: t.Type<number, number, unknown>;
    ConfigValue32: t.Type<number, number, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    ConfigArray: common.BufferFromBase64;
    ConfigValue1: t.Type<number, number, unknown>;
    ConfigValue2: t.Type<number, number, unknown>;
    ConfigValue3: t.Type<number, number, unknown>;
    ConfigValue4: t.Type<number, number, unknown>;
    ConfigValue5: t.Type<number, number, unknown>;
    ConfigValue6: t.Type<number, number, unknown>;
    ConfigValue10: t.Type<number, number, unknown>;
    ConfigValue11: t.Type<number, number, unknown>;
    ConfigValue12: t.Type<number, number, unknown>;
    ConfigValue13: t.Type<number, number, unknown>;
    ConfigValue14: t.Type<number, number, unknown>;
    ConfigValue15: t.Type<number, number, unknown>;
    ConfigValue16: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipGW6808ExtendProperty">;
}>]>;
export interface ChipGW6808ExtendProperty extends t.TypeOf<typeof ChipGW6808ExtendProperty> {
}

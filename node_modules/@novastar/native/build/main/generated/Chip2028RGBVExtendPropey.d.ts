import * as t from 'io-ts';
import { ChipSUM2028ExtendProperty } from './ChipSUM2028ExtendProperty';
export declare const Chip2028RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip2028RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:47971
 */
export declare const Chip2028RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        ColorCompensate: t.Type<number, number, unknown>;
        UpdataType: t.Type<boolean, boolean, unknown>;
        OEType: t.Type<boolean, boolean, unknown>;
        SetDisapparate: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SetFrequency: t.Type<number, number, unknown>;
        SetConstantCurrent: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2028ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip2028RGBVExtendPropey">;
}>]>;
export interface Chip2028RGBVExtendPropey extends t.TypeOf<typeof Chip2028RGBVExtendPropey> {
    RedProperty?: ChipSUM2028ExtendProperty;
    GreenProperty?: ChipSUM2028ExtendProperty;
    BlueProperty?: ChipSUM2028ExtendProperty;
    VRedProperty?: ChipSUM2028ExtendProperty;
}

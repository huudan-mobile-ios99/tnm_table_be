import * as t from 'io-ts';
import { LowAshGradeEnum } from './LowAshGrade';
import { MultiplierGradeEnum } from './MultiplierGrade';
import { OpenTestVoltageGradeEnum } from './OpenTestVoltageGrade';
import { PWMModelEnum } from './PWMModel';
export declare const ChipSM16259ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsShadowsEnable: t.Type<boolean, boolean, unknown>;
    MultiplierGrade: t.Type<MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
    ScanTypeUshort: t.Type<number, number, unknown>;
    LowAshCompensationTwo: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    RegValueConfigFirst: t.Type<number, number, unknown>;
    LowAshCompensationOne: t.Type<number, number, unknown>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestVoltageGrade: t.Type<OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
    BlankingMode: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
    IsEnergySaving: t.Type<boolean, boolean, unknown>;
    ShadowVoltageOne: t.Type<number, number, unknown>;
    ShadowVoltageTwo: t.Type<number, number, unknown>;
    PWMModel: t.Type<PWMModelEnum, "OneModel" | "TwoModel", unknown>;
    RegValueConfigThird: t.Type<number, number, unknown>;
    RegValueConfigForth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshGrade: t.Type<LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16259ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16259.decompiled.cs:110
 */
export declare const ChipSM16259ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsShadowsEnable: t.Type<boolean, boolean, unknown>;
    MultiplierGrade: t.Type<MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
    ScanTypeUshort: t.Type<number, number, unknown>;
    LowAshCompensationTwo: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    RegValueConfigFirst: t.Type<number, number, unknown>;
    LowAshCompensationOne: t.Type<number, number, unknown>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestVoltageGrade: t.Type<OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
    BlankingMode: t.Type<number, number, unknown>;
    RegValueConfigSecond: t.Type<number, number, unknown>;
    IsEnergySaving: t.Type<boolean, boolean, unknown>;
    ShadowVoltageOne: t.Type<number, number, unknown>;
    ShadowVoltageTwo: t.Type<number, number, unknown>;
    PWMModel: t.Type<PWMModelEnum, "OneModel" | "TwoModel", unknown>;
    RegValueConfigThird: t.Type<number, number, unknown>;
    RegValueConfigForth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LowAshGrade: t.Type<LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
}>]>;
export interface ChipSM16259ExtendProperty extends t.TypeOf<typeof ChipSM16259ExtendProperty> {
    MultiplierGrade: MultiplierGradeEnum;
    OpenTestVoltageGrade: OpenTestVoltageGradeEnum;
    PWMModel: PWMModelEnum;
    LowAshGrade?: LowAshGradeEnum;
}

import * as t from 'io-ts';
import { AdjustModeEnum } from './AdjustMode';
/**
 * @category Codecs
 * @desc Codec for interface {@link SetBrightData}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ProtocolEnum.decompiled.cs:31
 */
export declare const SetBrightData: t.IntersectionC<[t.TypeC<{
    PosNumber: t.Type<number, number, unknown>;
    SectionNumber: t.Type<number, number, unknown>;
    MaxLuxData: t.Type<number, number, unknown>;
    MinLuxData: t.Type<number, number, unknown>;
    MaxAdjustBright: t.Type<number, number, unknown>;
    MinAdjustBright: t.Type<number, number, unknown>;
    LightSensorDataList: t.ArrayC<t.IntersectionC<[t.TypeC<{
        POS_STORAGE_SPACE: t.Type<number, number, unknown>;
        LightSensorSite: t.Type<import("./EnLightSensorSite").EnLightSensorSiteEnum, "FunctionCard" | "SendCard" | "None", unknown>;
        FunctionCardPosSite: t.Type<number, number, unknown>;
        PortAddrPosSite: t.Type<number, number, unknown>;
        PosInFunctionCardAddr: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>>;
}>, t.PartialC<{
    IsHWAutoBright: t.Type<boolean, boolean, unknown>;
    IsConfigurationSetted: t.Type<boolean, boolean, unknown>;
    SelectAdjustMode: t.Type<AdjustModeEnum, "CommonMode" | "HighMode", unknown>;
}>]>;
export interface SetBrightData extends t.TypeOf<typeof SetBrightData> {
    SelectAdjustMode?: AdjustModeEnum;
}

import * as t from 'io-ts';
import { Chip16169sExtendProperty } from './Chip16169sExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip16169sRGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:51786
 */
export declare const Chip16169sRGBExtendProperty: t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("./ScanType").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("./ScanType").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FailureLEDEliminationGainLevel: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowGayCompensation: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<boolean, boolean, unknown>;
        OpenTestGrade: t.Type<number, number, unknown>;
        ShadowVoltage: t.Type<number, number, unknown>;
        IsClearGhostEnable: t.Type<boolean, boolean, unknown>;
        SubFields: t.Type<number, number, unknown>;
        ScanType: t.Type<import("./ScanType").ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
        GrayDepth: t.Type<number, number, unknown>;
        LowGayCompensationEnhance: t.Type<boolean, boolean, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16169sExtendProperty">;
    }>]>;
}>;
export interface Chip16169sRGBExtendProperty extends t.TypeOf<typeof Chip16169sRGBExtendProperty> {
    RedProperty?: Chip16169sExtendProperty;
    GreenProperty?: Chip16169sExtendProperty;
    BlueProperty?: Chip16169sExtendProperty;
}

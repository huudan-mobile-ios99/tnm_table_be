import * as t from 'io-ts';
import { ChipSUM2033BaseExtendProperty } from './ChipSUM2033BaseExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link ChipSUM2033ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:49514
 */
export declare const ChipSUM2033ExtendProperty: t.IntersectionC<[t.TypeC<{
    RedVanishingRating: t.Type<number, number, unknown>;
    GreenVanishingRating: t.Type<number, number, unknown>;
    BlueVanishingRating: t.Type<number, number, unknown>;
    VRedVanishingRating: t.Type<number, number, unknown>;
    RedRegValueConfigFourth: t.Type<number, number, unknown>;
    GreenRegValueConfigFourth: t.Type<number, number, unknown>;
    BlueRegValueConfigFourth: t.Type<number, number, unknown>;
    VRedRegValueConfigFourth: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        CompensationLevel: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
        CurrentWork: t.Type<boolean, boolean, unknown>;
        SystemRetainsSecond: t.Type<number, number, unknown>;
        ConstantSettings: t.Type<number, number, unknown>;
        CurrentSynchronou: t.Type<number, number, unknown>;
        OpenCircuitCheck: t.Type<number, number, unknown>;
        VanishingMode: t.Type<number, number, unknown>;
        GCLKFrequency: t.Type<number, number, unknown>;
        SystemRetainsThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
    }>]>;
    UsingBright: t.Type<boolean, boolean, unknown>;
    UsingSUM2033Gamma: t.Type<boolean, boolean, unknown>;
    IsDoubleRate: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
}>]>;
export interface ChipSUM2033ExtendProperty extends t.TypeOf<typeof ChipSUM2033ExtendProperty> {
    RedProperty?: ChipSUM2033BaseExtendProperty;
    GreenProperty?: ChipSUM2033BaseExtendProperty;
    BlueProperty?: ChipSUM2033BaseExtendProperty;
    VRedProperty?: ChipSUM2033BaseExtendProperty;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
export declare const ChipAXS6018RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    WeightValueConfig: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegData: common.BufferFromBase64;
    SecondRegData: common.BufferFromBase64;
    ThirdRegData: common.BufferFromBase64;
    FourthRegData: common.BufferFromBase64;
    FifthRegData: common.BufferFromBase64;
    SixthRegData: common.BufferFromBase64;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    ChargingOften: t.Type<number, number, unknown>;
    LineShadowTime: t.Type<number, number, unknown>;
    ShadowChargingMode: t.Type<number, number, unknown>;
    AdditionalField: t.Type<number, number, unknown>;
    HighGrayGain: t.Type<number, number, unknown>;
    MultilevelCurrent: t.Type<boolean, boolean, unknown>;
    BlackLine: t.Type<number, number, unknown>;
    DischargeTime: t.Type<number, number, unknown>;
    DischargeR: t.Type<boolean, boolean, unknown>;
    DischargeG: t.Type<boolean, boolean, unknown>;
    DischargeB: t.Type<boolean, boolean, unknown>;
    RextR: t.Type<number, number, unknown>;
    RextG: t.Type<number, number, unknown>;
    RextB: t.Type<number, number, unknown>;
    TubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    LineTubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    Contrast: t.Type<number, number, unknown>;
    GammaGloablBright: t.Type<number, number, unknown>;
    GammaRBright: t.Type<number, number, unknown>;
    GammaGBright: t.Type<number, number, unknown>;
    GammaBBright: t.Type<number, number, unknown>;
    LineCP: t.Type<number, number, unknown>;
    CtrlEndPoint: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipAXS6018RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipAXS6018.decompiled.cs:2231
 */
export declare const ChipAXS6018RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    WeightValueConfig: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegData: common.BufferFromBase64;
    SecondRegData: common.BufferFromBase64;
    ThirdRegData: common.BufferFromBase64;
    FourthRegData: common.BufferFromBase64;
    FifthRegData: common.BufferFromBase64;
    SixthRegData: common.BufferFromBase64;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    FifthRegisterAddr: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FifthDataLen: t.Type<number, number, unknown>;
    FifthStartIndex: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    ChargingOften: t.Type<number, number, unknown>;
    LineShadowTime: t.Type<number, number, unknown>;
    ShadowChargingMode: t.Type<number, number, unknown>;
    AdditionalField: t.Type<number, number, unknown>;
    HighGrayGain: t.Type<number, number, unknown>;
    MultilevelCurrent: t.Type<boolean, boolean, unknown>;
    BlackLine: t.Type<number, number, unknown>;
    DischargeTime: t.Type<number, number, unknown>;
    DischargeR: t.Type<boolean, boolean, unknown>;
    DischargeG: t.Type<boolean, boolean, unknown>;
    DischargeB: t.Type<boolean, boolean, unknown>;
    RextR: t.Type<number, number, unknown>;
    RextG: t.Type<number, number, unknown>;
    RextB: t.Type<number, number, unknown>;
    TubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    LineTubeDischargeEnable: t.Type<boolean, boolean, unknown>;
    Contrast: t.Type<number, number, unknown>;
    GammaGloablBright: t.Type<number, number, unknown>;
    GammaRBright: t.Type<number, number, unknown>;
    GammaGBright: t.Type<number, number, unknown>;
    GammaBBright: t.Type<number, number, unknown>;
    LineCP: t.Type<number, number, unknown>;
    CtrlEndPoint: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipAXS6018RGBVExtendProperty">;
}>]>;
export interface ChipAXS6018RGBVExtendProperty extends t.TypeOf<typeof ChipAXS6018RGBVExtendProperty> {
}

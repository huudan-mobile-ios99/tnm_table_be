import * as t from 'io-ts';
export declare const ChipCS2066ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    SeventhRegValue: t.Type<number, number, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    ScanNumSetting: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverCycleNumSetting: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CoupledOutputShift: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    PWMGraySetting: t.Type<number, number, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    CurrentCompsentionGear: t.Type<number, number, unknown>;
    WakeUpSettings: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2066ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2066.decompiled.cs:7863
 */
export declare const ChipCS2066ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    SeventhRegValue: t.Type<number, number, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    ScanNumSetting: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowAshEnhanceUniformity: t.Type<number, number, unknown>;
    LineBlankStrength: t.Type<number, number, unknown>;
    OutputResponse: t.Type<number, number, unknown>;
    PerDriverCycleNumSetting: t.Type<number, number, unknown>;
    LineBlankEnhanceModeEn: t.Type<boolean, boolean, unknown>;
    CoupledOutputShift: t.Type<number, number, unknown>;
    OpenTestPointAdjust: t.Type<number, number, unknown>;
    CouplingOptimizationEn: t.Type<boolean, boolean, unknown>;
    LowGrayCompsentionTimeSettingMode: t.Type<number, number, unknown>;
    CouplingRangeAdjust: t.Type<number, number, unknown>;
    PerDriverEnable: t.Type<boolean, boolean, unknown>;
    PWMGraySetting: t.Type<number, number, unknown>;
    OpenProtectEnable: t.Type<boolean, boolean, unknown>;
    ScanMode: t.Type<number, number, unknown>;
    LowGrayPulseWidthCompensation: t.Type<number, number, unknown>;
    PLLFreqDivision: t.Type<number, number, unknown>;
    PLLFreqDoubling: t.Type<number, number, unknown>;
    CurrentGear: t.Type<number, number, unknown>;
    LowGrayCompsentionStrength: t.Type<number, number, unknown>;
    OpenDynamicTestEnable: t.Type<boolean, boolean, unknown>;
    CurrentCompsentionEnable: t.Type<boolean, boolean, unknown>;
    ConstantCurrentInflectionPoint: t.Type<number, number, unknown>;
    DynamicEnergySavingEn: t.Type<boolean, boolean, unknown>;
    LineEliminationLength: t.Type<number, number, unknown>;
    PerDriverMode: t.Type<number, number, unknown>;
    PerDriverTimeSetting: t.Type<number, number, unknown>;
    OpentestThresholdValue: t.Type<number, number, unknown>;
    CurrentCompsentionGear: t.Type<number, number, unknown>;
    WakeUpSettings: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2066ExtendProperty">;
}>]>;
export interface ChipCS2066ExtendProperty extends t.TypeOf<typeof ChipCS2066ExtendProperty> {
}

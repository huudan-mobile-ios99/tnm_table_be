import * as t from 'io-ts';
import * as common from '../lib/common';
/**
 * @category Codecs
 * @desc Codec for interface {@link LS9960Data}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:7086
 */
export declare const LS9960Data: t.IntersectionC<[t.TypeC<{
    FriedFreuquance: t.Type<number, number, unknown>;
    ClkAndPhaseClock: t.Type<number, number, unknown>;
    ConnnectUnitCount: t.Type<number, number, unknown>;
    ICNumberOrder: t.StringC;
    RowElimination: t.Type<number, number, unknown>;
    ColElimination: t.Type<number, number, unknown>;
    ShiftClockList: t.ArrayC<t.Type<number, number, unknown>>;
    GammaStepupLength: t.Type<number, number, unknown>;
    GammaModulus: t.Type<number, number, unknown>;
    TableMode: t.Type<number, number, unknown>;
}>, t.PartialC<{
    PmData: common.BufferFromBase64;
    DmFirstData: common.BufferFromBase64;
    DmSecondData: common.BufferFromBase64;
    DmThridData: common.BufferFromBase64;
    WspData: common.BufferFromBase64;
    ScanType: t.Type<number, number, unknown>;
    MaxFreshRate: t.Type<number, number, unknown>;
    MinFreshRate: t.Type<number, number, unknown>;
    MinGamaValue: t.Type<number, number, unknown>;
    MaxGamaValue: t.Type<number, number, unknown>;
    GameTable: common.BufferFromBase64;
    ContrastValue: t.Type<number, number, unknown>;
    BirghtEfficty: t.Type<number, number, unknown>;
    UnitIcCount: t.Type<number, number, unknown>;
    RedJump: t.Type<number, number, unknown>;
    GreenJump: t.Type<number, number, unknown>;
    BlueJump: t.Type<number, number, unknown>;
    RedCurrentValue: t.Type<number, number, unknown>;
    GreenCurrentValue: t.Type<number, number, unknown>;
    BlueCurrentValue: t.Type<number, number, unknown>;
    ClokPhase: t.Type<number, number, unknown>;
    ShiftClock: t.Type<number, number, unknown>;
    ScanLineArray: common.BufferFromBase64;
    IsSelfMode: t.Type<boolean, boolean, unknown>;
    MoudleWeidth: t.Type<number, number, unknown>;
    MoudleHeight: t.Type<number, number, unknown>;
    BrightMaxValue: t.Type<number, number, unknown>;
    RGBSQ: t.Type<number, number, unknown>;
    RedColPhase: t.Type<number, number, unknown>;
    GreenColPhase: t.Type<number, number, unknown>;
    BlueColPhase: t.Type<number, number, unknown>;
    ConpensationValue: t.Type<number, number, unknown>;
    ScanNum: t.Type<number, number, unknown>;
    RgbSeq: t.Type<number, number, unknown>;
    FirstDarkertoeliminateR: t.Type<number, number, unknown>;
    FirstDarkertoeliminateG: t.Type<number, number, unknown>;
    FirstDarkertoeliminateB: t.Type<number, number, unknown>;
    Vol_blkl: t.Type<number, number, unknown>;
    Mode_blkl: t.Type<number, number, unknown>;
    MinPulseR: t.Type<number, number, unknown>;
    MinPulseG: t.Type<number, number, unknown>;
    MinPulseB: t.Type<number, number, unknown>;
    BlkIC: t.Type<number, number, unknown>;
    ColBankingMode: t.Type<number, number, unknown>;
    PllMode: t.Type<number, number, unknown>;
    NVersion: t.Type<number, number, unknown>;
    CutTime: t.Type<number, number, unknown>;
    LowPower: t.Type<number, number, unknown>;
    PreVoltageRed: t.Type<number, number, unknown>;
    PreVoltageGreen: t.Type<number, number, unknown>;
    PreVoltageBlue: t.Type<number, number, unknown>;
    Pre96Port: t.Type<number, number, unknown>;
}>]>;
export interface LS9960Data extends t.TypeOf<typeof LS9960Data> {
}

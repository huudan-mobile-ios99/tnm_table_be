"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScannerMonitorData = void 0;
const t = __importStar(require("io-ts"));
const common = __importStar(require("../lib/common"));
const MSRvCardStatusType_1 = require("./MSRvCardStatusType");
const MSRvCardWorkType_1 = require("./MSRvCardWorkType");
const OneModuleInfo_1 = require("./OneModuleInfo");
const ScanBoardProperty_1 = require("./ScanBoardProperty");
const ScanBoardRegionInfo_1 = require("./ScanBoardRegionInfo");
const SmokeAlarmInfo_1 = require("./SmokeAlarmInfo");
const ValueInfo_1 = require("./ValueInfo");
const WorkStatusType_1 = require("./WorkStatusType");
/**
 * @category Codecs
 * @desc Codec for interface {@link ScannerMonitorData}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:60733
 */
exports.ScannerMonitorData = t.intersection([
    t.type({
        IsMasterCard: common.Bool_true,
        FanSpeedOfMonitorCardCollection: common.XMLArray(ValueInfo_1.ValueInfo, 'ValueInfo'),
        VoltageOfMonitorCardCollection: common.XMLArray(ValueInfo_1.ValueInfo, 'ValueInfo'),
        ModuleInfoList: common.XMLArray(OneModuleInfo_1.OneModuleInfo, 'OneModuleInfo'),
    }),
    t.partial({
        ScreenIndex: common.UInt8,
        IsConnectMC: common.Bool,
        IsConnectHubMC: common.Bool,
        ScanBdPorpertyInfo: ScanBoardProperty_1.ScanBoardProperty,
        SBRegionInfo: ScanBoardRegionInfo_1.ScanBoardRegionInfo,
        WorkStatus: WorkStatusType_1.WorkStatusType,
        MSRvCardStatus: MSRvCardStatusType_1.MSRvCardStatusType,
        MSRvCardWork: MSRvCardWorkType_1.MSRvCardWorkType,
        TemperatureOfScanCard: ValueInfo_1.ValueInfo,
        HumidityOfScanCard: ValueInfo_1.ValueInfo,
        VoltageOfScanCard: ValueInfo_1.ValueInfo,
        TemperatureOfMonitorCard: ValueInfo_1.ValueInfo,
        HumidityOfMonitorCard: ValueInfo_1.ValueInfo,
        SmokeWarn: SmokeAlarmInfo_1.SmokeAlarmInfo,
        GeneralStatusData: common.UInt8,
        AnalogInputBytes: common.Base64,
        ModuleStatusBytes: common.Base64,
        MonitorDataBytes: common.Base64,
        MonitorGroupSwapEnable: common.Bool,
        MonitorGroupData: common.Base64,
        ScanBordMCUVersionName: t.string,
        ScanBordFPGAVersionName: t.string,
        ScanBordMoudId: t.string,
        MonitorScanBdBackPowerDataBytes: common.Base64,
        IsRedu: common.Bool,
    }),
], 'ScannerMonitorData');
//# sourceMappingURL=ScannerMonitorData.js.map
import * as t from 'io-ts';
import { ChipICND2112ExtendProperty } from './ChipICND2112ExtendProperty';
export declare const ChipICND2112RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    MaxUnitChipPerScan: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2112RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2112.decompiled.cs:169
 */
export declare const ChipICND2112RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        RegThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2112ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    MaxUnitChipPerScan: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2112RGBVExtendPropey">;
}>]>;
export interface ChipICND2112RGBVExtendPropey extends t.TypeOf<typeof ChipICND2112RGBVExtendPropey> {
    RedProperty?: ChipICND2112ExtendProperty;
    GreenProperty?: ChipICND2112ExtendProperty;
    BlueProperty?: ChipICND2112ExtendProperty;
    VRedProperty?: ChipICND2112ExtendProperty;
}

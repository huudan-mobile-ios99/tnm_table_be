import * as t from 'io-ts';
export declare const ChipRZRGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    BitLevel: t.Type<number, number, unknown>;
    OpenGain: t.Type<boolean, boolean, unknown>;
    RZ_T1L: t.Type<number, number, unknown>;
    RZ_T0L: t.Type<number, number, unknown>;
    RZ_T: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipRZRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipRZ.decompiled.cs:886
 */
export declare const ChipRZRGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    BitLevel: t.Type<number, number, unknown>;
    OpenGain: t.Type<boolean, boolean, unknown>;
    RZ_T1L: t.Type<number, number, unknown>;
    RZ_T0L: t.Type<number, number, unknown>;
    RZ_T: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRZRGBVExtendProperty">;
}>]>;
export interface ChipRZRGBVExtendProperty extends t.TypeOf<typeof ChipRZRGBVExtendProperty> {
}

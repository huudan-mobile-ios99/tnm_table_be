import * as t from 'io-ts';
export declare const ChipSUM2033BaseExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CompensationLevel: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
    CurrentWork: t.Type<boolean, boolean, unknown>;
    SystemRetainsSecond: t.Type<number, number, unknown>;
    ConstantSettings: t.Type<number, number, unknown>;
    CurrentSynchronou: t.Type<number, number, unknown>;
    OpenCircuitCheck: t.Type<number, number, unknown>;
    VanishingMode: t.Type<number, number, unknown>;
    GCLKFrequency: t.Type<number, number, unknown>;
    SystemRetainsThird: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSUM2033BaseExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:49312
 */
export declare const ChipSUM2033BaseExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CompensationLevel: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    OpenCircuitProtection: t.Type<boolean, boolean, unknown>;
    CurrentWork: t.Type<boolean, boolean, unknown>;
    SystemRetainsSecond: t.Type<number, number, unknown>;
    ConstantSettings: t.Type<number, number, unknown>;
    CurrentSynchronou: t.Type<number, number, unknown>;
    OpenCircuitCheck: t.Type<number, number, unknown>;
    VanishingMode: t.Type<number, number, unknown>;
    GCLKFrequency: t.Type<number, number, unknown>;
    SystemRetainsThird: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSUM2033BaseExtendProperty">;
}>]>;
export interface ChipSUM2033BaseExtendProperty extends t.TypeOf<typeof ChipSUM2033BaseExtendProperty> {
}

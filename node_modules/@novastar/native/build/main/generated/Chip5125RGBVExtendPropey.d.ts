import * as t from 'io-ts';
import { ChipMBI525ExtendProperty } from './ChipMBI525ExtendProperty';
export declare const Chip5125RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OEPlusWidth: t.Type<number, number, unknown>;
    HardwareResetOne: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    HardwareResetTwo: t.Type<number, number, unknown>;
    SoftwareReset: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip5125RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:42974
 */
export declare const Chip5125RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    OEPlusWidth: t.Type<number, number, unknown>;
    HardwareResetOne: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowCompsention: t.Type<boolean, boolean, unknown>;
        RefreshUp: t.Type<boolean, boolean, unknown>;
        GhostStall: t.Type<number, number, unknown>;
        GhostModle: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        SettingNoise: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI525ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    HardwareResetTwo: t.Type<number, number, unknown>;
    SoftwareReset: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5125RGBVExtendPropey">;
}>]>;
export interface Chip5125RGBVExtendPropey extends t.TypeOf<typeof Chip5125RGBVExtendPropey> {
    RedProperty?: ChipMBI525ExtendProperty;
    GreenProperty?: ChipMBI525ExtendProperty;
    BlueProperty?: ChipMBI525ExtendProperty;
    VRedProperty?: ChipMBI525ExtendProperty;
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramRemarks) {
    if (scanner_FPGAProgramRemarks.length !== AddressMapping_1.default.Scanner_FPGAProgramRemarksOccupancy)
        throw new TypeError(`Invalid buffer size: ${scanner_FPGAProgramRemarks.length}`);
    const req = new codec_1.Request(scanner_FPGAProgramRemarks, bBroadcast, 'SetScanner_FPGAProgramRemarks');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.Scanner_FPGAProgramRemarksAddr;
    return req;
}
exports.default = createSetScanner_FPGAProgramRemarks;
codec_1.Session.prototype.SetScanner_FPGAProgramRemarks = async function SetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramRemarks) {
    const req = createSetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramRemarks);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetScanner_FPGAProgramRemarks =
    async function trySetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, scanner_FPGAProgramRemarks) {
        const req = createSetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, false, scanner_FPGAProgramRemarks);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetScanner_FPGAProgramRemarks.js.map
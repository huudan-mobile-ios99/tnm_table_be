"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetSender_VideoMosaicData(addr, bBoradcast, data) {
    if (data.length !== AddressMapping_1.default.Sender_VideoMosaicOccupancy)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoMosaicData');
    req.destination = addr;
    req.address = AddressMapping_1.default.Sender_VideoMosaicAddr;
    return req;
}
exports.default = createSetSender_VideoMosaicData;
codec_1.Session.prototype.SetSender_VideoMosaicData = async function SetSender_VideoMosaicData(addr, bBoradcast, data) {
    const req = createSetSender_VideoMosaicData(addr, bBoradcast, data);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetSender_VideoMosaicData = async function trySetSender_VideoMosaicData(addr, data) {
    const req = createSetSender_VideoMosaicData(addr, false, data);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_VideoMosaicData.js.map
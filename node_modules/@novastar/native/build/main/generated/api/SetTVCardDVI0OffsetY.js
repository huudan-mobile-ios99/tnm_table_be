"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY) {
    const $data = (0, codec_1.encodeUIntLE)(dviOffsetY, AddressMapping_1.default.TVCardDVI0OffsetYOccupancy);
    const req = new codec_1.Request($data, bBroadcast, 'SetTVCardDVI0OffsetY');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.TVCardDVI0OffsetYAddr;
    return req;
}
exports.default = createSetTVCardDVI0OffsetY;
codec_1.Session.prototype.SetTVCardDVI0OffsetY = async function SetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY) {
    const req = createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetTVCardDVI0OffsetY = async function trySetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, dviOffsetY) {
    const req = createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, false, dviOffsetY);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetTVCardDVI0OffsetY.js.map
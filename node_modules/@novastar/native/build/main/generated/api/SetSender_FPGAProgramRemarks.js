"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramRemarks) {
    if (sender_FPGAProgramRemarks.length !== AddressMapping_1.default.Sender_FPGAProgramRemarksOccupancy)
        throw new TypeError(`Invalid buffer size: ${sender_FPGAProgramRemarks.length}`);
    const req = new codec_1.Request(sender_FPGAProgramRemarks, bBroadcast, 'SetSender_FPGAProgramRemarks');
    req.destination = addr;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.Sender_FPGAProgramRemarksAddr;
    return req;
}
exports.default = createSetSender_FPGAProgramRemarks;
codec_1.Session.prototype.SetSender_FPGAProgramRemarks = async function SetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramRemarks) {
    const req = createSetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramRemarks);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetSender_FPGAProgramRemarks = async function trySetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, sender_FPGAProgramRemarks) {
    const req = createSetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, false, sender_FPGAProgramRemarks);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_FPGAProgramRemarks.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createWriteLowCoef(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    if (data.length !== AddressMapping_1.default.CoefAddrOccupancy)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new codec_1.Request(data, bBroadcast, 'WriteLowCoef');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.CoefLowAddr;
    return req;
}
exports.default = createWriteLowCoef;
codec_1.Session.prototype.WriteLowCoef = async function WriteLowCoef(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    const req = createWriteLowCoef(addr, portAddr, scanBoardAddr, bBroadcast, data);
    await this.connection.send(req);
};
codec_1.Session.prototype.tryWriteLowCoef = async function tryWriteLowCoef(addr, portAddr, scanBoardAddr, data) {
    const req = createWriteLowCoef(addr, portAddr, scanBoardAddr, false, data);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteLowCoef.js.map
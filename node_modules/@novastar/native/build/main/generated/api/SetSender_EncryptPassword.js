"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetSender_EncryptPassword(addr, bBroadcast, Passward) {
    if (Passward.length !== AddressMapping_1.default.Sender_EncryptPasswordOccupancy)
        throw new TypeError(`Invalid buffer size: ${Passward.length}`);
    const req = new codec_1.Request(Passward, bBroadcast, 'SetSender_EncryptPassword');
    req.destination = addr;
    req.address = AddressMapping_1.default.Sender_EncryptPasswordAddr;
    return req;
}
exports.default = createSetSender_EncryptPassword;
codec_1.Session.prototype.SetSender_EncryptPassword = async function SetSender_EncryptPassword(addr, bBroadcast, Passward) {
    const req = createSetSender_EncryptPassword(addr, bBroadcast, Passward);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetSender_EncryptPassword = async function trySetSender_EncryptPassword(addr, Passward) {
    const req = createSetSender_EncryptPassword(addr, false, Passward);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_EncryptPassword.js.map
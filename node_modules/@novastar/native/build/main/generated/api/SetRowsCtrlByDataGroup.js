"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup) {
    if (countCtrlByDataGroup.length !==
        AddressMapping_1.default.RowsCtrlByDataGroupOccupancy * AddressMapping_1.default.RowsCtrlByDataGroupNum)
        throw new TypeError(`Invalid buffer size: ${countCtrlByDataGroup.length}`);
    const req = new codec_1.Request(countCtrlByDataGroup, bBroadcast, 'SetRowsCtrlByDataGroup');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.RowsCtrlByDataGroupAddr;
    return req;
}
exports.default = createSetRowsCtrlByDataGroup;
codec_1.Session.prototype.SetRowsCtrlByDataGroup = async function SetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup) {
    const req = createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetRowsCtrlByDataGroup = async function trySetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, countCtrlByDataGroup) {
    const req = createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, false, countCtrlByDataGroup);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetRowsCtrlByDataGroup.js.map
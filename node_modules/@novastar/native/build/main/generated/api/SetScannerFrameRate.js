"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetScannerFrameRate(addr, portAddr, scanBoardAddr, bBroadcast, frameRate) {
    const $data = (0, codec_1.encodeUIntLE)(frameRate, AddressMapping_1.default.DoubleModelCardSpaceRecordFreOccupancy);
    const req = new codec_1.Request($data, bBroadcast, 'SetScannerFrameRate');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.DoubleModelCardSpaceRecordFre;
    return req;
}
exports.default = createSetScannerFrameRate;
codec_1.Session.prototype.SetScannerFrameRate = async function SetScannerFrameRate(addr, portAddr, scanBoardAddr, bBroadcast, frameRate) {
    const req = createSetScannerFrameRate(addr, portAddr, scanBoardAddr, bBroadcast, frameRate);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetScannerFrameRate = async function trySetScannerFrameRate(addr, portAddr, scanBoardAddr, frameRate) {
    const req = createSetScannerFrameRate(addr, portAddr, scanBoardAddr, false, frameRate);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScannerFrameRate.js.map
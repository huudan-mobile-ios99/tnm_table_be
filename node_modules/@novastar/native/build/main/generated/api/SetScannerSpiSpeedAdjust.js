"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed) {
    if (speed.length !== AddressMapping_1.default.ScannerSpiSpeedAdjustOccupancy)
        throw new TypeError(`Invalid buffer size: ${speed.length}`);
    const req = new codec_1.Request(speed, bBroadcast, 'SetScannerSpiSpeedAdjust');
    req.destination = Sender;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.ScannerSpiSpeedAdjustAddr;
    return req;
}
exports.default = createSetScannerSpiSpeedAdjust;
codec_1.Session.prototype.SetScannerSpiSpeedAdjust = async function SetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed) {
    const req = createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetScannerSpiSpeedAdjust = async function trySetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, speed) {
    const req = createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, false, speed);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScannerSpiSpeedAdjust.js.map
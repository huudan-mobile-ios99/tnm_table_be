"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSet16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    if (data.length !== AddressMapping_1.default.ErrorPoint16259Occupancy)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new codec_1.Request(data, bBroadcast, 'Set16259EnSwipErrorPoint');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.ErrorPoint16259Addr;
    return req;
}
exports.default = createSet16259EnSwipErrorPoint;
codec_1.Session.prototype.Set16259EnSwipErrorPoint = async function Set16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    const req = createSet16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, bBroadcast, data);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySet16259EnSwipErrorPoint = async function trySet16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, data) {
    const req = createSet16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, false, data);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=Set16259EnSwipErrorPoint.js.map
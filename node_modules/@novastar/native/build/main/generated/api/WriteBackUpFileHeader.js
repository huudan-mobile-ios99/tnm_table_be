"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createWriteBackUpFileHeader(addr, bBroadcast, writeData) {
    if (writeData.length !== AddressMapping_1.default.BackUpFileHeaderAddrOccupancy)
        throw new TypeError(`Invalid buffer size: ${writeData.length}`);
    const req = new codec_1.Request(writeData, bBroadcast, 'WriteBackUpFileHeader');
    req.destination = addr;
    req.address = AddressMapping_1.default.BackUpFileHeaderAddr;
    return req;
}
exports.default = createWriteBackUpFileHeader;
codec_1.Session.prototype.WriteBackUpFileHeader = async function WriteBackUpFileHeader(addr, bBroadcast, writeData) {
    const req = createWriteBackUpFileHeader(addr, bBroadcast, writeData);
    await this.connection.send(req);
};
codec_1.Session.prototype.tryWriteBackUpFileHeader = async function tryWriteBackUpFileHeader(addr, writeData) {
    const req = createWriteBackUpFileHeader(addr, false, writeData);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteBackUpFileHeader.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetPCMacAddr(addr, portAddr, scanBoardAddr, bBroadcast, sendCardSn) {
    if (sendCardSn.length !== AddressMapping_1.default.PCMacAddrOccupancy)
        throw new TypeError(`Invalid buffer size: ${sendCardSn.length}`);
    const req = new codec_1.Request(sendCardSn, bBroadcast, 'SetPCMacAddr');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.PCMacAddrAddr;
    return req;
}
exports.default = createSetPCMacAddr;
codec_1.Session.prototype.SetPCMacAddr = async function SetPCMacAddr(addr, portAddr, scanBoardAddr, bBroadcast, sendCardSn) {
    const req = createSetPCMacAddr(addr, portAddr, scanBoardAddr, bBroadcast, sendCardSn);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetPCMacAddr = async function trySetPCMacAddr(addr, portAddr, scanBoardAddr, sendCardSn) {
    const req = createSetPCMacAddr(addr, portAddr, scanBoardAddr, false, sendCardSn);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetPCMacAddr.js.map
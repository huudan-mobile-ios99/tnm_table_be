"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig) {
    if (screenConfig.length !== AddressMapping_1.default.Sender_ScreenConfigFlagOccupancy)
        throw new TypeError(`Invalid buffer size: ${screenConfig.length}`);
    const req = new codec_1.Request(screenConfig, bBroadcast, 'SetSender_ScreenConfigFlagSpace');
    req.destination = addr;
    req.address = AddressMapping_1.default.Sender_ScreenConfigFlagAddr;
    return req;
}
exports.default = createSetSender_ScreenConfigFlagSpace;
codec_1.Session.prototype.SetSender_ScreenConfigFlagSpace = async function SetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig) {
    const req = createSetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetSender_ScreenConfigFlagSpace =
    async function trySetSender_ScreenConfigFlagSpace(addr, screenConfig) {
        const req = createSetSender_ScreenConfigFlagSpace(addr, false, screenConfig);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetSender_ScreenConfigFlagSpace.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createWriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    if (mutiChipRamA.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
    const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'WriteScannerRT5958TinyLineFeed');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.ReadRT5958TinyLineFeedAddr;
    return req;
}
exports.default = createWriteScannerRT5958TinyLineFeed;
codec_1.Session.prototype.WriteScannerRT5958TinyLineFeed = async function WriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    const req = createWriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA);
    await this.connection.send(req);
};
codec_1.Session.prototype.tryWriteScannerRT5958TinyLineFeed =
    async function tryWriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, mutiChipRamA) {
        const req = createWriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, false, mutiChipRamA);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=WriteScannerRT5958TinyLineFeed.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetABCDRollOver(addr, portAddr, scanBoardAddr, bBroadcast, isRollOver) {
    const req = new codec_1.Request(!isRollOver ? Buffer.alloc(1) : [1], bBroadcast, 'SetABCDRollOver');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.ABCDRollOverAddr;
    return req;
}
exports.default = createSetABCDRollOver;
codec_1.Session.prototype.SetABCDRollOver = async function SetABCDRollOver(addr, portAddr, scanBoardAddr, bBroadcast, isRollOver) {
    const req = createSetABCDRollOver(addr, portAddr, scanBoardAddr, bBroadcast, isRollOver);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetABCDRollOver = async function trySetABCDRollOver(addr, portAddr, scanBoardAddr, isRollOver) {
    const req = createSetABCDRollOver(addr, portAddr, scanBoardAddr, false, isRollOver);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetABCDRollOver.js.map
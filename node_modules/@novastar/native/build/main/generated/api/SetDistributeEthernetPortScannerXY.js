"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
    const $data = (0, codec_1.encodeUIntLE)((ethernetPortScannerX << 16) + ethernetPortScannerY, AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
        AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy);
    const req = new codec_1.Request($data, bBroadcast, 'SetDistributeEthernetPortScannerXY');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address =
        AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
            AddressMapping_1.default.DistributeEthernetPortScannerXAddr +
            (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
exports.default = createSetDistributeEthernetPortScannerXY;
codec_1.Session.prototype.SetDistributeEthernetPortScannerXY =
    async function SetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
        const req = createSetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex);
        await this.connection.send(req);
    };
codec_1.Session.prototype.trySetDistributeEthernetPortScannerXY =
    async function trySetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
        const req = createSetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, false, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetDistributeEthernetPortScannerXY.js.map
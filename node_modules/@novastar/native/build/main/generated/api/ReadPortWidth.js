"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createReadPortWidth(addr, index) {
    const req = new codec_1.Request(AddressMapping_1.default.PortWidthOccupancy, 'ReadPortWidth');
    req.destination = addr;
    req.address = 0;
    if (index >= AddressMapping_1.default.New32PortOccupancy) {
        req.address =
            AddressMapping_1.default.PortWidthNew32Addr +
                AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
    }
    else if (index >= AddressMapping_1.default.New16PortOccupancy) {
        req.address =
            AddressMapping_1.default.PortWidthNew16Addr +
                AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
    }
    else if (index >= AddressMapping_1.default.NewPortOccupancy) {
        req.address =
            AddressMapping_1.default.PortWidthNewAddr +
                AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
    }
    else {
        req.address = AddressMapping_1.default.PortWidthAddr + AddressMapping_1.default.PortOccupancy * index;
    }
    return req;
}
exports.default = createReadPortWidth;
codec_1.Session.prototype.ReadPortWidth = async function ReadPortWidth(addr, index) {
    const req = createReadPortWidth(addr, index);
    return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
};
codec_1.Session.prototype.tryReadPortWidth = async function tryReadPortWidth(addr, index) {
    const req = createReadPortWidth(addr, index);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadPortWidth.js.map
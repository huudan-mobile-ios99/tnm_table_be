"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    const req = new codec_1.Request(data, bBroadcast, 'SetColorAdjustMatrixType');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.ColorAdjustMatrixTypeAddr;
    return req;
}
exports.default = createSetColorAdjustMatrixType;
codec_1.Session.prototype.SetColorAdjustMatrixType = async function SetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    const req = createSetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, bBroadcast, data);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetColorAdjustMatrixType = async function trySetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, data) {
    const req = createSetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, false, data);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetColorAdjustMatrixType.js.map
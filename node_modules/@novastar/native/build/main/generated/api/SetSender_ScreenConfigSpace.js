"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetSender_ScreenConfigSpace(addr, bBroadcast, screenConfig) {
    if (screenConfig.length !== AddressMapping_1.default.Sender_ScreenConfigSpaceOccupancy)
        throw new TypeError(`Invalid buffer size: ${screenConfig.length}`);
    const req = new codec_1.Request(screenConfig, bBroadcast, 'SetSender_ScreenConfigSpace');
    req.destination = addr;
    req.address = AddressMapping_1.default.Sender_ScreenConfigSpaceAddr;
    return req;
}
exports.default = createSetSender_ScreenConfigSpace;
codec_1.Session.prototype.SetSender_ScreenConfigSpace = async function SetSender_ScreenConfigSpace(addr, bBroadcast, screenConfig) {
    const req = createSetSender_ScreenConfigSpace(addr, bBroadcast, screenConfig);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetSender_ScreenConfigSpace = async function trySetSender_ScreenConfigSpace(addr, screenConfig) {
    const req = createSetSender_ScreenConfigSpace(addr, false, screenConfig);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_ScreenConfigSpace.js.map
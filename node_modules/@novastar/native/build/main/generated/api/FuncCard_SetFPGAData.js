"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset) {
    const req = new codec_1.Request(data, bBroadcast, 'FuncCard_SetFPGAData');
    req.destination = addr;
    req.deviceType = 2;
    req.port = portAddr;
    req.rcvIndex = funcCardAddr;
    req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr + offset;
    return req;
}
exports.default = createFuncCard_SetFPGAData;
codec_1.Session.prototype.FuncCard_SetFPGAData = async function FuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset) {
    const req = createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset);
    await this.connection.send(req);
};
codec_1.Session.prototype.tryFuncCard_SetFPGAData = async function tryFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, data, offset) {
    const req = createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, false, data, offset);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=FuncCard_SetFPGAData.js.map
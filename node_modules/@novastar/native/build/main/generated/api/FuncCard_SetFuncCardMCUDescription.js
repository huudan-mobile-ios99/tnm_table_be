"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createFuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription) {
    if (funcCard_MCUDescription.length !== AddressMapping_1.default.FuncCard_MCUDescriptionOccupancy)
        throw new TypeError(`Invalid buffer size: ${funcCard_MCUDescription.length}`);
    const req = new codec_1.Request(funcCard_MCUDescription, bBroadcast, 'FuncCard_SetFuncCardMCUDescription');
    req.destination = addr;
    req.address = AddressMapping_1.default.FuncCard_MCUDescriptionAddr;
    return req;
}
exports.default = createFuncCard_SetFuncCardMCUDescription;
codec_1.Session.prototype.FuncCard_SetFuncCardMCUDescription =
    async function FuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription) {
        const req = createFuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription);
        await this.connection.send(req);
    };
codec_1.Session.prototype.tryFuncCard_SetFuncCardMCUDescription =
    async function tryFuncCard_SetFuncCardMCUDescription(addr, funcCard_MCUDescription) {
        const req = createFuncCard_SetFuncCardMCUDescription(addr, false, funcCard_MCUDescription);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=FuncCard_SetFuncCardMCUDescription.js.map
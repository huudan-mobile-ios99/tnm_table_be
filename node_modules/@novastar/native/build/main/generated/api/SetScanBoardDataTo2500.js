"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length) {
    if (data.length !== length)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new codec_1.Request(data, false, 'SetScanBoardDataTo2500');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portIndex;
    req.rcvIndex = scanIndex;
    req.address = AddressMapping_1.default.SDKNewReadOrWriteAddr;
    return req;
}
exports.default = createSetScanBoardDataTo2500;
codec_1.Session.prototype.SetScanBoardDataTo2500 = async function SetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length) {
    const req = createSetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetScanBoardDataTo2500 = async function trySetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length) {
    const req = createSetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanBoardDataTo2500.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength) {
    const req = new codec_1.Request(readLength, 'ReadScanner_MutiChipRamB');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.Scanner_MutiChipRamBAddr;
    return req;
}
exports.default = createReadScanner_MutiChipRamB;
codec_1.Session.prototype.ReadScanner_MutiChipRamB = async function ReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength) {
    const req = createReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength);
    return (await this.connection.send(req)).data;
};
codec_1.Session.prototype.tryReadScanner_MutiChipRamB = async function tryReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength) {
    const req = createReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadScanner_MutiChipRamB.js.map
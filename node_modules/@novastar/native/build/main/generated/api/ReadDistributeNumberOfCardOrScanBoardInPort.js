"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
    const req = new codec_1.Request(AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy, 'ReadDistributeNumberOfCardOrScanBoardInPort');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = 0;
    if (portIndex > 3) {
        req.address =
            AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                AddressMapping_1.default.DistributePortAddr +
                portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
    }
    else {
        req.address =
            AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
    }
    return req;
}
exports.default = createReadDistributeNumberOfCardOrScanBoardInPort;
codec_1.Session.prototype.ReadDistributeNumberOfCardOrScanBoardInPort =
    async function ReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
        const req = createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType);
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    };
codec_1.Session.prototype.tryReadDistributeNumberOfCardOrScanBoardInPort =
    async function tryReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
        const req = createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeNumberOfCardOrScanBoardInPort.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createRead2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr) {
    const req = new codec_1.Request(AddressMapping_1.default.Scanner_BlankOptimizationLevelOccupancy, 'Read2038SBlankOptimizationLevel2');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping_1.default.Scanner_2038SBlankOptimizationLevelAddr2;
    return req;
}
exports.default = createRead2038SBlankOptimizationLevel2;
codec_1.Session.prototype.Read2038SBlankOptimizationLevel2 =
    async function Read2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr) {
        const req = createRead2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr);
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    };
codec_1.Session.prototype.tryRead2038SBlankOptimizationLevel2 =
    async function tryRead2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr) {
        const req = createRead2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=Read2038SBlankOptimizationLevel2.js.map
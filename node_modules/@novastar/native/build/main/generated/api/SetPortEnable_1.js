"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("../AddressMapping"));
function createSetPortEnable_1(addr, bBroadcast, portEnable, portIndex) {
    if (portEnable.length !== AddressMapping_1.default.MasterOrSlaveSetOccupancy)
        throw new TypeError(`Invalid buffer size: ${portEnable.length}`);
    const req = new codec_1.Request(portEnable, bBroadcast, 'SetPortEnable_1');
    req.destination = addr;
    req.address = AddressMapping_1.default.PortEnableAddr;
    return req;
}
exports.default = createSetPortEnable_1;
codec_1.Session.prototype.SetPortEnable_1 = async function SetPortEnable_1(addr, bBroadcast, portEnable, portIndex) {
    const req = createSetPortEnable_1(addr, bBroadcast, portEnable, portIndex);
    await this.connection.send(req);
};
codec_1.Session.prototype.trySetPortEnable_1 = async function trySetPortEnable_1(addr, portEnable, portIndex) {
    const req = createSetPortEnable_1(addr, false, portEnable, portIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetPortEnable_1.js.map
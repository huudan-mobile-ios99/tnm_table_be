import * as t from 'io-ts';
import { ChipSCL8081ExtendProperty } from './ChipSCL8081ExtendProperty';
export declare const ChipSCL8081RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSCL8081RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSCL8081.decompiled.cs:908
 */
export declare const ChipSCL8081RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8081ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8081RGBVExtendProperty">;
}>]>;
export interface ChipSCL8081RGBVExtendProperty extends t.TypeOf<typeof ChipSCL8081RGBVExtendProperty> {
    RedProperty?: ChipSCL8081ExtendProperty;
    GreenProperty?: ChipSCL8081ExtendProperty;
    BlueProperty?: ChipSCL8081ExtendProperty;
    VRedProperty?: ChipSCL8081ExtendProperty;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
export declare const ChipYY6018RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegData: common.BufferFromBase64;
    SecondRegData: common.BufferFromBase64;
    ThirdRegData: common.BufferFromBase64;
    FourthRegData: common.BufferFromBase64;
    SixthRegData: common.BufferFromBase64;
    SeventhRegData: common.BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    LowGrayCompsention: t.Type<number, number, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    LineShadowEliminationStrength: t.Type<number, number, unknown>;
    ColumnShadowEliminationStrength: t.Type<number, number, unknown>;
    PreFilledMode: t.Type<number, number, unknown>;
    GrayMode: t.Type<number, number, unknown>;
    DCM_M: t.Type<number, number, unknown>;
    DCM_D: t.Type<number, number, unknown>;
    WeightValueConfig: common.BufferFromBase64;
    RedOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    GreenOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    BlueOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    WhiteOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
    AlgorithmSelect: t.Type<number, number, unknown>;
    PARI: t.Type<number, number, unknown>;
    PAR2: t.Type<number, number, unknown>;
    LEDStyle: t.Type<number, number, unknown>;
    SynMode: t.Type<number, number, unknown>;
    ICLKDIVNum: t.Type<number, number, unknown>;
    ISYNCNUM: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipYY6018RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipYY6018.decompiled.cs:274
 */
export declare const ChipYY6018RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    FirstRegData: common.BufferFromBase64;
    SecondRegData: common.BufferFromBase64;
    ThirdRegData: common.BufferFromBase64;
    FourthRegData: common.BufferFromBase64;
    SixthRegData: common.BufferFromBase64;
    SeventhRegData: common.BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    LowGrayCompsention: t.Type<number, number, unknown>;
    FirstLineDark: t.Type<number, number, unknown>;
    LineShadowEliminationStrength: t.Type<number, number, unknown>;
    ColumnShadowEliminationStrength: t.Type<number, number, unknown>;
    PreFilledMode: t.Type<number, number, unknown>;
    GrayMode: t.Type<number, number, unknown>;
    DCM_M: t.Type<number, number, unknown>;
    DCM_D: t.Type<number, number, unknown>;
    WeightValueConfig: common.BufferFromBase64;
    RedOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    GreenOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    BlueOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    WhiteOpenDischargeEn: t.Type<boolean, boolean, unknown>;
    RedResistanceValue: t.Type<number, number, unknown>;
    GreenResistanceValue: t.Type<number, number, unknown>;
    BlueResistanceValue: t.Type<number, number, unknown>;
    AlgorithmSelect: t.Type<number, number, unknown>;
    PARI: t.Type<number, number, unknown>;
    PAR2: t.Type<number, number, unknown>;
    LEDStyle: t.Type<number, number, unknown>;
    SynMode: t.Type<number, number, unknown>;
    ICLKDIVNum: t.Type<number, number, unknown>;
    ISYNCNUM: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    SixthDataLen: t.Type<number, number, unknown>;
    SixthStartIndex: t.Type<number, number, unknown>;
    SixthRegisterAddr: t.Type<number, number, unknown>;
    SeventhDataLen: t.Type<number, number, unknown>;
    SeventhStartIndex: t.Type<number, number, unknown>;
    SeventhRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipYY6018RGBVExtendProperty">;
}>]>;
export interface ChipYY6018RGBVExtendProperty extends t.TypeOf<typeof ChipYY6018RGBVExtendProperty> {
}

"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _SessionAPI_timeouts;
Object.defineProperty(exports, "__esModule", { value: true });
// noinspection JSUnusedGlobalSymbols
/* eslint-disable camelcase,no-bitwise,class-methods-use-this,no-nested-ternary */
/**
 * @see Automatically generated from ../decompiled/Nova.Equipment.Protocol.TGProtocol.decompiled.cs:3218
 */
const buffer_1 = require("buffer");
const codec_1 = require("@novastar/codec");
const AddressMapping_1 = __importDefault(require("./AddressMapping"));
const DVIEncryptType_1 = require("./DVIEncryptType");
const HWBrightAdjustType_1 = require("./HWBrightAdjustType");
const MaxValueInfo_1 = __importDefault(require("./MaxValueInfo"));
const ModulationModeType_1 = require("./ModulationModeType");
const VedioSelectMode_1 = require("./VedioSelectMode");
const makeOutDeviceBytes = (outDeviceAddress, baudRate, otherDeviceProtocol) => {
    if (!otherDeviceProtocol || otherDeviceProtocol.length === 0)
        throw new TypeError('Invalid argument');
    const data = buffer_1.Buffer.alloc(AddressMapping_1.default.FuncCard_WriteOutDeviceHeaderOccupancy + otherDeviceProtocol.length);
    data[0] = outDeviceAddress;
    data[1] = baudRate;
    const src = buffer_1.Buffer.isBuffer(otherDeviceProtocol)
        ? otherDeviceProtocol
        : buffer_1.Buffer.from(otherDeviceProtocol);
    src.copy(data, AddressMapping_1.default.FuncCard_WriteOutDeviceHeaderOccupancy);
    return data;
};
class SessionAPI {
    constructor(connection) {
        this.connection = connection;
        _SessionAPI_timeouts.set(this, []);
        this.SetMasterOrSlave_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.SetAllScaleInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteDviOf1600Info = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteDviOf1600OffestInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteDVIWHOf1600Info = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_EncryptHandShake = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_EnableAndSegementOfHWPro = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_HWProgramBrightInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_HWProgramAllCtrlInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_WriteHWAutoBright = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_EncryptKeyRegion = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_EncryptAllInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_ResetDVIEncrypt = () => {
            throw new TypeError('Not implemented');
        };
        this.SetMasterOrSlaveState = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_AllFileLength = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_CurSendFileLength = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender5C_FPGA = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender4C_FPGA = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender8028_FPGA = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender207_Mcu = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_ImageFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_WordStockFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_WebpageFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteSourceBackupInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteSourceBackupInfoNew = () => {
            throw new TypeError('Not implemented');
        };
        this.SetCheckModuleFlashResult = () => {
            throw new TypeError('Not implemented');
        };
        this.SetDataGroupSequence = () => {
            throw new TypeError('Not implemented');
        };
        this.SetABCDRollOver_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSubField = () => {
            throw new TypeError('Not implemented');
        };
        this.SetLowlumCorrectionOn = () => {
            throw new TypeError('Not implemented');
        };
        this.SetBrightDarkLineFixStateEx = () => {
            throw new TypeError('Not implemented');
        };
        this.SetDisplayModeWhenNoSignal = () => {
            throw new TypeError('Not implemented');
        };
        this.SetABCDCode = () => {
            throw new TypeError('Not implemented');
        };
        this.SetColorMatrix = () => {
            throw new TypeError('Not implemented');
        };
        this.SetNoCorrectionThreshold = () => {
            throw new TypeError('Not implemented');
        };
        this.SetNoCorrectionAttenuation = () => {
            throw new TypeError('Not implemented');
        };
        this.SetNewOERamEnable_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.SetDVIEncryptAllInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.ResetDVIEncryptAllInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.SetColorAdjustMatrixAndEnable = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_ModuleFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteSwitchCommand = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_ScannerFPGAFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSender_ScannerMcuFileData = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSingleChipMicyocoSpaceAuto = () => {
            throw new TypeError('Not implemented');
        };
        this.SetConnectRelayTemperature = () => {
            throw new TypeError('Not implemented');
        };
        this.SetDisConnectRelayTemperature = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScannerCabinetID = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScannerCabinetCorrectLocationSize = () => {
            throw new TypeError('Not implemented');
        };
        this.SetSpecialFrameRate = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteScanerMapping = () => {
            throw new TypeError('Not implemented');
        };
        this.SetGammaMaxValue2053 = () => {
            throw new TypeError('Not implemented');
        };
        this.SetEnhancedMode2053 = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScanner18bitGrayScale = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScanner18bitWhiteGrayScale = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScannerGrayScale = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScannerWhiteGrayScale = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScanner22bitGrayScale = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScannerGrayScaleCoef = () => {
            throw new TypeError('Not implemented');
        };
        this.SetScanner_MGCoefData = () => {
            throw new TypeError('Not implemented');
        };
        this.SetClearViewInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetTimeOnFuncCard = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetTimeOnFuncCard_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetAllPowerPortCtrl = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetAllPowerPortCtrl_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetPowerOperTime = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetPowerOperTime_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetOutDevice = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SetOutDevice_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SaveToHWOutDevice = () => {
            throw new TypeError('Not implemented');
        };
        this.FuncCard_SaveToHWOutDevice_1 = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteGroupSwapInfo = () => {
            throw new TypeError('Not implemented');
        };
        this.WriteMonitorDataSwapInfo = () => {
            throw new TypeError('Not implemented');
        };
    }
    get isConnected() {
        return this.connection.isConnected;
    }
    close() {
        if (!this.connection.isConnected)
            return false;
        this.connection.close();
        return true;
    }
    pushTimeout(timeout) {
        if (timeout <= 0)
            throw new TypeError('Invalid timeout');
        __classPrivateFieldGet(this, _SessionAPI_timeouts, "f").push(this.connection.timeout);
        this.connection.timeout = timeout;
    }
    popTimeout() {
        const timeout = __classPrivateFieldGet(this, _SessionAPI_timeouts, "f").pop();
        if (timeout) {
            this.connection.timeout = timeout;
        }
        return timeout ?? this.connection.timeout;
    }
    // #3236
    async ReadDeviceType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.CompanyIdOccupancy, 'ReadDeviceType');
        req.destination = addr;
        req.address = AddressMapping_1.default.DeviceTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3256
    async ReadCompanyID(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.CompanyIdOccupancy, 'ReadCompanyID');
        req.destination = addr;
        req.address = AddressMapping_1.default.CompanyIdAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3276
    async ReadControllerModelId(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControllerModelIdOccupancy, 'ReadControllerModelId');
        req.destination = addr;
        req.address = AddressMapping_1.default.ControllerModelIdAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3296
    async ReadCommunicationProtocol(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.CommunicationProtocolOccupancy, 'ReadCommunicationProtocol');
        req.destination = addr;
        req.address = AddressMapping_1.default.CommunicationProtocolAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3316
    async ReadLanguageLibraryFlag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.LanguageLibraryFlagOccupancy, 'ReadLanguageLibraryFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.LanguageLibraryFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3341
    async ReadControllerSnHigh(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControllerSnHighOccupancy, 'ReadControllerSnHigh');
        req.destination = addr;
        req.address = AddressMapping_1.default.ControllerSnHighAddr;
        return (await this.connection.send(req)).data;
    }
    // #3363
    async SetControllerSnHigh(addr, controllerSnHigh) {
        if (controllerSnHigh.length !== AddressMapping_1.default.ControllerSnHighOccupancy)
            throw new TypeError(`Invalid buffer size: ${controllerSnHigh.length}`);
        const req = new codec_1.Request(controllerSnHigh, false, 'SetControllerSnHigh');
        req.destination = addr;
        req.address = AddressMapping_1.default.ControllerSnHighAddr;
        await this.connection.send(req);
    }
    // #3372
    async ReadLicenseInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.LicenseInfoOccupancy, 'ReadLicenseInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.LicenseInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #3394
    async ReadSortOrder(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SortOrderOccupancy, 'ReadSortOrder');
        req.destination = addr;
        req.address = AddressMapping_1.default.SortOrderAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3414
    async SetSortOrder(addr, bBroadcast, sortOrder) {
        const $data = (0, codec_1.encodeUIntLE)(sortOrder, AddressMapping_1.default.SortOrderOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSortOrder');
        req.destination = addr;
        req.address = AddressMapping_1.default.SortOrderAddr;
        await this.connection.send(req);
    }
    // #3425
    async ReadSaveSendCardsParameters(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SaveSendCardsParametersOccupancy, 'ReadSaveSendCardsParameters');
        req.destination = addr;
        req.address = AddressMapping_1.default.SaveSendCardsParametersAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3445
    async SetSaveSendCardsParameters(addr, bBroadcast, saveSendCardsParameters) {
        const $data = (0, codec_1.encodeUIntLE)(saveSendCardsParameters, AddressMapping_1.default.SaveSendCardsParametersOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSaveSendCardsParameters');
        req.destination = addr;
        req.address = AddressMapping_1.default.SaveSendCardsParametersAddr;
        await this.connection.send(req);
    }
    // #3456
    async ReadReturnFactoryValues(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ReturnFactoryValuesOccupancy, 'ReadReturnFactoryValues');
        req.destination = addr;
        req.address = AddressMapping_1.default.ReturnFactoryValuesAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3476
    async SetReturnFactoryValues(addr, bBroadcast, returnFactoryValues) {
        const $data = (0, codec_1.encodeUIntLE)(returnFactoryValues, AddressMapping_1.default.SortOrderOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetReturnFactoryValues');
        req.destination = addr;
        req.address = AddressMapping_1.default.ReturnFactoryValuesAddr;
        await this.connection.send(req);
    }
    // #3487
    async ReadTestPoint(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.TestPointOccupancy, 'ReadTestPoint');
        req.destination = addr;
        req.address = AddressMapping_1.default.TestPointAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3507
    async SetTestPoint(addr, bBroadcast, testPoint) {
        const $data = (0, codec_1.encodeUIntLE)(testPoint, AddressMapping_1.default.SortOrderOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTestPoint');
        req.destination = addr;
        req.address = AddressMapping_1.default.SortOrderAddr;
        await this.connection.send(req);
    }
    // #3518
    async ReadSenderFunctionInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderFunctionOccupancy, 'ReadSenderFunctionInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderFunctionAddr;
        return (await this.connection.send(req)).data;
    }
    // #3527
    async ReadSenderABLInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderABLOccupancy, 'ReadSenderABLInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderABLtionAddr;
        return (await this.connection.send(req)).data;
    }
    // #3536
    async SetSenderABLParmsState(addr, bBroadcast, info) {
        const req = new codec_1.Request(info, bBroadcast, 'SetSenderABLParmsState');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderABLtionAddr;
        await this.connection.send(req);
    }
    // #3545
    async SetSenderScrenPeakLum(addr, bBroadcast, info) {
        const req = new codec_1.Request(info, bBroadcast, 'SetSenderScrenPeakLum');
        req.destination = addr;
        req.address = AddressMapping_1.default.ScrenPeakLumAddr;
        await this.connection.send(req);
    }
    // #3554
    async SetSender_ImageEnState(addr, bBroadcast, info) {
        const req = new codec_1.Request([info], bBroadcast, 'SetSender_ImageEnState');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderABLOpreationAddr;
        await this.connection.send(req);
    }
    // #3565
    async SetSender_EDEState(addr, bBroadcast, info) {
        const req = new codec_1.Request([info], bBroadcast, 'SetSender_EDEState');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderEDEOpreationAddr;
        await this.connection.send(req);
    }
    // #3576
    async ReadControllerPhysical(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControllerPhysicalOccupancy, 'ReadControllerPhysical');
        req.destination = addr;
        req.address = AddressMapping_1.default.ControllerPhysicalAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3596
    async ReadTemperature(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.TemperatureOccupancy, 'ReadTemperature');
        req.destination = addr;
        req.address = AddressMapping_1.default.TemperatureAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3616
    async ReadHumidity(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HumidityOccupancy, 'ReadHumidity');
        req.destination = addr;
        req.address = AddressMapping_1.default.HumidityAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3636
    async ReadFan(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FanOccupancy, 'ReadFan');
        req.destination = addr;
        req.address = AddressMapping_1.default.FanAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3656
    async SetFieldRateMode(addr, bBroadcast, fieldRateMode) {
        const $data = (0, codec_1.encodeUIntLE)(fieldRateMode, AddressMapping_1.default.FieldRateModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetFieldRateMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.FieldRateModeAddr;
        await this.connection.send(req);
    }
    // #3666
    async ReadFieldRateMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FieldRateModeOccupancy, 'ReadFieldRateMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.FieldRateModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3686
    async ReadFieldRate(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SetFieldRateOccupancy, 'ReadFieldRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.SetFieldRateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3706
    async SetFieldRate(addr, bBroadcast, setFieldRate) {
        const $data = (0, codec_1.encodeUIntLE)(setFieldRate, AddressMapping_1.default.SetFieldRateOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetFieldRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.SetFieldRateAddr;
        await this.connection.send(req);
    }
    // #3716
    async ReadAudioControl(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.AudioControlOccupancy, 'ReadAudioControl');
        req.destination = addr;
        req.address = AddressMapping_1.default.AudioControlAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3736
    async SetAudioControl(addr, bBroadcast, audioControl) {
        const $data = (0, codec_1.encodeUIntLE)(audioControl, AddressMapping_1.default.AudioControlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetAudioControl');
        req.destination = addr;
        req.address = AddressMapping_1.default.AudioControlAddr;
        await this.connection.send(req);
    }
    // #3764
    async SetAudioControl_1(addr, bBroadcast, audioCtrlMode) {
        const $data = (0, codec_1.encodeUIntLE)(audioCtrlMode, AddressMapping_1.default.AudioControlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetAudioControl_1');
        req.destination = addr;
        req.address = AddressMapping_1.default.AudioControlAddr;
        await this.connection.send(req);
    }
    // #3775
    async Sender_ReadActiveSourceType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ActiveSourceTypeOccupancy, 'Sender_ReadActiveSourceType');
        req.destination = addr;
        req.address = AddressMapping_1.default.ActiveSourceTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3802
    async Sender_SetSourceType(addr, bBroadcast, sourceMode) {
        const $data = (0, codec_1.encodeUIntLE)(sourceMode, AddressMapping_1.default.AudioControlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Sender_SetSourceType');
        req.destination = addr;
        req.address = AddressMapping_1.default.SetSourceTypeAddr;
        await this.connection.send(req);
    }
    // #3813
    async Sender_ReadDVIModeSettingType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DVIModeSettingAddrOccupancy, 'Sender_ReadDVIModeSettingType');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIModeSettingAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3838
    async ReadIoControl(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.IoControlOccupancy, 'ReadIoControl');
        req.destination = addr;
        req.address = AddressMapping_1.default.IoControlAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3858
    async SetIoControl(addr, bBroadcast, ioControl) {
        const $data = (0, codec_1.encodeUIntLE)(ioControl, AddressMapping_1.default.IoControlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetIoControl');
        req.destination = addr;
        req.address = AddressMapping_1.default.IoControlAddr;
        await this.connection.send(req);
    }
    // #3868
    async ReadSenderBrightnessLux(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.BrightnessOccupancy, 'ReadSenderBrightnessLux');
        req.destination = addr;
        req.address = AddressMapping_1.default.BrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3897
    async ReadRtco(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.RtcoOccupancy, 'ReadRtco');
        req.destination = addr;
        req.address = AddressMapping_1.default.RtcoAddr;
        return (await this.connection.send(req)).data;
    }
    // #3919
    async SetRtco(addr, bBroadcast, rtco) {
        if (rtco.length !== AddressMapping_1.default.RtcoOccupancy)
            throw new TypeError(`Invalid buffer size: ${rtco.length}`);
        const req = new codec_1.Request(rtco, bBroadcast, 'SetRtco');
        req.destination = addr;
        req.address = AddressMapping_1.default.RtcoAddr;
        await this.connection.send(req);
    }
    // #3933
    async ReadIsSerdes(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SerdesEnableOccupancy, 'ReadIsSerdes');
        req.destination = addr;
        req.address = AddressMapping_1.default.SerdesEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #3960
    async SetIsSerdes(addr, bBroadcast, IsSerdes) {
        const req = new codec_1.Request(IsSerdes ? [1] : [0], bBroadcast, 'SetIsSerdes');
        req.destination = addr;
        req.address = AddressMapping_1.default.SerdesEnableAddr;
        await this.connection.send(req);
    }
    // #3978
    async ReadIsHasDVI(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.IsHasDVISignalOccupancy, 'ReadIsHasDVI');
        req.destination = addr;
        req.address = AddressMapping_1.default.IsHasDVISignalAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4005
    async ReadMasterOrSlave(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.MasterOrSlaveOccupancy, 'ReadMasterOrSlave');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4025
    async SetMasterOrSlave(addr, bBroadcast, masterOrSlaveBytes) {
        if (masterOrSlaveBytes.length !== AddressMapping_1.default.MasterOrSlaveOccupancy)
            throw new TypeError(`Invalid buffer size: ${masterOrSlaveBytes.length}`);
        const req = new codec_1.Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlave');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveAddr;
        await this.connection.send(req);
    }
    // #4034
    async ReadMasterOrSlaveNext(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.MasterOrSlaveOccupancy, 'ReadMasterOrSlaveNext');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveNewAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4054
    async SetMasterOrSlaveNext(addr, bBroadcast, masterOrSlaveBytes) {
        if (masterOrSlaveBytes.length !== AddressMapping_1.default.MasterOrSlaveOccupancy)
            throw new TypeError(`Invalid buffer size: ${masterOrSlaveBytes.length}`);
        const req = new codec_1.Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlaveNext');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveNewAddr;
        await this.connection.send(req);
    }
    // #4063
    async ReadMasterOrSlaveAllData(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadMasterOrSlaveAllData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #4139
    async SetMasterOrSlaveNew16Addr(addr, bBroadcast, masterOrSlaveBytes) {
        const req = new codec_1.Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlaveNew16Addr');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveNew16Addr;
        await this.connection.send(req);
    }
    // #4149
    async SetMasterOrSlaveNew32Addr(addr, bBroadcast, masterOrSlaveBytes) {
        const req = new codec_1.Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlaveNew32Addr');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveNew32Addr;
        await this.connection.send(req);
    }
    // #4159
    async ReadDVI0FieldRate(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DVI0FieldRateOccupancy, 'ReadDVI0FieldRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVI0FieldRateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4179
    async ReadDVI1FieldRate(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DVI1FieldRateOccupancy, 'ReadDVI1FieldRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVI1FieldRateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4199
    async ReadHoldTime(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HoldTimeOccupancy, 'ReadHoldTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.HoldTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4219
    async SetHoldTime(addr, bBroadcast, holdTimeSec) {
        const $data = (0, codec_1.encodeUIntLE)(holdTimeSec, AddressMapping_1.default.HoldTimeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetHoldTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.HoldTimeAddr;
        await this.connection.send(req);
    }
    // #4229
    async ReadIsHasGenLock(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.IsHasGenLockOccupancy, 'ReadIsHasGenLock');
        req.destination = addr;
        req.address = AddressMapping_1.default.IsHasGenLockAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4256
    async ReadDviMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DviModeOccupancy, 'ReadDviMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4276
    async SetDviMode(addr, bBroadcast, dviMode) {
        const $data = (0, codec_1.encodeUIntLE)(dviMode, AddressMapping_1.default.DviModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviModeAddr;
        await this.connection.send(req);
    }
    // #4302
    async SetDviMode_1(addr, bBroadcast, dviMode) {
        const $data = (0, codec_1.encodeUIntLE)(dviMode !== VedioSelectMode_1.VedioSelectModeEnum.Manual ? 255 : 90, AddressMapping_1.default.DviModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviMode_1');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviModeAddr;
        await this.connection.send(req);
    }
    // #4314
    async ReadDviSelect(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DviSelectOccupancy, 'ReadDviSelect');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviSelectAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4334
    async SetDviSelect(addr, bBroadcast, dviSelect) {
        const $data = (0, codec_1.encodeUIntLE)(dviSelect, AddressMapping_1.default.DviSelectOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviSelect');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviSelectAddr;
        await this.connection.send(req);
    }
    // #4365
    async SetDviSelect_1(addr, bBroadcast, dviSelectMode) {
        const $data = (0, codec_1.encodeUIntLE)(dviSelectMode, AddressMapping_1.default.DviSelectOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviSelect_1');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviSelectAddr;
        await this.connection.send(req);
    }
    // #4376
    async ReadSourceSingalState(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SourceSingalStateOccupancy, 'ReadSourceSingalState');
        req.destination = addr;
        req.address = AddressMapping_1.default.SourceSingalStateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4396
    async ReadSelectSingalType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SelectSingalTypeOccupancy, 'ReadSelectSingalType');
        req.destination = addr;
        req.address = AddressMapping_1.default.SourceSelectSingalBitAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4416
    async ReadDviWidth(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.DviWidthOccupancy, 'ReadDviWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviWidthAddr + AddressMapping_1.default.DviOccupancy * index;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4438
    async SetDviWidth(addr, bBroadcast, dviWidth, index) {
        const $data = (0, codec_1.encodeUIntLE)(dviWidth, AddressMapping_1.default.DviWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviWidthAddr + AddressMapping_1.default.DviOccupancy * index;
        await this.connection.send(req);
    }
    // #4448
    async SetRealDviWidth(addr, bBroadcast, dviWidth) {
        const $data = (0, codec_1.encodeUIntLE)(dviWidth, AddressMapping_1.default.RealDviWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRealDviWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.RealDviWidthAddr;
        await this.connection.send(req);
    }
    // #4458
    async ReadDviHeight(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.DviHeightOccupancy, 'ReadDviHeight');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviHeightAddr + AddressMapping_1.default.DviOccupancy * index;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4480
    async SetDviHeight(addr, bBroadcast, dvi0Height, index) {
        const $data = (0, codec_1.encodeUIntLE)(dvi0Height, AddressMapping_1.default.DviHeightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviHeight');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviHeightAddr + AddressMapping_1.default.DviOccupancy * index;
        await this.connection.send(req);
    }
    // #4490
    async ReadDviOffsetX(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.DviOffsetXOccupancy, 'ReadDviOffsetX');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviOffsetXAddr + AddressMapping_1.default.DviOccupancy * index;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4512
    async SetDviOffsetX(addr, bBroadcast, dviOffsetX, index) {
        const $data = (0, codec_1.encodeUIntLE)(dviOffsetX, AddressMapping_1.default.DviOffsetXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviOffsetX');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviOffsetXAddr + AddressMapping_1.default.DviOccupancy * index;
        await this.connection.send(req);
    }
    // #4522
    async ReadDviOffsetY(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.DviOffsetYOccupancy, 'ReadDviOffsetY');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviOffsetYAddr + AddressMapping_1.default.DviOccupancy * index;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4544
    async SetDviOffsetY(addr, bBroadcast, dviOffsetY, index) {
        const $data = (0, codec_1.encodeUIntLE)(dviOffsetY, AddressMapping_1.default.DviOffsetYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDviOffsetY');
        req.destination = addr;
        req.address = AddressMapping_1.default.DviOffsetYAddr + AddressMapping_1.default.DviOccupancy * index;
        await this.connection.send(req);
    }
    // #4554
    async ReadDvi1Dvi0OffsetX(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Dvi1Dvi0OffsetXOccupancy, 'ReadDvi1Dvi0OffsetX');
        req.destination = addr;
        req.address = AddressMapping_1.default.Dvi1Dvi0OffsetXAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4574
    async SetDvi1Dvi0OffsetX(addr, bBroadcast, dvi1Dvi0OffsetX) {
        const $data = (0, codec_1.encodeUIntLE)(dvi1Dvi0OffsetX, AddressMapping_1.default.Dvi1Dvi0OffsetXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDvi1Dvi0OffsetX');
        req.destination = addr;
        req.address = AddressMapping_1.default.Dvi1Dvi0OffsetXAddr;
        await this.connection.send(req);
    }
    // #4584
    async ReadDvi1Dvi0OffsetY(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Dvi1Dvi0OffsetYOccupancy, 'ReadDvi1Dvi0OffsetY');
        req.destination = addr;
        req.address = AddressMapping_1.default.Dvi1Dvi0OffsetYAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4604
    async SetDvi1Dvi0OffsetY(addr, bBroadcast, dvi1Dvi0OffsetY) {
        const $data = (0, codec_1.encodeUIntLE)(dvi1Dvi0OffsetY, AddressMapping_1.default.Dvi1Dvi0OffsetYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDvi1Dvi0OffsetY');
        req.destination = addr;
        req.address = AddressMapping_1.default.Dvi1Dvi0OffsetYAddr;
        await this.connection.send(req);
    }
    // #4614
    async SetSenderCardSmartSetMode(addr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetSenderCardSmartSetMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderCardSmartSetModeAddr;
        await this.connection.send(req);
    }
    // #4623
    async ReadPortEnable(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortEnableOccupancy, 'ReadPortEnable');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNext32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNext16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNextAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortEnableAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4673
    async SetPortEnable(addr, bBroadcast, portEnable, index) {
        const $data = (0, codec_1.encodeUIntLE)(portEnable, AddressMapping_1.default.PortEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPortEnable');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNext32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNext16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortEnableNextAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortEnableAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        await this.connection.send(req);
    }
    // #4703
    async ReadNewPortEnable(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortEnableOccupancy, 'ReadNewPortEnable');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.PortEnableNextAddr +
                AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4725
    async SetNewPortEnable(addr, bBroadcast, portEnable, index) {
        const $data = (0, codec_1.encodeUIntLE)(portEnable, AddressMapping_1.default.PortEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetNewPortEnable');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.PortEnableNextAddr +
                AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        await this.connection.send(req);
    }
    // #4735
    async ReadAllPortEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadAllPortEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #4771
    async SetPortEnable_1(addr, bBroadcast, portEnable, portIndex) {
        if (portEnable.length !== AddressMapping_1.default.MasterOrSlaveSetOccupancy)
            throw new TypeError(`Invalid buffer size: ${portEnable.length}`);
        const req = new codec_1.Request(portEnable, bBroadcast, 'SetPortEnable_1');
        req.destination = addr;
        req.address = AddressMapping_1.default.PortEnableAddr;
        await this.connection.send(req);
    }
    // #4833
    async ReadPortWidth(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortWidthOccupancy, 'ReadPortWidth');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortWidthAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #4883
    async SetPortWidth(addr, bBroadcast, portWidth, index) {
        const $data = (0, codec_1.encodeUIntLE)(portWidth, AddressMapping_1.default.PortWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPortWidth');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortWidthNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortWidthAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        await this.connection.send(req);
    }
    // #4945
    async ReadAllPortWidth(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadAllPortWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #4981
    async ReadPortHeight(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortHeightOccupancy, 'ReadPortHeight');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortHeightAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5031
    async SetPortHeight(addr, bBroadcast, portHeight, index) {
        const $data = (0, codec_1.encodeUIntLE)(portHeight, AddressMapping_1.default.PortHeightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPortHeight');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortHeightNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortHeightAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        await this.connection.send(req);
    }
    // #5093
    async ReadAllPortHeight(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadAllPortHeight');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #5129
    async ReadPortOffsetX(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortOffsetXOccupancy, 'ReadPortOffsetX');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortOffsetXAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5179
    async SetPortOffsetX(addr, bBroadcast, portOffsetX, index) {
        const $data = (0, codec_1.encodeUIntLE)(portOffsetX, AddressMapping_1.default.PortOffsetXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPortOffsetX');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetXNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortOffsetXAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        await this.connection.send(req);
    }
    // #5241
    async ReadAllPortOffsetX(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadAllPortOffsetX');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr + AddressMapping_1.default.PortOccupancy * index;
        return (await this.connection.send(req)).data;
    }
    // #5277
    async ReadPortOffsetY(addr, index) {
        const req = new codec_1.Request(AddressMapping_1.default.PortOffsetYOccupancy, 'ReadPortOffsetY');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortOffsetYAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5327
    async SetPortOffsetY(addr, bBroadcast, portOffsetY, index) {
        const $data = (0, codec_1.encodeUIntLE)(portOffsetY, AddressMapping_1.default.PortOffsetYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPortOffsetY');
        req.destination = addr;
        req.address = 0;
        if (index >= AddressMapping_1.default.New32PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNew32Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New32PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNew16Addr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.New16PortOccupancy);
        }
        else if (index >= AddressMapping_1.default.NewPortOccupancy) {
            req.address =
                AddressMapping_1.default.PortOffsetYNewAddr +
                    AddressMapping_1.default.PortOccupancy * (index - AddressMapping_1.default.NewPortOccupancy);
        }
        else {
            req.address = AddressMapping_1.default.PortOffsetYAddr + AddressMapping_1.default.PortOccupancy * index;
        }
        await this.connection.send(req);
    }
    // #5389
    async ReadAllPortOffsetY(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadAllPortOffsetY');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #5425
    async SetFreeSenderPorts(senderAddr, bBroadcast, datas, portInde, freeIndex) {
        const req = new codec_1.Request(datas, bBroadcast, 'SetFreeSenderPorts');
        req.destination = senderAddr;
        req.address = AddressMapping_1.default.SenderPortCardsAddr + portInde * 16384 + freeIndex * 16;
        await this.connection.send(req);
    }
    // #5434
    async SetSenderVideoEnclosingMode(senderindex, width, height) {
        const req = new codec_1.Request([width % 256, width >>> 8, height % 256, height >>> 8], false, 'SetSenderVideoEnclosingMode');
        req.destination = senderindex;
        req.address = AddressMapping_1.default.SenderVideoEnclosingAddr;
        await this.connection.send(req);
    }
    // #5449
    async ReadScaleEn(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DVIScaleEnOccupancy, 'ReadScaleEn');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIScaleEnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5472
    async SetScaleEn(addr, bBroadcast, isEnableScale) {
        const req = new codec_1.Request(isEnableScale ? [88] : [255], bBroadcast, 'SetScaleEn');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIScaleEnAddr;
        await this.connection.send(req);
    }
    // #5490
    async ReadColScalePara(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColScaleParAOccupancy, 'ReadColScalePara');
        req.destination = addr;
        req.address = AddressMapping_1.default.ColScaleParaAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5510
    async SetColScalePara(addr, bBroadcast, colScalePar) {
        const $data = (0, codec_1.encodeUIntLE)(colScalePar, AddressMapping_1.default.ColScaleParAOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetColScalePara');
        req.destination = addr;
        req.address = AddressMapping_1.default.ColScaleParaAddr;
        await this.connection.send(req);
    }
    // #5520
    async ReadEndColScalePos(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.EndColScalePosOccupancy, 'ReadEndColScalePos');
        req.destination = addr;
        req.address = AddressMapping_1.default.EndColScalePosAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5540
    async SetEndColScalePos(addr, bBroadcast, endColScalePos) {
        const $data = (0, codec_1.encodeUIntLE)(endColScalePos, AddressMapping_1.default.ColScaleParAOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetEndColScalePos');
        req.destination = addr;
        req.address = AddressMapping_1.default.EndColScalePosAddr;
        await this.connection.send(req);
    }
    // #5550
    async ReadRowScalePara(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.RowScaleParAOccupancy, 'ReadRowScalePara');
        req.destination = addr;
        req.address = AddressMapping_1.default.RowScaleParaAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5570
    async SetRowScalePara(addr, bBroadcast, rowScalePar) {
        const $data = (0, codec_1.encodeUIntLE)(rowScalePar, AddressMapping_1.default.ColScaleParAOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRowScalePara');
        req.destination = addr;
        req.address = AddressMapping_1.default.RowScaleParaAddr;
        await this.connection.send(req);
    }
    // #5580
    async ReadEndRowScalePos(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.EndRowScalePosOccupancy, 'ReadEndRowScalePos');
        req.destination = addr;
        req.address = AddressMapping_1.default.EndRowScalePosAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5600
    async SetEndRowScalePos(addr, bBroadcast, endRowScalePos) {
        const $data = (0, codec_1.encodeUIntLE)(endRowScalePos, AddressMapping_1.default.EndRowScalePosOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetEndRowScalePos');
        req.destination = addr;
        req.address = AddressMapping_1.default.EndRowScalePosAddr;
        await this.connection.send(req);
    }
    // #5610
    async ReadAllScaleInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.AllScaleInfoOccupancy, 'ReadAllScaleInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.AllScaleInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #5679
    async WriteDviOf4KInfo(addr, bBroadcast, dviInfoBytes) {
        const req = new codec_1.Request(dviInfoBytes, bBroadcast, 'WriteDviOf4KInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIOf4KInfoAddr;
        await this.connection.send(req);
    }
    // #5688
    async ReadDviOf4KInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DVIOf4KInfoOccupancy, 'ReadDviOf4KInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIOf4KInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #5792
    async SetPortOfDVI(addr, bBroadcast, dviIndex, portIndex) {
        const req = new codec_1.Request([dviIndex], bBroadcast, 'SetPortOfDVI');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIOfPortInfoAddr + portIndex;
        await this.connection.send(req);
    }
    // #5828
    async ReadDviOf1600OffestInfo(addr) {
        const req = new codec_1.Request(16, 'ReadDviOf1600OffestInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.DVIOfOffsetInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #5861
    async SetBackUpOrRestoreCmd(addr, bBroadcast, writeData) {
        const req = new codec_1.Request([writeData], bBroadcast, 'SetBackUpOrRestoreCmd');
        req.destination = addr;
        req.address = AddressMapping_1.default.SetBackUpOrRestoreAddr;
        await this.connection.send(req);
    }
    // #5871
    async ReadBackUpFinishFlag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.BackUpFinishFlagAddrOccupancy, 'ReadBackUpFinishFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpFinishFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #5891
    async ReadBackUpFileHeader(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.BackUpFileHeaderAddrOccupancy, 'ReadBackUpFileHeader');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpFileHeaderAddr;
        return (await this.connection.send(req)).data;
    }
    // #5900
    async WriteBackUpFileHeader(addr, bBroadcast, writeData) {
        if (writeData.length !== AddressMapping_1.default.BackUpFileHeaderAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${writeData.length}`);
        const req = new codec_1.Request(writeData, bBroadcast, 'WriteBackUpFileHeader');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpFileHeaderAddr;
        await this.connection.send(req);
    }
    // #5909
    async SetRestoreFinishFlag(addr, bBroadcast, writeData) {
        const req = new codec_1.Request([writeData], bBroadcast, 'SetRestoreFinishFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.RestoreFinishFlagAddr;
        await this.connection.send(req);
    }
    // #5919
    async ReadRestoreFinishFlag(addr, length) {
        const req = new codec_1.Request(length, 'ReadRestoreFinishFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.RestoreFinishFlagAddr;
        return (await this.connection.send(req)).data;
    }
    // #5939
    async ReadHWRestoreFinishFlag(addr, length) {
        const req = new codec_1.Request(length, 'ReadHWRestoreFinishFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.HWRestoreFinishFlagAddr;
        return (await this.connection.send(req)).data;
    }
    // #5959
    async ReadBackUpParamFromSender(addr, length) {
        const req = new codec_1.Request(length, 'ReadBackUpParamFromSender');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpFileAddr;
        return (await this.connection.send(req)).data;
    }
    // #5968
    async RestoreSenderConfig(addr, bBroadcast, writeData) {
        const req = new codec_1.Request(writeData, bBroadcast, 'RestoreSenderConfig');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpFileAddr;
        await this.connection.send(req);
    }
    // #5977
    async ReadEthernetPortScannerX(addr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.EthernetPortScannerXOccupancy, 'ReadEthernetPortScannerX');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerXAddr +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex +
                AddressMapping_1.default.EthernetPortScannerXOccupancy;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6001
    async SetEthernetPortScannerX(addr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(ethernetPortScannerX, AddressMapping_1.default.EthernetPortScannerXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetEthernetPortScannerX');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerXAddr +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex +
                AddressMapping_1.default.EthernetPortScannerXOccupancy;
        await this.connection.send(req);
    }
    // #6011
    async ReadEthernetPortScannerY(addr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.EthernetPortScannerYOccupancy, 'ReadEthernetPortScannerY');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerYAddr +
                AddressMapping_1.default.EthernetPortScannerYOccupancy +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6035
    async SetEthernetPortScannerY(addr, bBroadcast, ethernetPortScannerY, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(ethernetPortScannerY, AddressMapping_1.default.EthernetPortScannerYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetEthernetPortScannerY');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerYAddr +
                AddressMapping_1.default.EthernetPortScannerYOccupancy +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex;
        await this.connection.send(req);
    }
    // #6045
    async ReadEthernetPortScannerXY(addr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.EthernetPortScannerXOccupancy + AddressMapping_1.default.EthernetPortScannerYOccupancy, 'ReadEthernetPortScannerXY');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerXAddr +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex;
        return (await this.connection.send(req)).data;
    }
    // #6072
    async SetEthernetPortScannerXY(addr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)((ethernetPortScannerX << 16) + ethernetPortScannerY, AddressMapping_1.default.EthernetPortScannerXOccupancy + AddressMapping_1.default.EthernetPortScannerYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetEthernetPortScannerXY');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.EthernetPortOccupancy * portIndex +
                AddressMapping_1.default.EthernetPortScannerXAddr +
                (AddressMapping_1.default.EthernetPortScannerXOccupancy +
                    AddressMapping_1.default.EthernetPortScannerYOccupancy) *
                    scannerIndex;
        await this.connection.send(req);
    }
    // #6120
    async ReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType) {
        const req = new codec_1.Request(AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy, 'ReadNumberOfCardOrScanBoardInPort');
        req.destination = addr;
        req.address = 0;
        if (portIndex < AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.NumberOfCardOrBoardInPortAddr +
                    portIndex * AddressMapping_1.default.NumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy;
        }
        else {
            req.address =
                AddressMapping_1.default.NumberOfCardOrBoardInPort16Addr +
                    portIndex * AddressMapping_1.default.NumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6165
    async SetNumberOfCardOrScanBoardInPort(addr, bBroadcast, number, portIndex, cardType) {
        const $data = (0, codec_1.encodeUIntLE)(number, AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetNumberOfCardOrScanBoardInPort');
        req.destination = addr;
        req.address = 0;
        if (portIndex < AddressMapping_1.default.New16PortOccupancy) {
            req.address =
                AddressMapping_1.default.NumberOfCardOrBoardInPortAddr +
                    portIndex * AddressMapping_1.default.NumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy;
        }
        else {
            req.address =
                AddressMapping_1.default.NumberOfCardOrBoardInPort16Addr +
                    portIndex * AddressMapping_1.default.NumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy;
        }
        await this.connection.send(req);
    }
    // #6186
    async SetFreeVirtualNetworkPort(addr, bBroadcast, number, portIndex) {
        const $data = (0, codec_1.encodeUIntLE)(number, AddressMapping_1.default.NumberOfCardOrBoardInPortOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetFreeVirtualNetworkPort');
        req.destination = addr;
        req.address = AddressMapping_1.default.FreeVirtualNetPortAddr + portIndex * 2;
        await this.connection.send(req);
    }
    // #6196
    async ReadVirtualEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualEnableOccupancy, 'ReadVirtualEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6223
    async SetVirtualEnable(addr, bBroadcast, virtualEnable) {
        const $data = (0, codec_1.encodeUIntLE)(virtualEnable, AddressMapping_1.default.VirtualEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualEnableAddr;
        await this.connection.send(req);
    }
    // #6233
    async ReadDisplayMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DisplayModeOccupancy, 'ReadDisplayMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.DisplayModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6253
    async ReadHDEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HDEnableOccupancy, 'ReadHDEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6282
    async SetHDEnable(addr, bBroadcast, hdEnable) {
        const $data = (0, codec_1.encodeUIntLE)(hdEnable, AddressMapping_1.default.HDEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetHDEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDEnableAddr;
        await this.connection.send(req);
    }
    // #6292
    async SetHDEnableEx(addr, bBroadcast, hdEnable) {
        const req = new codec_1.Request([hdEnable], bBroadcast, 'SetHDEnableEx');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDEnableAddr;
        await this.connection.send(req);
    }
    // #6302
    async ReadLoadMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.LoadModeOccupancy, 'ReadLoadMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.LoadModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6331
    async SetLoadMode(addr, bBroadcast, loadMode) {
        const $data = (0, codec_1.encodeUIntLE)(loadMode, AddressMapping_1.default.LoadModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLoadMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.LoadModeAddr;
        await this.connection.send(req);
    }
    // #6341
    async ReadMirrorMode(addr, isPreposition) {
        const req = new codec_1.Request(AddressMapping_1.default.MirrorModeOccupancy, 'ReadMirrorMode');
        req.destination = addr;
        if (isPreposition) {
            req.address = AddressMapping_1.default.MirrorModeFirAddr;
        }
        else {
            req.address = AddressMapping_1.default.MirrorModeSecAddr;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6371
    async SetMirrorMode(addr, bBroadcast, mirrorModeData, isPreposition) {
        const req = new codec_1.Request([mirrorModeData], bBroadcast, 'SetMirrorMode');
        req.destination = addr;
        if (isPreposition) {
            req.address = AddressMapping_1.default.MirrorModeFirAddr;
        }
        else {
            req.address = AddressMapping_1.default.MirrorModeSecAddr;
        }
        await this.connection.send(req);
    }
    // #6391
    async ReadLowDelayMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowDelayOccupancy, 'ReadLowDelayMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.LowDelayAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6420
    async SetLowDelayMode(addr, bBroadcast, lowDelayMode) {
        const $data = (0, codec_1.encodeUIntLE)(lowDelayMode, AddressMapping_1.default.LoadModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLowDelayMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.LowDelayAddr;
        await this.connection.send(req);
    }
    // #6430
    async ReadCabinetRotation(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.CabinetRotationOccupancy, 'ReadCabinetRotation');
        req.destination = addr;
        req.address = AddressMapping_1.default.CabinetRotationAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6450
    async SetAutoScreen(addr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.AutoScreenSettingOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetAutoScreen');
        req.destination = addr;
        req.address = AddressMapping_1.default.AutoScreenSettingAddr;
        await this.connection.send(req);
    }
    // #6459
    async ReadSender_McuProgramLength(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_McuProgramLengthOccupancy, 'ReadSender_McuProgramLength');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_McuProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6479
    async SetSender_McuProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramLength) {
        const $data = (0, codec_1.encodeUIntLE)(sender_McuProgramLength, AddressMapping_1.default.Sender_McuProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_McuProgramLength');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_McuProgramLengthAddr;
        await this.connection.send(req);
    }
    // #6489
    async ReadSender_McuProgramEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_McuProgramEditionOccupancy, 'ReadSender_McuProgramEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_McuProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6509
    async SetSender_McuProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramEdition) {
        const $data = (0, codec_1.encodeUIntLE)(sender_McuProgramEdition, AddressMapping_1.default.Sender_McuProgramEditionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_McuProgramEdition');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_McuProgramEditionAddr;
        await this.connection.send(req);
    }
    // #6519
    async ReadSender_McuProgramRemarks(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_McuProgramRemarksOccupancy, 'ReadSender_McuProgramRemarks');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_McuProgramRemarksAddr;
        return (await this.connection.send(req)).data;
    }
    // #6541
    async SetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramRemarks) {
        if (sender_McuProgramRemarks.length !== AddressMapping_1.default.Sender_McuProgramRemarksOccupancy)
            throw new TypeError(`Invalid buffer size: ${sender_McuProgramRemarks.length}`);
        const req = new codec_1.Request(sender_McuProgramRemarks, bBroadcast, 'SetSender_McuProgramRemarks');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_McuProgramRemarksAddr;
        await this.connection.send(req);
    }
    // #6579
    async ReadSender_McuProgramInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_McuProgramInfoOccupancy, 'ReadSender_McuProgramInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_McuProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #6601
    async SetSender_McuProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramRemarks) {
        if (sender_McuProgramRemarks.length !== AddressMapping_1.default.Sender_McuProgramInfoOccupancy)
            throw new TypeError(`Invalid buffer size: ${sender_McuProgramRemarks.length}`);
        const req = new codec_1.Request(sender_McuProgramRemarks, bBroadcast, 'SetSender_McuProgramInfo');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_McuProgramInfoAddr;
        await this.connection.send(req);
    }
    // #6610
    async SetSender_Reset() {
        const req = new codec_1.Request(buffer_1.Buffer.alloc(1), true, 'SetSender_Reset');
        req.destination = 255;
        req.port = 255;
        req.rcvIndex = 65535;
        req.address = AddressMapping_1.default.Sender_McuResetAddr;
        await this.connection.send(req);
    }
    // #6620
    async SetSender_Reset_1(addr, bBroadcast) {
        const req = new codec_1.Request(buffer_1.Buffer.alloc(1), bBroadcast, 'SetSender_Reset_1');
        req.destination = addr;
        req.port = 255;
        req.rcvIndex = 65535;
        req.address = AddressMapping_1.default.Sender_McuResetAddr;
        await this.connection.send(req);
    }
    // #6639
    async SetSender_McuUpdateProgrammFinish(addr, bBroadcast, updateFinishData) {
        const req = new codec_1.Request([updateFinishData], bBroadcast, 'SetSender_McuUpdateProgrammFinish');
        req.destination = addr;
        req.port = 255;
        req.rcvIndex = 255;
        req.address = AddressMapping_1.default.Sender_McuUpdateProgrammFinishAddr;
        await this.connection.send(req);
    }
    // #6649
    async ReadSender_FPGAProgramLength(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_FPGAProgramLengthOccupancy, 'ReadSender_FPGAProgramLength');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6669
    async SetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramLength) {
        const $data = (0, codec_1.encodeUIntLE)(sender_FPGAProgramLength, AddressMapping_1.default.Sender_FPGAProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_FPGAProgramLength');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramLengthAddr;
        await this.connection.send(req);
    }
    // #6679
    async ReadSender_FPGAProgramEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_FPGAProgramEditionOccupancy, 'ReadSender_FPGAProgramEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6699
    async SetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramEdition) {
        const $data = (0, codec_1.encodeUIntLE)(sender_FPGAProgramEdition, AddressMapping_1.default.Scanner_FPGAProgramEditionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_FPGAProgramEdition');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramEditionAddr;
        await this.connection.send(req);
    }
    // #6709
    async ReadSender_FPGAProgramRemarks(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_FPGAProgramRemarksOccupancy, 'ReadSender_FPGAProgramRemarks');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramRemarksAddr;
        return (await this.connection.send(req)).data;
    }
    // #6731
    async SetSender_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramRemarks) {
        if (sender_FPGAProgramRemarks.length !== AddressMapping_1.default.Sender_FPGAProgramRemarksOccupancy)
            throw new TypeError(`Invalid buffer size: ${sender_FPGAProgramRemarks.length}`);
        const req = new codec_1.Request(sender_FPGAProgramRemarks, bBroadcast, 'SetSender_FPGAProgramRemarks');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramRemarksAddr;
        await this.connection.send(req);
    }
    // #6769
    async ReadSender_FPGAProgramInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_FPGAProgramInfoOccupancy, 'ReadSender_FPGAProgramInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #6791
    async SetSender_FPGAProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramRemarks) {
        if (sender_FPGAProgramRemarks.length !== AddressMapping_1.default.Sender_FPGAProgramInfoOccupancy)
            throw new TypeError(`Invalid buffer size: ${sender_FPGAProgramRemarks.length}`);
        const req = new codec_1.Request(sender_FPGAProgramRemarks, bBroadcast, 'SetSender_FPGAProgramInfo');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_FPGAProgramInfoAddr;
        await this.connection.send(req);
    }
    // #6800
    async ReadSender_SoftwareSpace(addr, dataLength, addrOffset) {
        const req = new codec_1.Request(dataLength, 'ReadSender_SoftwareSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_SoftwareSpaceAddr + addrOffset;
        return (await this.connection.send(req)).data;
    }
    // #6826
    async SetSender_SoftwareSpace(addr, bBroadcast, sender_SoftwareSpace, dataLength, addrOffset) {
        if (sender_SoftwareSpace.length !== dataLength)
            throw new TypeError(`Invalid buffer size: ${sender_SoftwareSpace.length}`);
        const req = new codec_1.Request(sender_SoftwareSpace, bBroadcast, 'SetSender_SoftwareSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_SoftwareSpaceAddr + addrOffset;
        await this.connection.send(req);
    }
    // #6865
    async ReadSender_EDIDSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EDIDSpaceOccupancy, 'ReadSender_EDIDSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EDIDSpaceAddr;
        return (await this.connection.send(req)).data;
    }
    // #6885
    async SetSender_EDIDSpace(addr, portAddr, scanBoardAddr, bBroadcast, Passward) {
        if (Passward.length !== AddressMapping_1.default.Sender_EDIDSpaceOccupancy)
            throw new TypeError(`Invalid buffer size: ${Passward.length}`);
        const req = new codec_1.Request(Passward, bBroadcast, 'SetSender_EDIDSpace');
        req.destination = addr;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender_EDIDSpaceAddr;
        await this.connection.send(req);
    }
    // #6894
    async ReadSender_EdidInterlacedFlag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.EdidInterlacedFlagOccupancy, 'ReadSender_EdidInterlacedFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.EdidInterlacedFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6923
    async ReadSender_ScreenConfigSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_ScreenConfigSpaceOccupancy, 'ReadSender_ScreenConfigSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ScreenConfigSpaceAddr;
        return (await this.connection.send(req)).data;
    }
    // #6943
    async SetSender_ScreenConfigSpace(addr, bBroadcast, screenConfig) {
        if (screenConfig.length !== AddressMapping_1.default.Sender_ScreenConfigSpaceOccupancy)
            throw new TypeError(`Invalid buffer size: ${screenConfig.length}`);
        const req = new codec_1.Request(screenConfig, bBroadcast, 'SetSender_ScreenConfigSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ScreenConfigSpaceAddr;
        await this.connection.send(req);
    }
    // #6952
    async ReadSender_ScreenConfigFlagSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_ScreenConfigFlagOccupancy, 'ReadSender_ScreenConfigFlagSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ScreenConfigFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #6972
    async SetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig) {
        if (screenConfig.length !== AddressMapping_1.default.Sender_ScreenConfigFlagOccupancy)
            throw new TypeError(`Invalid buffer size: ${screenConfig.length}`);
        const req = new codec_1.Request(screenConfig, bBroadcast, 'SetSender_ScreenConfigFlagSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ScreenConfigFlagAddr;
        await this.connection.send(req);
    }
    // #6981
    async ReadSender_RedundantStateSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_RedundantStateSpaceOccupancy, 'ReadSender_RedundantStateSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_RedundantStateSpaceAddr;
        return (await this.connection.send(req)).data;
    }
    // #7001
    async SetSender_RedundantStateSpace(addr, bBroadcast, redundantState) {
        if (redundantState.length !== AddressMapping_1.default.Sender_RedundantStateSpaceOccupancy)
            throw new TypeError(`Invalid buffer size: ${redundantState.length}`);
        const req = new codec_1.Request(redundantState, bBroadcast, 'SetSender_RedundantStateSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_RedundantStateSpaceAddr;
        await this.connection.send(req);
    }
    // #7010
    async ReadSender_RedundantStateNewSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_RedundantStateSpaceOccupancy, 'ReadSender_RedundantStateNewSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_RedundantStateSpaceNewAddr;
        return (await this.connection.send(req)).data;
    }
    // #7030
    async SetSender_RedundantStateNewSpace(addr, bBroadcast, redundantState) {
        if (redundantState.length !== AddressMapping_1.default.Sender_RedundantStateSpaceOccupancy)
            throw new TypeError(`Invalid buffer size: ${redundantState.length}`);
        const req = new codec_1.Request(redundantState, bBroadcast, 'SetSender_RedundantStateNewSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_RedundantStateSpaceNewAddr;
        await this.connection.send(req);
    }
    // #7039
    async ReadSender_RedundantStateSpaceAllData(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllDataSpaceOccupancy, 'ReadSender_RedundantStateSpaceAllData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #7091
    async ReadSender_RedundantStateOver32SpaceAllData(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AllData32SpaceOccupancy, 'ReadSender_RedundantStateOver32SpaceAllData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_All32DataAddr;
        return (await this.connection.send(req)).data;
    }
    // #7111
    async ReadSender_Enable3DStateSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Enable3DOccupancy, 'ReadSender_Enable3DStateSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Enable3DAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7131
    async SetSender_Enable3DStateSpace(addr, bBroadcast, enable3DState) {
        const req = new codec_1.Request([enable3DState], bBroadcast, 'SetSender_Enable3DStateSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.Enable3DAddr;
        await this.connection.send(req);
    }
    // #7142
    async ReadSender_ThreeDPerSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ThreeDPerOccupancy, 'ReadSender_ThreeDPerSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.ThreeDPerAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7162
    async SetSender_ThreeDPerSpace(addr, bBroadcast, enable3DState) {
        const req = new codec_1.Request(enable3DState, bBroadcast, 'SetSender_ThreeDPerSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.ThreeDPerAddr;
        await this.connection.send(req);
    }
    // #7171
    async SetFlagEnableAccelerate(addr, bBroadcast, isOpen) {
        const req = new codec_1.Request(isOpen ? [1] : [0], bBroadcast, 'SetFlagEnableAccelerate');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_SetFlagForRemove3SecondAddr;
        await this.connection.send(req);
    }
    // #7189
    async ReadSender_OpticalWorkMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.OpticalWorkModeOccupancy, 'ReadSender_OpticalWorkMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.OpticalWorkModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7216
    async SetSender_OpticalWorkMode(addr, bBroadcast, opticalWorkMode) {
        const $data = (0, codec_1.encodeUIntLE)(opticalWorkMode, AddressMapping_1.default.OpticalWorkModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_OpticalWorkMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.OpticalWorkModeAddr;
        await this.connection.send(req);
    }
    // #7226
    async ReadSender_HDRState(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HDREnableInfoOccupancy, 'ReadSender_HDRState');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7246
    async ReadSender_HDRInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HDRInfoOccupancy, 'ReadSender_HDRInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7266
    async SetSender_HDRState(addr, bBroadcast, enableHDRState) {
        const req = new codec_1.Request(enableHDRState ? [88] : [0], bBroadcast, 'SetSender_HDRState');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRInfoAddr;
        await this.connection.send(req);
    }
    // #7284
    async ReadSender_HDR10MinLum(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HDR10MinLumOccupancy, 'ReadSender_HDR10MinLum');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDR10MinLum;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7304
    async SetSender_HDR10MinLum(addr, bBroadcast, HDR10MinLum) {
        const req = new codec_1.Request([HDR10MinLum], bBroadcast, 'SetSender_HDR10MinLum');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDR10MinLum;
        await this.connection.send(req);
    }
    // #7315
    async SetSender_ScreenPeakLight(addr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.HDRScreenPeakLightOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetSender_ScreenPeakLight');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRScreenPeakLightAddr;
        await this.connection.send(req);
    }
    // #7324
    async SetSender_AmbientLight(addr, bBroadcast, HDRAmbientLight) {
        const req = new codec_1.Request([HDRAmbientLight], bBroadcast, 'SetSender_AmbientLight');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRAmbientLightAddr;
        await this.connection.send(req);
    }
    // #7335
    async SetSender_HLGModel(addr, bBroadcast, hLGModel) {
        const $data = (0, codec_1.encodeUIntLE)(hLGModel, AddressMapping_1.default.HLGModelOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_HLGModel');
        req.destination = addr;
        req.address = AddressMapping_1.default.HLGModelAddr;
        await this.connection.send(req);
    }
    // #7363
    async ReadSender_HLGModel(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.HLGModelOccupancy, 'ReadSender_HLGModel');
        req.destination = addr;
        req.address = AddressMapping_1.default.HLGModelAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7372
    async SetSender_GrayDepthAndBit(addr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_GrayDepthAndBitOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetSender_GrayDepthAndBit');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_GrayDepthAndBitAddr;
        await this.connection.send(req);
    }
    // #7381
    async SetSender_SetHDRType(addr, bBroadcast, hDRType) {
        const $data = (0, codec_1.encodeUIntLE)(hDRType, AddressMapping_1.default.HDREnableInfoOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_SetHDRType');
        req.destination = addr;
        req.address = AddressMapping_1.default.HDRInfoAddr;
        await this.connection.send(req);
    }
    // #7391
    async ReadSender_IsSupportBackUpTestMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.IsSupportBackUpTestModeOccupancy, 'ReadSender_IsSupportBackUpTestMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.IsSupportBackUpTestModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7414
    async SetSender_BackUpTestMode(addr, bBroadcast, backUpTestMode) {
        const req = new codec_1.Request(backUpTestMode ? [1] : [0], bBroadcast, 'SetSender_BackUpTestMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.BackUpTestModeAddr;
        await this.connection.send(req);
    }
    // #7432
    async ReadSender_ComplexCfgScreenFlagSpace(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.ComplexCfgScreenFlagOccupancy, 'ReadSender_ComplexCfgScreenFlagSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.ComplexCfgScreenFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7455
    async SetSender_ComplexCfgScreenFlagSpace(addr, bBroadcast, IsComplexCfgScreen) {
        const req = new codec_1.Request(IsComplexCfgScreen ? [1] : [0], bBroadcast, 'SetSender_ComplexCfgScreenFlagSpace');
        req.destination = addr;
        req.address = AddressMapping_1.default.ComplexCfgScreenFlagAddr;
        await this.connection.send(req);
    }
    // #7469
    async ReadSender_AuthorizeTime(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AuthorizeTimeOccupancy, 'ReadSender_AuthorizeTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AuthorizeTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7490
    async SetSender_AuthorizeTime(addr, bBroadcast, authorizeTimeBytes) {
        if (authorizeTimeBytes.length !== AddressMapping_1.default.Sender_AuthorizeTimeOccupancy)
            throw new TypeError(`Invalid buffer size: ${authorizeTimeBytes.length}`);
        const req = new codec_1.Request(authorizeTimeBytes, bBroadcast, 'SetSender_AuthorizeTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AuthorizeTimeAddr;
        await this.connection.send(req);
    }
    // #7499
    async ReadSender_AuthorizePassward(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_AuthorizePasswardOccupancy, 'ReadSender_AuthorizePassward');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AuthorizePasswardAddr;
        return (await this.connection.send(req)).data;
    }
    // #7519
    async SetSender_AuthorizePassward(addr, bBroadcast, Passward) {
        if (Passward.length !== AddressMapping_1.default.Sender_AuthorizePasswardOccupancy)
            throw new TypeError(`Invalid buffer size: ${Passward.length}`);
        const req = new codec_1.Request(Passward, bBroadcast, 'SetSender_AuthorizePassward');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_AuthorizePasswardAddr;
        await this.connection.send(req);
    }
    // #7528
    async ReadSender_EnableProgramBright(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableProgramBrightOccupancy, 'ReadSender_EnableProgramBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7551
    async SetSender_EnableProgramBright(addr, bBroadcast, isEnable) {
        const req = new codec_1.Request([isEnable ? 91 : 255], bBroadcast, 'SetSender_EnableProgramBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr;
        await this.connection.send(req);
    }
    // #7562
    async SetSender_EnableProgramBright_1(addr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetSender_EnableProgramBright_1');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr;
        await this.connection.send(req);
    }
    // #7573
    async ReadSender_HWProBrightSegemntCnt(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_BrightSegemntCntOccupancy, 'ReadSender_HWProBrightSegemntCnt');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_BrightSegemntCntAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7598
    async SetSender_HWProBrightSegemntCnt(addr, bBroadcast, segementCnt) {
        const $data = (0, codec_1.encodeUIntLE)(segementCnt, AddressMapping_1.default.Sender_BrightSegemntCntOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_HWProBrightSegemntCnt');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_BrightSegemntCntAddr;
        await this.connection.send(req);
    }
    // #7609
    async ReadSender_EnablePartBrightOfHWPro(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnablePartOfBrightOccupancy, 'ReadSender_EnablePartBrightOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnablePartOfBrightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7632
    async SetSender_EnablePartBrightOfHWPro(addr, bBroadcast, isEnable) {
        const req = new codec_1.Request([isEnable ? 91 : 255], bBroadcast, 'SetSender_EnablePartBrightOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnablePartOfBrightAddr;
        await this.connection.send(req);
    }
    // #7643
    async ReadSender_EnableGammaOfHWPro(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableGammaOccupancy, 'ReadSender_EnableGammaOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableGammaAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7666
    async SetSender_EnableGammaOfHWPro(addr, bBroadcast, isEnable) {
        const req = new codec_1.Request([isEnable ? 91 : 255], bBroadcast, 'SetSender_EnableGammaOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableGammaAddr;
        await this.connection.send(req);
    }
    // #7677
    async ReadSender_EnableGainOfHWPro(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableGainOccupancy, 'ReadSender_EnableGainOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableGainAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #7700
    async SetSender_EnableGainOfHWPro(addr, bBroadcast, isEnable) {
        const req = new codec_1.Request([isEnable ? 91 : 255], bBroadcast, 'SetSender_EnableGainOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableGainAddr;
        await this.connection.send(req);
    }
    // #7711
    async ReadSender_EnableAndSegementOfHWPro(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableAndSegemntOccupancy, 'ReadSender_EnableAndSegementOfHWPro');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableAndSegemntAddr;
        return (await this.connection.send(req)).data;
    }
    // #8011
    async ReadSender_HWProgramAllInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_HWProgramAllInfoccupancy, 'ReadSender_HWProgramAllInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWProgramAllInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #8220
    async ReadSender_EnableSmartBright(addr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadSender_EnableSmartBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr;
        return (await this.connection.send(req)).data;
    }
    // #8229
    async SetSender_HWSmartBright(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_HWSmartBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr;
        await this.connection.send(req);
    }
    // #8238
    async SetHWSmartBrightIsEnable(addr, bBoradcast, isEnable) {
        const req = new codec_1.Request(isEnable ? [1] : [0], bBoradcast, 'SetHWSmartBrightIsEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableProgramBrightAddr + 12;
        await this.connection.send(req);
    }
    // #8256
    async ReadSender_HWBrightAdjustType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_HWBrightAdjustTypeOccupancy, 'ReadSender_HWBrightAdjustType');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWBrightAdjustTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8283
    async SetSender_HWBrightAdjustType(addr, bBroadcast, enableAutoData) {
        const req = new codec_1.Request(enableAutoData === HWBrightAdjustType_1.HWBrightAdjustTypeEnum.HWAutoBright
            ? [125]
            : enableAutoData === HWBrightAdjustType_1.HWBrightAdjustTypeEnum.HWProgram
                ? [91]
                : [255], bBroadcast, 'SetSender_HWBrightAdjustType');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWBrightAdjustTypeAddr;
        await this.connection.send(req);
    }
    // #8306
    async ReadSender_EnableReadHWAutoBright(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableHWAutoBrightOccupancy, 'ReadSender_EnableReadHWAutoBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableHWAutoBrightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8329
    async SetSender_EnableHWAutoBright(addr, bBroadcast, enableAutoData) {
        const req = new codec_1.Request(enableAutoData ? [125] : [255], bBroadcast, 'SetSender_EnableHWAutoBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableHWAutoBrightAddr;
        await this.connection.send(req);
    }
    // #8348
    async ReadSender_ReadHWAutoBright(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_HWAutoBrightOccupancy, 'ReadSender_ReadHWAutoBright');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWAutoBrightAddr;
        return (await this.connection.send(req)).data;
    }
    // #8379
    async ReadSender_EnableDVIEncrypt(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableDVIEncryptOccupancy, 'ReadSender_EnableDVIEncrypt');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableDVIEncryptAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8410
    async SetSender_EnableDVIEncrypt(addr, bBroadcast, encryptType) {
        const req = new codec_1.Request(encryptType === DVIEncryptType_1.DVIEncryptTypeEnum.EnableEncrypt
            ? [72]
            : encryptType === DVIEncryptType_1.DVIEncryptTypeEnum.DisableEncrypt
                ? [139]
                : encryptType === DVIEncryptType_1.DVIEncryptTypeEnum.None
                    ? [255]
                    : [0], bBroadcast, 'SetSender_EnableDVIEncrypt');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableDVIEncryptAddr;
        await this.connection.send(req);
    }
    // #8432
    async Sender_UnLock(addr, bBroadcast, passWord) {
        const $data = (0, codec_1.encodeUIntLE)(passWord, AddressMapping_1.default.Sender_UnLockOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Sender_UnLock');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_UnLockAddr;
        await this.connection.send(req);
    }
    // #8442
    async Scaner_UnLock(addr, bBroadcast, passWord) {
        const $data = (0, codec_1.encodeUIntLE)(passWord, AddressMapping_1.default.Scaner_UnLockOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Scaner_UnLock');
        req.destination = addr;
        req.address = AddressMapping_1.default.Scaner_UnLockAddr;
        await this.connection.send(req);
    }
    // #8452
    async ReadUseRecordInfo(addr, offaddr) {
        const req = new codec_1.Request(AddressMapping_1.default.UseRecordInfoOccupancy, 'ReadUseRecordInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.UseRecordInfoAddr + offaddr;
        return (await this.connection.send(req)).data;
    }
    // #8472
    async ReadSender_EncryptKeyLength(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EncryptKeyLengthOccupancy, 'ReadSender_EncryptKeyLength');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptKeyLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8492
    async SetSender_EncryptKeyLength(addr, bBroadcast, keyLength) {
        const $data = (0, codec_1.encodeUIntLE)(keyLength, AddressMapping_1.default.Sender_EncryptKeyLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_EncryptKeyLength');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptKeyLengthAddr;
        await this.connection.send(req);
    }
    // #8502
    async ReadSender_EncryptKey(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EncryptKeyOccupancy, 'ReadSender_EncryptKey');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptKeyAddr;
        return (await this.connection.send(req)).data;
    }
    // #8522
    async SetSender_EncryptKey(addr, bBroadcast, key) {
        if (key.length !== AddressMapping_1.default.Sender_EncryptKeyOccupancy)
            throw new TypeError(`Invalid buffer size: ${key.length}`);
        const req = new codec_1.Request(key, bBroadcast, 'SetSender_EncryptKey');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptKeyAddr;
        await this.connection.send(req);
    }
    // #8531
    async ReadSender_EncryptKeyRegion(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EncryptKeyRegionOccupancy, 'ReadSender_EncryptKeyRegion');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptKeyRegionAddr;
        return (await this.connection.send(req)).data;
    }
    // #8622
    async ReadSender_EncryptPassword(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EncryptPasswordOccupancy, 'ReadSender_EncryptPassword');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptPasswordAddr;
        return (await this.connection.send(req)).data;
    }
    // #8642
    async SetSender_EncryptPassword(addr, bBroadcast, Passward) {
        if (Passward.length !== AddressMapping_1.default.Sender_EncryptPasswordOccupancy)
            throw new TypeError(`Invalid buffer size: ${Passward.length}`);
        const req = new codec_1.Request(Passward, bBroadcast, 'SetSender_EncryptPassword');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptPasswordAddr;
        await this.connection.send(req);
    }
    // #8651
    async ReadSender_DVIResolutionWidth(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_DVIWidthOccupancy, 'ReadSender_DVIResolutionWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIWidthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8671
    async SetSender_DVIResolutionWidth(addr, bBroadcast, dviWidth) {
        const $data = (0, codec_1.encodeUIntLE)(dviWidth, AddressMapping_1.default.Sender_DVIWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_DVIResolutionWidth');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIWidthAddr;
        await this.connection.send(req);
    }
    // #8681
    async ReadSender_DVIResolutionHeight(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_DVIHeightOccupancy, 'ReadSender_DVIResolutionHeight');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIHeightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8701
    async SetSender_DVIResolutionHeight(addr, bBroadcast, dviHeight) {
        const $data = (0, codec_1.encodeUIntLE)(dviHeight, AddressMapping_1.default.Sender_DVIWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_DVIResolutionHeight');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIHeightAddr;
        await this.connection.send(req);
    }
    // #8711
    async ReadSender_DVIRows(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_DVIRowsOccupancy, 'ReadSender_DVIRows');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIRowsAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8731
    async SetSender_DVIRows(addr, bBroadcast, dviRows) {
        const $data = (0, codec_1.encodeUIntLE)(dviRows, AddressMapping_1.default.Sender_DVIRowsOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_DVIRows');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIRowsAddr;
        await this.connection.send(req);
    }
    // #8741
    async ReadSender_DVICols(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_DVIColsOccupancy, 'ReadSender_DVICols');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIColsAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #8761
    async SetSender_DVICols(addr, bBroadcast, dviCols) {
        const $data = (0, codec_1.encodeUIntLE)(dviCols, AddressMapping_1.default.Sender_DVIColsOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSender_DVICols');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_DVIColsAddr;
        await this.connection.send(req);
    }
    // #8771
    async ReadSender_EncryptAllInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EncryptAllInfoOccupancy, 'ReadSender_EncryptAllInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EncryptAllInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #9048
    async SetSender_10bitGammaValue(addr, bBroadcast, gammaValue) {
        const req = new codec_1.Request([gammaValue], bBroadcast, 'SetSender_10bitGammaValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_10bitGammaValueAddr;
        await this.connection.send(req);
    }
    // #9057
    async ReadSender_10bitGammaValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_10bitGammaValueOccupancy, 'ReadSender_10bitGammaValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_10bitGammaValueAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9066
    async SetSender_12bitGammaValue(addr, bBroadcast, gammaValue) {
        const req = new codec_1.Request([gammaValue], bBroadcast, 'SetSender_12bitGammaValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_12bitGammaValueAddr;
        await this.connection.send(req);
    }
    // #9075
    async ReadSender_12bitGammaValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_12bitGammaValueOccupancy, 'ReadSender_12bitGammaValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_12bitGammaValueAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9138
    async ReadDoorSwitchDetection(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoorSwitchDetectionOccupancy, 'ReadDoorSwitchDetection');
        req.destination = addr;
        req.address = AddressMapping_1.default.DoorSwitchDetectionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9157
    async SetDoorSwitchDetection(addr, bBroadcast, data) {
        const $data = (0, codec_1.encodeUIntLE)(data, AddressMapping_1.default.IsDoorSwitchDetectionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDoorSwitchDetection');
        req.destination = addr;
        req.address = AddressMapping_1.default.IsDoorSwitchDetectionAddr;
        await this.connection.send(req);
    }
    // #9167
    async SetShowNormal(addr, bBroadcast, data) {
        const $data = (0, codec_1.encodeUIntLE)(data, AddressMapping_1.default.ShowNormalOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetShowNormal');
        req.destination = addr;
        req.address = AddressMapping_1.default.ShowNormalAddr;
        await this.connection.send(req);
    }
    // #9177
    async SetLCDSwitch(addr, portAddr, scanBoardAddr, bBroadcast, tem) {
        const $data = (0, codec_1.encodeUIntLE)(tem, AddressMapping_1.default.LCDSwitchOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLCDSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LCDSwitchAddr;
        await this.connection.send(req);
    }
    // #9188
    async ReadLCDSwitch(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LCDSwitchOccupancy, 'ReadLCDSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LCDSwitchAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9208
    async SetWorkModeIn660Pro(addr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetWorkModeIn660Pro');
        req.destination = addr;
        req.address = AddressMapping_1.default.WorkModeIn660ProAddr;
        await this.connection.send(req);
    }
    // #9219
    async ReadWorkModeIn660Pro(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.WorkModeIn660ProOccupancy, 'ReadWorkModeIn660Pro');
        req.destination = addr;
        req.address = AddressMapping_1.default.WorkModeIn660ProAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9228
    async ReadVirtualMap(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualMapOccupancy, 'ReadVirtualMap');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualMapAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9248
    async SetVirtualMap(addr, bBroadcast, virtualMap) {
        const $data = (0, codec_1.encodeUIntLE)(virtualMap, AddressMapping_1.default.VirtualMapOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualMap');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualMapAddr;
        await this.connection.send(req);
    }
    // #9258
    async Set660ConfigFileSendOver(addr, bBroadcast, data) {
        const $data = (0, codec_1.encodeUIntLE)(data, AddressMapping_1.default.Sender660ConfigFileSendOverOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Set660ConfigFileSendOver');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender660ConfigFileSendOverAddr;
        await this.connection.send(req);
    }
    // #9268
    async ReadSender_VideoScalingMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoScalingModeOccupancy, 'ReadSender_VideoScalingMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoScalingModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9288
    async SetSender_VideoScalingMode(addr, bBoradcast, scalingMode) {
        const req = new codec_1.Request([scalingMode], bBoradcast, 'SetSender_VideoScalingMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoScalingModeAddr;
        await this.connection.send(req);
    }
    // #9298
    async ReadSender_VideoScreenOffset(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoScreenOffsetOccupancy, 'ReadSender_VideoScreenOffset');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoScreenOffsetAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9318
    async SetSender_VideoScreenOffset(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_VideoScreenOffsetOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoScreenOffset');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoScreenOffsetAddr;
        await this.connection.send(req);
    }
    // #9327
    async ReadSender_VideoInputCut(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoInputCutOccupancy, 'ReadSender_VideoInputCut');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoInputCutAddr;
        return (await this.connection.send(req)).data;
    }
    // #9347
    async SetSender_VideoInputCut(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_VideoInputCutOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoInputCut');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoInputCutAddr;
        await this.connection.send(req);
    }
    // #9356
    async ReadSender_VideoWindowRect(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoWindowRectOccupancy, 'ReadSender_VideoWindowRect');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoWindowRectAddr;
        return (await this.connection.send(req)).data;
    }
    // #9376
    async SetSender_VideoWindowRect(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_VideoWindowRectOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoWindowRect');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoWindowRectAddr;
        await this.connection.send(req);
    }
    // #9385
    async ReadSender_VideoMosaicData(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoMosaicOccupancy, 'ReadSender_VideoMosaicData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoMosaicAddr;
        return (await this.connection.send(req)).data;
    }
    // #9405
    async SetSender_VideoMosaicData(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_VideoMosaicOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoMosaicData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoMosaicAddr;
        await this.connection.send(req);
    }
    // #9414
    async ReadSender_InputVedioSource(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_InputVedioSourceOccupancy, 'ReadSender_InputVedioSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_InputVedioSourceAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9434
    async SetSender_InputVedioSource(addr, bBoradcast, data) {
        const req = new codec_1.Request([data], bBoradcast, 'SetSender_InputVedioSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_InputVedioSourceAddr;
        await this.connection.send(req);
    }
    // #9444
    async ReadSender_VideoInputSource(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoInputSourceOccupancy, 'ReadSender_VideoInputSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoInputSourceAddr;
        return (await this.connection.send(req)).data;
    }
    // #9464
    async SetSender_VideoInputSource(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_VideoInputSourceOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_VideoInputSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoInputSourceAddr;
        await this.connection.send(req);
    }
    // #9473
    async ReadSender_VideoRealDvi(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoRealDviAddrOccupancy, 'ReadSender_VideoRealDvi');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoRealDviAddr;
        return (await this.connection.send(req)).data;
    }
    // #9493
    async ReadSender_EnableSyncAndTotalData(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_EnableSyncAndTotalDataOccupancy, 'ReadSender_EnableSyncAndTotalData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableSyncAndTotalDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #9513
    async SetSender_EnableSyncAndTotalData(addr, bBoradcast, data) {
        if (data.length !== AddressMapping_1.default.Sender_EnableSyncAndTotalDataOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_EnableSyncAndTotalData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_EnableSyncAndTotalDataAddr;
        await this.connection.send(req);
    }
    // #9522
    async SetSoftToHWHeartbeatTime(addr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetSoftToHWHeartbeatTime');
        req.destination = addr;
        req.address = 63;
        await this.connection.send(req);
    }
    // #9531
    async ReadSender_HardWareBackupInfos(addr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadSender_HardWareBackupInfos');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HardWareBackupInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #9551
    async SetSender_HardWareBackupInfos(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_HardWareBackupInfos');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HardWareBackupInfoAddr;
        await this.connection.send(req);
    }
    // #9560
    async ReadSender_ScreenAdjustBrightFlag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.BrightnessSyncAdjustFlagOccupancy, 'ReadSender_ScreenAdjustBrightFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.BrightnessSyncAdjustFlagAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9584
    async SetSender_ScreenAdjustBrightCommand(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'SetSender_ScreenAdjustBrightCommand');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ScreenAdjustBrightAddr;
        await this.connection.send(req);
    }
    // #9593
    async Read_EquipmentIP(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoEquipmentIPOccupancy, 'Read_EquipmentIP');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoEquipmentIPAddr;
        return (await this.connection.send(req)).data;
    }
    // #9602
    async Set_EquipmentIP(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'Set_EquipmentIP');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoEquipmentIPAddr;
        await this.connection.send(req);
    }
    // #9622
    async Read_VideoSourceState(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_VideoSourceStateOccupancy, 'Read_VideoSourceState');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_VideoSourceStateAddr;
        return (await this.connection.send(req)).data;
    }
    // #9642
    async ReadSender_HWScreenDisplayFlag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_HWScreenDisplayFlagOccupancy, 'ReadSender_HWScreenDisplayFlag');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWScreenDisplayBaseAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9651
    async WriteSender_HWScreenDisplayInfo(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'WriteSender_HWScreenDisplayInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWScreenDisplayBaseAddr;
        await this.connection.send(req);
    }
    // #9674
    async WriteSender_HWScreenData(addr, bBoradcast, data) {
        const req = new codec_1.Request(data, bBoradcast, 'WriteSender_HWScreenData');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_HWScreenDisplayDataAddr;
        await this.connection.send(req);
    }
    // #9683
    async ReadMasterOrSlaveState(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.MasterOrSlaveDeviceStateOccupancy, 'ReadMasterOrSlaveState');
        req.destination = addr;
        req.address = AddressMapping_1.default.MasterOrSlaveDeviceStateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #9692
    async ReadSenderCPUIdData(addr) {
        const req = new codec_1.Request(12, 'ReadSenderCPUIdData');
        req.destination = addr;
        req.address = 32;
        return (await this.connection.send(req)).data;
    }
    // #9701
    async ReadSenderDVIStatus(addr) {
        const req = new codec_1.Request(1, 'ReadSenderDVIStatus');
        req.destination = addr;
        req.address = 33554455;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10008
    async ReadSender_ImageProgramEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_ImageProgramEditionOccupancy, 'ReadSender_ImageProgramEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ImageProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10017
    async ReadSender_ImageProgramTailEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_ImageProgramTailEditionOccupancy, 'ReadSender_ImageProgramTailEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ImageProgramTailEditAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10026
    async ReadSender_WebProgramEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_WebProgramEditionOccupancy, 'ReadSender_WebProgramEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_WebProgramEditAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10035
    async ReadSender_WebProgramTailEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_WebProgramTailEditionOccupancy, 'ReadSender_WebProgramTailEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_WebProgramTailEditAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10044
    async ReadSender_WordStockProgramEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_WordStockProgramEditionOccupancy, 'ReadSender_WordStockProgramEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_WordStockProgramEditAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10053
    async ReadSender_WordStockProgramTailEdition(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_WordStockProgramTailEditionOccupancy, 'ReadSender_WordStockProgramTailEdition');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_WordStockProgramTailEditAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10062
    async ReadSender_V900IsInBoot(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_V900IsInBootOccupancy, 'ReadSender_V900IsInBoot');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_V900IsInBootAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10164
    async ReadSourceBackupInfo(addr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadSourceBackupInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.SourceBackupAddr;
        return (await this.connection.send(req)).data;
    }
    // #10173
    async ReadDeviceTable(addr, readLen) {
        const req = new codec_1.Request(readLen, 'ReadDeviceTable');
        req.destination = addr;
        req.address = AddressMapping_1.default.DeviceTableAddr;
        return (await this.connection.send(req)).data;
    }
    // #10182
    async ReadSupportDeviceTableTag(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SupportDeviceTableOccupancy, 'ReadSupportDeviceTableTag');
        req.destination = addr;
        req.address = AddressMapping_1.default.SupportDeviceTableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10191
    async ReadDeviceExtendType(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DeviceExtendTypeOccupancy, 'ReadDeviceExtendType');
        req.destination = addr;
        req.address = AddressMapping_1.default.DeviceExtendTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10200
    async ReadResolutionExtend(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender_ResolutionExtendOccupancy, 'ReadResolutionExtend');
        req.destination = addr;
        req.address = AddressMapping_1.default.Sender_ResolutionExtendAddr;
        return (await this.connection.send(req)).data;
    }
    // #10220
    async ReadToneValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderToneResultOccupancy, 'ReadToneValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderToneResultddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10241
    async SetToneValue(addr, bBroadcast, dht) {
        const $data = (0, codec_1.encodeUIntLE)(dht, AddressMapping_1.default.SenderToneResultOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetToneValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderToneResultddr;
        await this.connection.send(req);
    }
    // #10252
    async ReadSaturationValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderSaturationResultOccupancy, 'ReadSaturationValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderSaturationResultAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10272
    async SetSaturationValue(addr, bBroadcast, dht) {
        const $data = (0, codec_1.encodeUIntLE)(dht, AddressMapping_1.default.SenderSaturationResultOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSaturationValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderSaturationResultAddr;
        await this.connection.send(req);
    }
    // #10283
    async ReadContrastValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderContrastResultOccupancy, 'ReadContrastValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderContrastResultAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10303
    async SetContrastValue(addr, bBroadcast, dht) {
        const $data = (0, codec_1.encodeUIntLE)(dht, AddressMapping_1.default.SenderContrastResultOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetContrastValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderContrastResultAddr;
        await this.connection.send(req);
    }
    // #10314
    async GetDeviceLevel(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.SenderContrastResultOccupancy, 'GetDeviceLevel');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderLevelAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10323
    async ReadBlankingTime5253Value(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BlankingTime5253Occupancy, 'ReadBlankingTime5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlankingTime5253Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10345
    async SetBlankingTime5253Value(addr, portAddr, scanBoardAddr, bBroadcast, BlankingTime5253Value) {
        if (BlankingTime5253Value.length !== AddressMapping_1.default.BlankingTime5253Occupancy)
            throw new TypeError(`Invalid buffer size: ${BlankingTime5253Value.length}`);
        const req = new codec_1.Request(BlankingTime5253Value, bBroadcast, 'SetBlankingTime5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlankingTime5253Addr;
        await this.connection.send(req);
    }
    // #10354
    async ReadLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowAshCompensationOne5253Occupancy, 'ReadLowAshCompensationOne5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationOne5253Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10374
    async SetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, bBroadcast, LowAshCompensationOne5253Value) {
        const req = new codec_1.Request([LowAshCompensationOne5253Value], bBroadcast, 'SetLowAshCompensationOne5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationOne5253Addr;
        await this.connection.send(req);
    }
    // #10385
    async ReadLowAshCompensationTwo5253Value(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowAshCompensationTwo5253Occupancy, 'ReadLowAshCompensationTwo5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationTwo5253Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10405
    async SetLowAshCompensationTwo5253Value(addr, portAddr, scanBoardAddr, bBroadcast, LowAshCompensationTwo5253Value) {
        const req = new codec_1.Request([LowAshCompensationTwo5253Value], bBroadcast, 'SetLowAshCompensationTwo5253Value');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationTwo5253Addr;
        await this.connection.send(req);
    }
    // #10416
    async SetConfigRegisterWrite7(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.WriteConfigRegisterOccupancy7)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite7');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWriteAddr7;
        await this.connection.send(req);
    }
    // #10425
    async ReadDeltaTValue(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DeltaTOccupancy, 'ReadDeltaTValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DeltaTAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10445
    async SetDeltaTValue(addr, portAddr, scanBoardAddr, bBroadcast, deltaT) {
        const req = new codec_1.Request([deltaT], bBroadcast, 'SetDeltaTValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DeltaTAddr;
        await this.connection.send(req);
    }
    // #10456
    async ReadDHTValue(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DHTOccupancy, 'ReadDHTValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DHTAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10476
    async SetDHTValue(addr, portAddr, scanBoardAddr, bBroadcast, dht) {
        const req = new codec_1.Request([dht], bBroadcast, 'SetDHTValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DHTAddr;
        await this.connection.send(req);
    }
    // #10487
    async WriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'WriteSUM2033GammaSwitchState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SUM2033WriteGammaSwitchStateAddr;
        await this.connection.send(req);
    }
    // #10511
    async ReadSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadSUM2033GammaSwitchState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SUM2033WriteGammaSwitchStateAddr;
        return (await this.connection.send(req)).data;
    }
    // #10520
    async SetMBI5252ChannelState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'SetMBI5252ChannelState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetChannelStateAddr;
        await this.connection.send(req);
    }
    // #10531
    async SetMBI5252AutoResetState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'SetMBI5252AutoResetState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetResetStateAddr;
        await this.connection.send(req);
    }
    // #10542
    async SetMBI5252ManualReset(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([1], bBroadcast, 'SetMBI5252ManualReset');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetManualResetAddr;
        await this.connection.send(req);
    }
    // #10554
    async SetMBI5252AutoReset(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'SetMBI5252AutoReset');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetAutoResetAddr;
        await this.connection.send(req);
    }
    // #10565
    async SetMBI5252AutoResetTime(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'SetMBI5252AutoResetTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetAutoResetTimeAddr;
        await this.connection.send(req);
    }
    // #10576
    async ReadMBI5252AutoResetTime(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.MBI5252SetAutoResetTimeOccupancy, 'ReadMBI5252AutoResetTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MBI5252SetAutoResetTimeAddr;
        return (await this.connection.send(req)).data;
    }
    // #10598
    async ReadScannerMouldeState(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScannerMouldeState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SUM6060ReadMouldeStateAddr;
        return (await this.connection.send(req)).data;
    }
    // #10620
    async WriteScannerMouldeState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'WriteScannerMouldeState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SUM6060WriteMouldeStateAddr;
        await this.connection.send(req);
    }
    // #10631
    async ReadScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScannerRT5958TinyAfterglow');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReadRT5958TinyAfterglowAddr;
        return (await this.connection.send(req)).data;
    }
    // #10653
    async WriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'WriteScannerRT5958TinyAfterglow');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReadRT5958TinyAfterglowAddr;
        await this.connection.send(req);
    }
    // #10664
    async ReadScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScannerRT5958TinyLineFeed');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReadRT5958TinyLineFeedAddr;
        return (await this.connection.send(req)).data;
    }
    // #10686
    async WriteScannerRT5958TinyLineFeed(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'WriteScannerRT5958TinyLineFeed');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReadRT5958TinyLineFeedAddr;
        await this.connection.send(req);
    }
    // #10697
    async ReadScanCardModle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScanCardModleOccupancy, 'ReadScanCardModle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanCardModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10717
    async ReadA4ScanCardModle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.A4ScanCardModleOccupancy, 'ReadA4ScanCardModle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.A4ScanCardModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10726
    async ReadScanCardGoldenFPGAProgramVerion(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScanCardGoldenFPGAProgramVerionOccupancy, 'ReadScanCardGoldenFPGAProgramVerion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanCardGoldenFPGAProgramVerionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10746
    async SetRealPhysicalGroup(addr, portAddr, scanBoardAddr, bBroadcast, realPhysical) {
        const req = new codec_1.Request([realPhysical], bBroadcast, 'SetRealPhysicalGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RealPhysicalGroupNumAddr;
        await this.connection.send(req);
    }
    // #10756
    async SetIrregularCabinetRealGroup(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetIrregularCabinetRealGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrRegular_RealPhysicalGroupsAddr;
        await this.connection.send(req);
    }
    // #10765
    async ReadIrregularCabinetRealGroup(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadIrregularCabinetRealGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrRegular_RealPhysicalGroupsAddr;
        return (await this.connection.send(req)).data;
    }
    // #10774
    async SetIrregularCabinetDataGroupOutputInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetIrregularCabinetDataGroupOutputInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrRegular_DataGroupOutputInfoAddr;
        await this.connection.send(req);
    }
    // #10783
    async ReadIrregularCabinetDataGroupOutputInfo(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadIrregularCabinetDataGroupOutputInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrRegular_DataGroupOutputInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #10792
    async SetRemoveChipChannelData(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetRemoveChipChannelData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_RemoveChipChannelAddr;
        await this.connection.send(req);
    }
    // #10801
    async ReadRemoveChipChannelData(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadRemoveChipChannelData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_RemoveChipChannelAddr;
        return (await this.connection.send(req)).data;
    }
    // #10810
    async SetScannerDehumidPara(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.DehumidParaAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetScannerDehumidPara');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DehumidParaAddr;
        await this.connection.send(req);
    }
    // #10819
    async ReadScannerDehumidPara(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DehumidParaAddrOccupancy, 'ReadScannerDehumidPara');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DehumidParaAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10828
    async SetDehumidAdjustTime(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.DehumidAdjustTimeOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetDehumidAdjustTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DehumidAdjustTimeAddr;
        await this.connection.send(req);
    }
    // #10837
    async ReadDehumidAdjustTime(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DehumidAdjustTimeOccupancy, 'ReadDehumidAdjustTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DehumidAdjustTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #10846
    async SetScreenEncrypt(addr, portAddr, scanBoardAddr, bBroadcast, screenEncrypt) {
        const $data = (0, codec_1.encodeUIntLE)(screenEncrypt, AddressMapping_1.default.ScreenEncryptOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScreenEncrypt');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScreenEncryptAddr;
        await this.connection.send(req);
    }
    // #10856
    async SetScreenDecrypt(addr, portAddr, scanBoardAddr, bBroadcast, screenDecrypt) {
        const $data = (0, codec_1.encodeUIntLE)(screenDecrypt, AddressMapping_1.default.ScreenDecryptOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScreenDecrypt');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScreenDecryptAddr;
        await this.connection.send(req);
    }
    // #10866
    async SetCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientStore2SpiFlash, AddressMapping_1.default.CoefficientStore2SpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientStore2SpiFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientStore2SpiFlashAddr;
        await this.connection.send(req);
    }
    // #10877
    async SaveBrightDarkLineFixCoefsToFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientStore2SpiFlash, AddressMapping_1.default.CoefficientStore2SpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SaveBrightDarkLineFixCoefsToFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientStore2SpiFlashAddr;
        await this.connection.send(req);
    }
    // #10888
    async RecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientStore2SpiFlash, AddressMapping_1.default.CoefficientStore2SpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'RecoveryCoefficientStore2SpiFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RecoveryCoefficientStore2SpiFlashAddr;
        await this.connection.send(req);
    }
    // #10899
    async SetCoefficientStore2IIcFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2IIcFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientStore2IIcFlash, AddressMapping_1.default.CoefficientStore2IIcFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientStore2IIcFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientStore2IIcFlashAddr;
        await this.connection.send(req);
    }
    // #10910
    async SetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientReloadFromSpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientReloadFromSpiFlash, AddressMapping_1.default.CoefficientReloadFromSpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientReloadFromSpiFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientReloadFromSpiFlashAddr;
        await this.connection.send(req);
    }
    // #10921
    async SetCheckModuleFlashCmd(addr, portAddr, scanBoardAddr, bBroadcast, checkModuleFlashCmd) {
        const $data = (0, codec_1.encodeUIntLE)(checkModuleFlashCmd, AddressMapping_1.default.CheckModuleFlashCmdOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCheckModuleFlashCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CheckModuleFlashCmdAddr;
        await this.connection.send(req);
    }
    // #10932
    async ReadCheckModuleFlashResult(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CheckModuleFlashResultOccupancy, 'ReadCheckModuleFlashResult');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CheckModuleFlashResultAddr;
        return (await this.connection.send(req)).data;
    }
    // #10941
    async ReadCheckModuleFlashResult_1(addr, portAddr, scanBoardAddr, readDataLength) {
        const req = new codec_1.Request(readDataLength, 'ReadCheckModuleFlashResult_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CheckModuleFlashResultAddr + 16;
        return (await this.connection.send(req)).data;
    }
    // #11022
    async SetUpdateCorrectionCoefficientCmd(addr, portAddr, scanBoardAddr, bBroadcast, valueFlag) {
        const $data = (0, codec_1.encodeUIntLE)(valueFlag, AddressMapping_1.default.UpdateCorrectionCoefficientCmdOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetUpdateCorrectionCoefficientCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.UpdateCorrectionCoefficientCmdAddr;
        await this.connection.send(req);
    }
    // #11032
    async GetScanerFunctionTable(Sender, portAddr, Scan) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerFunctionTableOccupancy, 'GetScanerFunctionTable');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = Scan;
        req.address = AddressMapping_1.default.ScannerFunctionTableAddr;
        return (await this.connection.send(req)).data;
    }
    // #11041
    async GetGrayCoefficientEN(Sender, portAddr, Scan) {
        const req = new codec_1.Request(AddressMapping_1.default.GrayCoefficientENAddrOccupancy, 'GetGrayCoefficientEN');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = Scan;
        req.address = AddressMapping_1.default.GrayCoefficientENAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11050
    async SetGrayCoefficientEN(Sender, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetGrayCoefficientEN');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayCoefficientENAddr;
        await this.connection.send(req);
    }
    // #11059
    async SetMaskOpreation(Sender, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetMaskOpreation');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MaskAddr;
        await this.connection.send(req);
    }
    // #11068
    async GetScannerSpiSpeedAdjust(Sender, portAddr, Scan) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerSpiSpeedAdjustOccupancy, 'GetScannerSpiSpeedAdjust');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = Scan;
        req.address = AddressMapping_1.default.ScannerSpiSpeedAdjustAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11077
    async SetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed) {
        if (speed.length !== AddressMapping_1.default.ScannerSpiSpeedAdjustOccupancy)
            throw new TypeError(`Invalid buffer size: ${speed.length}`);
        const req = new codec_1.Request(speed, bBroadcast, 'SetScannerSpiSpeedAdjust');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerSpiSpeedAdjustAddr;
        await this.connection.send(req);
    }
    // #11086
    async SetSoftwareCoefficientAccelerateFlag(Sender, portAddr, scanBoardAddr, bBroadcast, Is3x3) {
        const req = new codec_1.Request(Is3x3 ? [2] : [0], bBroadcast, 'SetSoftwareCoefficientAccelerateFlag');
        req.destination = Sender;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SoftwareCoefficientAccelerateFlag;
        await this.connection.send(req);
    }
    // #11104
    async ModuleOperCmd(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.ModuleOperCmdOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'ModuleOperCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleOperCmdAddr;
        await this.connection.send(req);
    }
    // #11113
    async ReadLightPlankFlashTopology(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LightPlankFlashTopologyOccupancy, 'ReadLightPlankFlashTopology');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightPlankFlashTopologyAddr;
        return (await this.connection.send(req)).data;
    }
    // #11133
    async SetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, bBroadcast, LightPlankFlashTopologyBytes) {
        const req = new codec_1.Request(LightPlankFlashTopologyBytes, bBroadcast, 'SetLightPlankFlashTopology');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightPlankFlashTopologyAddr;
        await this.connection.send(req);
    }
    // #11142
    async SetCoefficientReloadFromIIcFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientReloadFromIIcFlash) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientReloadFromIIcFlash, AddressMapping_1.default.CoefficientReloadFromIIcFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientReloadFromIIcFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientReloadFromIIcFlashAddr;
        await this.connection.send(req);
    }
    // #11153
    async SetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientInSpiFlashErase) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientInSpiFlashErase, AddressMapping_1.default.CoefficientInSpiFlashEraseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientInSpiFlashErase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientInSpiFlashEraseAddr;
        await this.connection.send(req);
    }
    // #11164
    async SetBrightDarkLineCoefsErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientErase) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientErase, AddressMapping_1.default.BrightDarkLineCoefsInSpiFlashEraseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetBrightDarkLineCoefsErase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightDarkLineCoefsInSpiFlashEraseAddr;
        await this.connection.send(req);
    }
    // #11175
    async ReadBrightDarkLineFixState(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BrightDarkLineFixStateOccupancy, 'ReadBrightDarkLineFixState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightDarkLineFixStateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11184
    async ReadCorrectionState(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BrightDarkLineFixStateOccupancy, 'ReadCorrectionState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11193
    async SetLowlumCoefficientErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientErase) {
        const req = new codec_1.Request(coefficientErase, bBroadcast, 'SetLowlumCoefficientErase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientInIIcFlashEraseAddr;
        await this.connection.send(req);
    }
    // #11202
    async SetCoefficientInIIcFlashErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientInIIcFlashErase) {
        const $data = (0, codec_1.encodeUIntLE)(coefficientInIIcFlashErase, AddressMapping_1.default.CoefficientInIIcFlashEraseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientInIIcFlashErase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientInIIcFlashEraseAddr;
        await this.connection.send(req);
    }
    // #11213
    async SetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootGoldenFPGAProgram) {
        const $data = (0, codec_1.encodeUIntLE)(rebootGoldenFPGAProgram, AddressMapping_1.default.RebootGoldenFPGAProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRebootGoldenFPGAProgram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RebootGoldenFPGAProgramAddr;
        await this.connection.send(req);
    }
    // #11224
    async SetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootWorkFPGAProgram) {
        const $data = (0, codec_1.encodeUIntLE)(rebootWorkFPGAProgram, AddressMapping_1.default.RebootWorkFPGAProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRebootWorkFPGAProgram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RebootWorkFPGAProgramAddr;
        await this.connection.send(req);
    }
    // #11235
    async SetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, FPGAWorkProgramStore) {
        const $data = (0, codec_1.encodeUIntLE)(FPGAWorkProgramStore, AddressMapping_1.default.FPGAWorkProgramStoreOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetFPGAWorkProgramStore');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FPGAWorkProgramStoreAddr;
        await this.connection.send(req);
    }
    // #11246
    async SetRebootWorkMCUProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootWorkMCUProgram) {
        const $data = (0, codec_1.encodeUIntLE)(rebootWorkMCUProgram, AddressMapping_1.default.RebootWorkMCUProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRebootWorkMCUProgram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RebootWorkMCUProgramAddr;
        await this.connection.send(req);
    }
    // #11257
    async SetMCUWorkProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, MCUWorkProgramStore) {
        const $data = (0, codec_1.encodeUIntLE)(MCUWorkProgramStore, AddressMapping_1.default.MCUWorkProgramStoreOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetMCUWorkProgramStore');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MCUWorkProgramStoreAddr;
        await this.connection.send(req);
    }
    // #11268
    async SetFPGAGoldenProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, FPGAGoldenProgramStore) {
        const $data = (0, codec_1.encodeUIntLE)(FPGAGoldenProgramStore, AddressMapping_1.default.FPGAGoldenProgramStoreOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetFPGAGoldenProgramStore');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FPGAGoldenProgramStoreAddr;
        await this.connection.send(req);
    }
    // #11279
    async SetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, parameterReloadFromSpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(parameterReloadFromSpiFlash, AddressMapping_1.default.ParameterReloadFromSpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetParameterReloadFromSpiFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ParameterReloadFromSpiFlashAddr;
        await this.connection.send(req);
    }
    // #11290
    async SetParameterStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, parameterStore2SpiFlash) {
        const $data = (0, codec_1.encodeUIntLE)(parameterStore2SpiFlash, AddressMapping_1.default.ParameterStore2SpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetParameterStore2SpiFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ParameterStore2SpiFlashAddr;
        await this.connection.send(req);
    }
    // #11301
    async SetParameterSender3D(addr, portAddr, scanBoardAddr, bBroadcast, parameterSender3D) {
        const $data = (0, codec_1.encodeUIntLE)(parameterSender3D, AddressMapping_1.default.ParameterStore2SpiFlashOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetParameterSender3D');
        req.destination = addr;
        req.deviceType = 4;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ParameterStore2SpiFlashAddr;
        await this.connection.send(req);
    }
    // #11312
    async SetParameterCorrectCoefficientComponent(addr, portAddr, scanBoardAddr, bBroadcast, parameterChromaOrBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(parameterChromaOrBrightness, AddressMapping_1.default.CorrectCoefficientComponentOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetParameterCorrectCoefficientComponent');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectCoefficientComponent;
        await this.connection.send(req);
    }
    // #11323
    async SetRecaculateParameter(addr, portAddr, scanBoardAddr, bBroadcast, recaculateParameter) {
        const $data = (0, codec_1.encodeUIntLE)(recaculateParameter, AddressMapping_1.default.RecaculateParameterOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRecaculateParameter');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RecaculateParameterAddr;
        await this.connection.send(req);
    }
    // #11333
    async SetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, bBroadcast, genLinearTable) {
        const $data = (0, codec_1.encodeUIntLE)(genLinearTable, AddressMapping_1.default.GenLinearScanBoardRunLineTableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGenLinearScanBoardRunLineTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GenLinearScanBoardRunLineTableAddr;
        await this.connection.send(req);
    }
    // #11343
    async SetCoefficienceFromDvi(addr, portAddr, scanBoardAddr, bBroadcast, coefficienceFromDvi) {
        const $data = (0, codec_1.encodeUIntLE)(coefficienceFromDvi, AddressMapping_1.default.WriteCoefficienceFromDviOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficienceFromDvi');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteCoefficienceFromDviAddr;
        await this.connection.send(req);
    }
    // #11353
    async SetCoefficienceFromDviCommon(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([1], bBroadcast, 'SetCoefficienceFromDviCommon');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteCommonCoefficienceFromDviAddr;
        await this.connection.send(req);
    }
    // #11363
    async SaveCoefficienceCommon(addr, portAddr, scanBoardAddr, bBroadcast, val) {
        const req = new codec_1.Request([val], bBroadcast, 'SaveCoefficienceCommon');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SaveCommonCoefficienceAddr;
        await this.connection.send(req);
    }
    // #11373
    async SetStoreStartingLogoImage(addr, portAddr, scanBoardAddr, bBroadcast, storeStartingLogoImage) {
        const $data = (0, codec_1.encodeUIntLE)(storeStartingLogoImage, AddressMapping_1.default.StoreStartingLogoImageOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetStoreStartingLogoImage');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StoreStartingLogoImageAddr;
        await this.connection.send(req);
    }
    // #11383
    async SetStoreNoSignalLogoImage(addr, portAddr, scanBoardAddr, bBroadcast, storeNoSignalLogoImage) {
        const $data = (0, codec_1.encodeUIntLE)(storeNoSignalLogoImage, AddressMapping_1.default.StoreNoSignalLogoImageOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetStoreNoSignalLogoImage');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StoreNoSignalLogoImageAddr;
        await this.connection.send(req);
    }
    // #11393
    async SetStartLedCheck(addr, portAddr, scanBoardAddr, bBroadcast, startLedCheck) {
        const $data = (0, codec_1.encodeUIntLE)(startLedCheck, AddressMapping_1.default.StartLedCheckOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetStartLedCheck');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StartLedCheckAddr;
        await this.connection.send(req);
    }
    // #11403
    async SetReadColorCoef(addr, portAddr, scanBoardAddr, bBroadcast, val) {
        const req = new codec_1.Request([val], bBroadcast, 'SetReadColorCoef');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SetReadColorCoefAddr;
        await this.connection.send(req);
    }
    // #11413
    async SetConfigRegister(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.WriteConfigRegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegister');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteConfigRegisterAddr;
        await this.connection.send(req);
    }
    // #11422
    async SetConfigRegister2017(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.WriteConfigRegisterOccupancy2017TD)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegister2017');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteConfigRegisterAddr2017TD;
        await this.connection.send(req);
    }
    // #11431
    async SetConfigRegisterFor2200(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterFor2200');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteConfigRegisterAddrFor2200;
        await this.connection.send(req);
    }
    // #11444
    async Read2200RegisterData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.WriteConfigRegisterOccupancyFor2200, 'Read2200RegisterData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteConfigRegisterAddrFor2200;
        return (await this.connection.send(req)).data;
    }
    // #11453
    async SetConfigRegisterFor2020(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== 1)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterFor2020');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteConfigRegisterAddrFor2020;
        await this.connection.send(req);
    }
    // #11462
    async Set5359RegAddress(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'Set5359RegAddress');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Register5359Addres;
        await this.connection.send(req);
    }
    // #11471
    async Read5359RegAddress(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'Read5359RegAddress');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Register5359Addres;
        return (await this.connection.send(req)).data;
    }
    // #11480
    async Write6867RegData(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'Write6867RegData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Register6867RegAddress;
        await this.connection.send(req);
    }
    // #11489
    async Read6867RegData(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'Read6867RegData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Register6867RegAddress;
        return (await this.connection.send(req)).data;
    }
    // #11498
    async SetAreaCoefsOperate(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.AreaCoefsOperateOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetAreaCoefsOperate');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AreaCoefsOperateAddr;
        await this.connection.send(req);
    }
    // #11507
    async SetConfigRegisterWriteType2(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWriteType2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWriteType2Addr;
        await this.connection.send(req);
    }
    // #11521
    async SetConfigRegisterWrite3(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.ConfigRegisterWrite3Occupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite3');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWrite3Addr;
        await this.connection.send(req);
    }
    // #11530
    async SetIntialRegConfigData(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.IntialRegConfigOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetIntialRegConfigData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IntialRegConfigAddr;
        await this.connection.send(req);
    }
    // #11539
    async SetUseColorAdjustMatrix(addr, portAddr, scanBoardAddr, bBroadcast, isEnableClrMatrix) {
        const req = new codec_1.Request(isEnableClrMatrix ? [5] : [255], bBroadcast, 'SetUseColorAdjustMatrix');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.UseColorAdjustMatrixAddr;
        await this.connection.send(req);
    }
    // #11557
    async ReadConfigRegiste3rRead(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Config3RegisterOccupancy, 'ReadConfigRegiste3rRead');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config3RegisterWriteAddr;
        return (await this.connection.send(req)).data;
    }
    // #11577
    async SetConfigRegisterWrite4(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Config3RegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite4');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config3RegisterWriteAddr;
        await this.connection.send(req);
    }
    // #11586
    async SetConfigRegisterWrite4_1(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Config3RegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite4_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWriteAddr4;
        await this.connection.send(req);
    }
    // #11594
    async SetConfigRegisterWrite5(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Config3RegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite5');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWriteAddr5;
        await this.connection.send(req);
    }
    // #11602
    async SetConfigRegisterWrite6(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Config3RegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigRegisterWrite6');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigRegisterWriteAddr6;
        await this.connection.send(req);
    }
    // #11610
    async SetConfigSpecialRegisterWrite(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.ConfigSpecialRegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetConfigSpecialRegisterWrite');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConfigSpecialRegisterAddr;
        await this.connection.send(req);
    }
    // #11619
    async Set2055RegisterWrite(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.Config2055RegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'Set2055RegisterWrite');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config2055RegisterAddr;
        await this.connection.send(req);
    }
    // #11628
    async Read2055RegisterData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Config2055RegisterOccupancy, 'Read2055RegisterData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config2055RegisterAddr;
        return (await this.connection.send(req)).data;
    }
    // #11649
    async Set2055UnitRegisterWrite(addr, portAddr, scanBoardAddr, bBroadcast, data, unit) {
        if (data.length !== AddressMapping_1.default.Config2055UnitRegisterOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'Set2055UnitRegisterWrite');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config2055RegisterAddr + unit * 8;
        await this.connection.send(req);
    }
    // #11659
    async Read2055UnitRegisterData(addr, portAddr, scanBoardAddr, unit) {
        const req = new codec_1.Request(AddressMapping_1.default.Config2055UnitRegisterOccupancy, 'Read2055UnitRegisterData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Config2055RegisterAddr + unit * 8;
        return (await this.connection.send(req)).data;
    }
    // #11703
    async ReadWheelReadingCureParameterToFactoryAreaData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GeneralPurposeRegisterOccupancy, 'ReadWheelReadingCureParameterToFactoryAreaData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GeneralPurposeRegisterAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11724
    async ReadOnePackageSBParameters(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(MaxValueInfo_1.default.MAX_PARAMETER_TABLE_LEN, 'ReadOnePackageSBParameters');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = 33554432;
        return (await this.connection.send(req)).data;
    }
    // #11734
    async ReadOnePackageSBParameters_1(addr, portAddr, scanBoardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'ReadOnePackageSBParameters_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = 33554432;
        return (await this.connection.send(req)).data;
    }
    // #11768
    async SetOnePackageSBParameters(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== MaxValueInfo_1.default.MAX_PARAMETER_TABLE_LEN)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetOnePackageSBParameters');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = 0;
        await this.connection.send(req);
    }
    // #11778
    async ReadLowAshCompensation(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowAshCompensationOccupancy, 'ReadLowAshCompensation');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationAddr;
        return (await this.connection.send(req)).data;
    }
    // #11799
    async SetLowAshCompensation(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.LowAshCompensationOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetLowAshCompensation');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowAshCompensationAddr;
        await this.connection.send(req);
    }
    // #11808
    async ReadReduceHighContrast(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ReduceHighContrastOccupancy, 'ReadReduceHighContrast');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReduceHighContrastAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11829
    async SetReduceHighContrast(addr, portAddr, scanBoardAddr, bBroadcast, reduceHighData) {
        const $data = (0, codec_1.encodeUIntLE)(reduceHighData, AddressMapping_1.default.ReduceHighContrastOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetReduceHighContrast');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReduceHighContrastAddr;
        await this.connection.send(req);
    }
    // #11851
    async SetEnSwipErrorPoint(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.EnSwipErrorPointOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'SetEnSwipErrorPoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.EnSwipErrorPointAddr;
        await this.connection.send(req);
    }
    // #11860
    async Set16259EnSwipErrorPoint(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.ErrorPoint16259Occupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'Set16259EnSwipErrorPoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ErrorPoint16259Addr;
        await this.connection.send(req);
    }
    // #11869
    async ReadGamma(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GammaOccupancy, 'ReadGamma');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GammaAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11889
    async SetGamma(addr, portAddr, scanBoardAddr, bBroadcast, gamma) {
        const $data = (0, codec_1.encodeUIntLE)(gamma, AddressMapping_1.default.GammaOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGamma');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GammaAddr;
        await this.connection.send(req);
    }
    // #11899
    async SetSenderConrectionMode(addr, bBroadcast, isOpen) {
        const req = new codec_1.Request(isOpen ? [168] : [0], bBroadcast, 'SetSenderConrectionMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.SenderCorrectionModeAddr;
        await this.connection.send(req);
    }
    // #11915
    async SetScanConrectionMode(addr, portAddr, scanBoardAddr, bBroadcast, isOpen) {
        const req = new codec_1.Request(isOpen ? [85] : [170], bBroadcast, 'SetScanConrectionMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerCorrectionModeAddr;
        await this.connection.send(req);
    }
    // #11931
    async ReadGrayBit(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GrayBitOccupancy, 'ReadGrayBit');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayBitAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11951
    async SetGrayBit(addr, portAddr, scanBoardAddr, bBroadcast, grayBit) {
        const $data = (0, codec_1.encodeUIntLE)(grayBit, AddressMapping_1.default.GrayBitOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGrayBit');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayBitAddr;
        await this.connection.send(req);
    }
    // #11961
    async ReadUCS512CDisplayMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GrayBitOccupancy, 'ReadUCS512CDisplayMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.UCS512CDisplayModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #11981
    async SetUCS512CDisplayMode(addr, portAddr, scanBoardAddr, bBroadcast, displayMode) {
        const $data = (0, codec_1.encodeUIntLE)(displayMode, AddressMapping_1.default.GrayBitOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetUCS512CDisplayMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.UCS512CDisplayModeAddr;
        await this.connection.send(req);
    }
    // #11991
    async ReadGlobalBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GlobalBrightnessOccupancy, 'ReadGlobalBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GlobalBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12011
    async SetGlobalBrightness(addr, portAddr, scanBoardAddr, bBroadcast, globalBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(globalBrightness, AddressMapping_1.default.GlobalBrightnessOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGlobalBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GlobalBrightnessAddr;
        await this.connection.send(req);
    }
    // #12021
    async SetGlobalBrightnessOf2053(addr, portAddr, scanBoardAddr, bBroadcast, globalBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(globalBrightness, AddressMapping_1.default.GlobalBrightnessOf2053Occupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGlobalBrightnessOf2053');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GlobalBrightnessOf2053Addr;
        await this.connection.send(req);
    }
    // #12031
    async ReadRedBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RedBrightnessOccupancy, 'ReadRedBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RedBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12051
    async SetRedBrightness(addr, portAddr, scanBoardAddr, bBroadcast, redBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(redBrightness, AddressMapping_1.default.RedBrightnessOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRedBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RedBrightnessAddr;
        await this.connection.send(req);
    }
    // #12061
    async ReadGreenBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GreenBrightnessOccupancy, 'ReadGreenBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GreenBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12081
    async SetGreenBrightness(addr, portAddr, scanBoardAddr, bBroadcast, greenBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(greenBrightness, AddressMapping_1.default.GreenBrightnessOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGreenBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GreenBrightnessAddr;
        await this.connection.send(req);
    }
    // #12097
    async ReadBlueBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BlueBrightnessOccupancy, 'ReadBlueBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlueBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12117
    async SetBlueBrightness(addr, portAddr, scanBoardAddr, bBroadcast, blueBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(blueBrightness, AddressMapping_1.default.BlueBrightnessOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetBlueBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlueBrightnessAddr;
        await this.connection.send(req);
    }
    // #12127
    async ReadVRedBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.VRedBrightnessOccupancy, 'ReadVRedBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.VRedBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12147
    async SetVRedBrightness(addr, portAddr, scanBoardAddr, bBroadcast, vRedBrightness) {
        const $data = (0, codec_1.encodeUIntLE)(vRedBrightness, AddressMapping_1.default.VRedBrightnessOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVRedBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.VRedBrightnessAddr;
        await this.connection.send(req);
    }
    // #12157
    async ReadScreenDriveType(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScreenDriveTypeOccupancy, 'ReadScreenDriveType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScreenDriveTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12185
    async SetScreenDriveType(addr, portAddr, scanBoardAddr, bBroadcast, driverType) {
        const $data = (0, codec_1.encodeUIntLE)(driverType, AddressMapping_1.default.ScreenDriveTypeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScreenDriveType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScreenDriveTypeAddr;
        await this.connection.send(req);
    }
    // #12195
    async ReadAllBrightnessInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AllBrightnessInfoOccupancy, 'ReadAllBrightnessInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AllBrightnessInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #12228
    async ReadRGBBrightness(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RGBBrightnessOccupancy, 'ReadRGBBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RGBBrightnessAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12258
    async SetRGBBrightness(addr, portAddr, scanBoardAddr, bBroadcast, redBrightness, greenBrightness, blueBrightness, vRedBrightness) {
        const req = new codec_1.Request([redBrightness, greenBrightness, blueBrightness, vRedBrightness], bBroadcast, 'SetRGBBrightness');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RGBBrightnessAddr;
        await this.connection.send(req);
    }
    // #12272
    async ReadDclkHighRatio(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DclkHighRatioOccupancy, 'ReadDclkHighRatio');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkHighRatioAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12292
    async SetDclkHighRatio(addr, portAddr, scanBoardAddr, bBroadcast, dclkHighRatio) {
        const $data = (0, codec_1.encodeUIntLE)(dclkHighRatio, AddressMapping_1.default.DclkHighRatioOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDclkHighRatio');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkHighRatioAddr;
        await this.connection.send(req);
    }
    // #12302
    async ReadDataDirection(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DataDirectionOccupancy, 'ReadDataDirection');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DataDirectionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12329
    async SetDataDirection(addr, portAddr, scanBoardAddr, bBroadcast, dataDriection) {
        const $data = (0, codec_1.encodeUIntLE)(dataDriection, AddressMapping_1.default.DataDirectionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDataDirection');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DataDirectionAddr;
        await this.connection.send(req);
    }
    // #12339
    async ReadModuleWidth(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ModuleWidthOccupancy, 'ReadModuleWidth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleWidthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12359
    async SetModuleWidth(addr, portAddr, scanBoardAddr, bBroadcast, moduleWidth) {
        const $data = (0, codec_1.encodeUIntLE)(moduleWidth, AddressMapping_1.default.ModuleWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetModuleWidth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleWidthAddr;
        await this.connection.send(req);
    }
    // #12369
    async SetScanSwitchMode(addr, portAddr, scanBoardAddr, bBroadcast, switchMode) {
        const $data = (0, codec_1.encodeUIntLE)(switchMode, AddressMapping_1.default.SwitchModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanSwitchMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SwitchModeAddr;
        await this.connection.send(req);
    }
    // #12379
    async ReadModuleHeight(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ModuleHeightOccupancy, 'ReadModuleHeight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleHeightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12399
    async SetModuleHeight(addr, portAddr, scanBoardAddr, bBroadcast, moduleHeight) {
        const $data = (0, codec_1.encodeUIntLE)(moduleHeight, AddressMapping_1.default.ModuleHeightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetModuleHeight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleHeightAddr;
        await this.connection.send(req);
    }
    // #12409
    async ReadModuleWidthAndHeigth(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ModuleWidthAndHeightOccupancy, 'ReadModuleWidthAndHeigth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleWidthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12432
    async ReadDriverType(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DriverTypeOccupancy, 'ReadDriverType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DriverTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12459
    async SetDriverType(addr, portAddr, scanBoardAddr, bBroadcast, driverType) {
        const $data = (0, codec_1.encodeUIntLE)(driverType, AddressMapping_1.default.DriverTypeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDriverType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DriverTypeAddr;
        await this.connection.send(req);
    }
    // #12469
    async ReadScanMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScanModeOccupancy, 'ReadScanMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12496
    async SetScanMode(addr, portAddr, scanBoardAddr, bBroadcast, scanMode) {
        const $data = (0, codec_1.encodeUIntLE)(scanMode, AddressMapping_1.default.ScanModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanModeAddr;
        await this.connection.send(req);
    }
    // #12506
    async ReadOEPority(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.OEPorityOccupancy, 'ReadOEPority');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.OEPorityAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12533
    async SetOEPority(addr, portAddr, scanBoardAddr, bBroadcast, oEPority) {
        const $data = (0, codec_1.encodeUIntLE)(oEPority, AddressMapping_1.default.OEPorityOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetOEPority');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.OEPorityAddr;
        await this.connection.send(req);
    }
    // #12543
    async ReadDecodeType(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DecodeTypeOccupancy, 'ReadDecodeType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DecodeTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12570
    async SetDecodeType(addr, portAddr, scanBoardAddr, bBroadcast, decodeType) {
        const $data = (0, codec_1.encodeUIntLE)(decodeType, AddressMapping_1.default.DecodeTypeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDecodeType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DecodeTypeAddr;
        await this.connection.send(req);
    }
    // #12580
    async ReadGroupNumInModule(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GroupNumInModuleOccupancy, 'ReadGroupNumInModule');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupNumInModuleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12600
    async SetGroupNumInModule(addr, portAddr, scanBoardAddr, bBroadcast, groupNumInModule) {
        const $data = (0, codec_1.encodeUIntLE)(groupNumInModule, AddressMapping_1.default.GroupNumInModuleOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGroupNumInModule');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupNumInModuleAddr;
        await this.connection.send(req);
    }
    // #12610
    async ReadDataGroupSequence(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DataGroupSequenceOccupancy, 'ReadDataGroupSequence');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DataGroupSequenceAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12653
    async ReadModuelCols(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ModuleColsOccupancy, 'ReadModuelCols');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleColsAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12673
    async SetModuelCols(addr, portAddr, scanBoardAddr, bBroadcast, moduleCols) {
        const $data = (0, codec_1.encodeUIntLE)(moduleCols, AddressMapping_1.default.ModuleColsOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetModuelCols');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleColsAddr;
        await this.connection.send(req);
    }
    // #12683
    async ReadModuelRows(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ModuleRowsOccupancy, 'ReadModuelRows');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleRowsAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12703
    async SetModuelRows(addr, portAddr, scanBoardAddr, bBroadcast, moduleRows) {
        const $data = (0, codec_1.encodeUIntLE)(moduleRows, AddressMapping_1.default.ModuleRowsOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetModuelRows');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleRowsAddr;
        await this.connection.send(req);
    }
    // #12713
    async ReadControlWidth(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControlWidthOccupancy, 'ReadControlWidth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlWidthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12733
    async SetControlWidth(addr, portAddr, scanBoardAddr, bBroadcast, controlWidth) {
        const $data = (0, codec_1.encodeUIntLE)(controlWidth, AddressMapping_1.default.ControlWidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetControlWidth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlWidthAddr;
        await this.connection.send(req);
    }
    // #12743
    async ReadControlHeight(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControlHeightOccupancy, 'ReadControlHeight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlHeightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12763
    async SetControlHeight(addr, portAddr, scanBoardAddr, bBroadcast, controlHeight) {
        const $data = (0, codec_1.encodeUIntLE)(controlHeight, AddressMapping_1.default.ControlHeightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetControlHeight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlHeightAddr;
        await this.connection.send(req);
    }
    // #12773
    async ReadPhysicalTotalDataGroupNum(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.PhysicalTotalDataGroupNumOccupancy, 'ReadPhysicalTotalDataGroupNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PhysicalTotalDataGroupNumAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12793
    async SetPhysicalTotalDataGroupNum(addr, portAddr, scanBoardAddr, bBroadcast, totalDataGroupNum) {
        const $data = (0, codec_1.encodeUIntLE)(totalDataGroupNum, AddressMapping_1.default.PhysicalTotalDataGroupNumOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPhysicalTotalDataGroupNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PhysicalTotalDataGroupNumAddr;
        await this.connection.send(req);
    }
    // #12803
    async ReadICNumber(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ICNumberOccupancy, 'ReadICNumber');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ICNumberAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12823
    async SetICNumber(addr, portAddr, scanBoardAddr, bBroadcast, iCNumber) {
        const $data = (0, codec_1.encodeUIntLE)(iCNumber, AddressMapping_1.default.ICNumberOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetICNumber');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ICNumberAddr;
        await this.connection.send(req);
    }
    // #12833
    async ReadHalfFreqSetMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.HalfFreqSetModeOccupancy, 'ReadHalfFreqSetMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.HalfFreqSetModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12853
    async SetHalfFreqSetMode(addr, portAddr, scanBoardAddr, bBroadcast, totalDataGroupNum) {
        const $data = (0, codec_1.encodeUIntLE)(totalDataGroupNum, AddressMapping_1.default.PhysicalTotalDataGroupNumOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetHalfFreqSetMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.HalfFreqSetModeAddr;
        await this.connection.send(req);
    }
    // #12863
    async ReadCascadeDiretion(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CascadeDiretionOccupancy, 'ReadCascadeDiretion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CascadeDiretionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12890
    async SetCascadeDiretion(addr, portAddr, scanBoardAddr, bBroadcast, cascadeDiretion) {
        const $data = (0, codec_1.encodeUIntLE)(cascadeDiretion, AddressMapping_1.default.CascadeDiretionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCascadeDiretion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CascadeDiretionAddr;
        await this.connection.send(req);
    }
    // #12900
    async ReadTotalPointInTable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TotalPointInTableOccupancy, 'ReadTotalPointInTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalPointInTableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12920
    async SetTotalPointInTable(addr, portAddr, scanBoardAddr, bBroadcast, totalPointInTable) {
        const $data = (0, codec_1.encodeUIntLE)(totalPointInTable, AddressMapping_1.default.TotalPointInTableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTotalPointInTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalPointInTableAddr;
        await this.connection.send(req);
    }
    // #12930
    async ReadPointNumPerDrive(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.PointNumPerDriveOccupancy, 'ReadPointNumPerDrive');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PointNumPerDriveAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12950
    async SetPointNumPerDrive(addr, portAddr, scanBoardAddr, bBroadcast, pointNumPerDrive) {
        const $data = (0, codec_1.encodeUIntLE)(pointNumPerDrive, AddressMapping_1.default.PointNumPerDriveOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetPointNumPerDrive');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PointNumPerDriveAddr;
        await this.connection.send(req);
    }
    // #12960
    async ReadIrregularScreenDrive(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.IrregularScreenDriveOccupancy, 'ReadIrregularScreenDrive');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrregularScreenDriveAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #12988
    async SetIrregularScreenDrive(addr, portAddr, scanBoardAddr, bBroadcast, isIrregularScreenDrive) {
        const req = new codec_1.Request(isIrregularScreenDrive ? [1] : [0], bBroadcast, 'SetIrregularScreenDrive');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.IrregularScreenDriveAddr;
        await this.connection.send(req);
    }
    // #13006
    async ReadLogicalTotalDataGroupNum(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LogicalTotalDataGroupNumOccupancy, 'ReadLogicalTotalDataGroupNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LogicalTotalDataGroupNumAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13026
    async SetLogicalTotalDataGroupNum(addr, portAddr, scanBoardAddr, bBroadcast, logicalDataGroupNum) {
        const $data = (0, codec_1.encodeUIntLE)(logicalDataGroupNum, AddressMapping_1.default.LogicalTotalDataGroupNumOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLogicalTotalDataGroupNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LogicalTotalDataGroupNumAddr;
        await this.connection.send(req);
    }
    // #13036
    async ReadDriverFucntion(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DriverFucntionOccupancy, 'ReadDriverFucntion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DriverFucntionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13056
    async SetDriverFucntion(addr, portAddr, scanBoardAddr, bBroadcast, driverFunc) {
        const $data = (0, codec_1.encodeUIntLE)(driverFunc, AddressMapping_1.default.DriverFucntionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDriverFucntion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DriverFucntionAddr;
        await this.connection.send(req);
    }
    // #13066
    async ReadDExtendMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DExtendModeOccupancy, 'ReadDExtendMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DExtendModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13086
    async SetDExtendMode(addr, portAddr, scanBoardAddr, bBroadcast, extendMode) {
        const $data = (0, codec_1.encodeUIntLE)(extendMode, AddressMapping_1.default.DExtendModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDExtendMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DExtendModeAddr;
        await this.connection.send(req);
    }
    // #13096
    async ReadGrayDepth(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GrayDepthOccupancy, 'ReadGrayDepth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayDepthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13116
    async SetGrayDepth(addr, portAddr, scanBoardAddr, bBroadcast, grayDepth) {
        const $data = (0, codec_1.encodeUIntLE)(grayDepth, AddressMapping_1.default.GrayDepthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGrayDepth');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayDepthAddr;
        await this.connection.send(req);
    }
    // #13126
    async ReadGrayMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GrayModeOccupancy, 'ReadGrayMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13163
    async SetGrayMode(addr, portAddr, scanBoardAddr, bBroadcast, grayRealize, grayMode) {
        const $data = (0, codec_1.encodeUIntLE)((grayRealize << 4) + grayMode, AddressMapping_1.default.GrayModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGrayMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GrayModeAddr;
        await this.connection.send(req);
    }
    // #13174
    async ReadRefNumPerVs(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RefNumPerVsOccupancy, 'ReadRefNumPerVs');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RefNumPerVsAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13194
    async SetRefNumPerVs(addr, portAddr, scanBoardAddr, bBroadcast, refNumPerVs) {
        const $data = (0, codec_1.encodeUIntLE)(refNumPerVs, AddressMapping_1.default.RefNumPerVsOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRefNumPerVs');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RefNumPerVsAddr;
        await this.connection.send(req);
    }
    // #13207
    async ReadGhostRemoveMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GhostRemoveModeOccupancy, 'ReadGhostRemoveMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GhostRemoveModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13234
    async SetGhostRemoveMode(addr, portAddr, scanBoardAddr, bBroadcast, ghostRemoveMode) {
        const $data = (0, codec_1.encodeUIntLE)(ghostRemoveMode, AddressMapping_1.default.GhostRemoveModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGhostRemoveMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GhostRemoveModeAddr;
        await this.connection.send(req);
    }
    // #13244
    async ReadBlankUnitNumPerScan(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BlankUnitNumPerScanOccupancy, 'ReadBlankUnitNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlankUnitNumPerScanAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13264
    async SetBlankUnitNumPerScan(addr, portAddr, scanBoardAddr, bBroadcast, blankUnitNumPerScan) {
        const $data = (0, codec_1.encodeUIntLE)(blankUnitNumPerScan, AddressMapping_1.default.BlankUnitNumPerScanOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetBlankUnitNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BlankUnitNumPerScanAddr;
        await this.connection.send(req);
    }
    // #13274
    async ReadRowChangePoint(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RowChangePointOccupancy, 'ReadRowChangePoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RowChangePointAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13294
    async SetRowChangePoint(addr, portAddr, scanBoardAddr, bBroadcast, rowChangePoint) {
        const $data = (0, codec_1.encodeUIntLE)(rowChangePoint, AddressMapping_1.default.RowChangePointOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRowChangePoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RowChangePointAddr;
        await this.connection.send(req);
    }
    // #13304
    async ReadABCDRollOver(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ABCDRollOverOccupancy, 'ReadABCDRollOver');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ABCDRollOverAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13336
    async SetABCDRollOver(addr, portAddr, scanBoardAddr, bBroadcast, isRollOver) {
        const req = new codec_1.Request(!isRollOver ? buffer_1.Buffer.alloc(1) : [1], bBroadcast, 'SetABCDRollOver');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ABCDRollOverAddr;
        await this.connection.send(req);
    }
    // #13386
    async ReadGclkNumPerScan(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GclkNumPerScanOccupancy, 'ReadGclkNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkNumPerScanAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13406
    async SetGclkNumPerScan(addr, portAddr, scanBoardAddr, bBroadcast, gclkNumPerScan) {
        const $data = (0, codec_1.encodeUIntLE)(gclkNumPerScan, AddressMapping_1.default.GclkNumPerScanOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGclkNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkNumPerScanAddr;
        await this.connection.send(req);
    }
    // #13416
    async ReadLightTimePerSubFieldRatio(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LightTimePerSubFieldRatioOccupancy, 'ReadLightTimePerSubFieldRatio');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightTimePerSubFieldRatioAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13436
    async SetLightTimePerSubFieldRatio(addr, portAddr, scanBoardAddr, bBroadcast, lightTimePerSubFieldRatio) {
        const $data = (0, codec_1.encodeUIntLE)(lightTimePerSubFieldRatio, AddressMapping_1.default.LightTimePerSubFieldRatioOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLightTimePerSubFieldRatio');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightTimePerSubFieldRatioAddr;
        await this.connection.send(req);
    }
    // #13446
    async ReadShiftUnitNumPerSubField(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ShiftUnitNumPerSubFieldOccupancy, 'ReadShiftUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ShiftUnitNumPerSubFieldAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13466
    async SetShiftUnitNumPerSubField(addr, portAddr, scanBoardAddr, bBroadcast, shiftUnitNumPerSubField) {
        const $data = (0, codec_1.encodeUIntLE)(shiftUnitNumPerSubField, AddressMapping_1.default.ShiftUnitNumPerSubFieldOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetShiftUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ShiftUnitNumPerSubFieldAddr;
        await this.connection.send(req);
    }
    // #13476
    async ReadTotalLightCdfResault(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerTotalLightCdfResaultOccupancy, 'ReadTotalLightCdfResault');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerTotalLightCdfResaultddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13496
    async SetTotalLightCdfResault(addr, portAddr, scanBoardAddr, bBroadcast, TotalLightCdfResault) {
        const $data = (0, codec_1.encodeUIntLE)(TotalLightCdfResault, AddressMapping_1.default.ScannerTotalLightCdfResaultOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTotalLightCdfResault');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerTotalLightCdfResaultddr;
        await this.connection.send(req);
    }
    // #13506
    async ReadTotalUnitNumPerSubField(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TotalUnitNumPerSubFieldOccupancy, 'ReadTotalUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalUnitNumPerSubFieldAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13526
    async SetTotalUnitNumPerSubField(addr, portAddr, scanBoardAddr, bBroadcast, totalUnitNumPerSubField) {
        const $data = (0, codec_1.encodeUIntLE)(totalUnitNumPerSubField, AddressMapping_1.default.TotalUnitNumPerSubFieldOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTotalUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalUnitNumPerSubFieldAddr;
        await this.connection.send(req);
    }
    // #13536
    async ReadLightTimePerSubField(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LightTimePerSubFieldOccupancy, 'ReadLightTimePerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightTimePerSubFieldAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13556
    async SetLightTimePerSubField(addr, portAddr, scanBoardAddr, bBroadcast, lightTimePerSubField) {
        const $data = (0, codec_1.encodeUIntLE)(lightTimePerSubField, AddressMapping_1.default.LightTimePerSubFieldOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLightTimePerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LightTimePerSubFieldAddr;
        await this.connection.send(req);
    }
    // #13566
    async ReadDclkUnitCycle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DclkUnitCycleOccupancy, 'ReadDclkUnitCycle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkUnitCycleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13586
    async SetDclkUnitCycle(addr, portAddr, scanBoardAddr, bBroadcast, dclkUnitCycle) {
        const $data = (0, codec_1.encodeUIntLE)(dclkUnitCycle, AddressMapping_1.default.DclkUnitCycleOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDclkUnitCycle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkUnitCycleAddr;
        await this.connection.send(req);
    }
    // #13596
    async ReadDclkPhase(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DclkPhaseOccupancy, 'ReadDclkPhase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkPhaseAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13616
    async SetDclkPhase(addr, portAddr, scanBoardAddr, bBroadcast, dclkPhase) {
        const $data = (0, codec_1.encodeUIntLE)(dclkPhase, AddressMapping_1.default.DclkPhaseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDclkPhase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkPhaseAddr;
        await this.connection.send(req);
    }
    // #13626
    async ReadDclkHigh(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DclkHighOccupancy, 'ReadDclkHigh');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkHighAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13646
    async SetDclkHigh(addr, portAddr, scanBoardAddr, bBroadcast, dclkHigh) {
        const $data = (0, codec_1.encodeUIntLE)(dclkHigh, AddressMapping_1.default.DclkHighOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDclkHigh');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DclkHighAddr;
        await this.connection.send(req);
    }
    // #13656
    async ReadGclkUnitCycle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GclkUnitCycleOccupancy, 'ReadGclkUnitCycle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkUnitCycleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13676
    async SetGclkUnitCycle(addr, portAddr, scanBoardAddr, bBroadcast, gclkUnitCycle) {
        const $data = (0, codec_1.encodeUIntLE)(gclkUnitCycle, AddressMapping_1.default.GclkUnitCycleOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGclkUnitCycle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkUnitCycleAddr;
        await this.connection.send(req);
    }
    // #13686
    async ReadGclkPhase(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GclkPhaseOccupancy, 'ReadGclkPhase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkPhaseAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13706
    async SetGclkPhase(addr, portAddr, scanBoardAddr, bBroadcast, gclkPhase) {
        const $data = (0, codec_1.encodeUIntLE)(gclkPhase, AddressMapping_1.default.GclkPhaseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGclkPhase');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkPhaseAddr;
        await this.connection.send(req);
    }
    // #13716
    async ReadGclkHigh(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GclkHighOccupancy, 'ReadGclkHigh');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkHighAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13736
    async SetGclkHigh(addr, portAddr, scanBoardAddr, bBroadcast, gclkHigh) {
        const $data = (0, codec_1.encodeUIntLE)(gclkHigh, AddressMapping_1.default.GclkHighOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGclkHigh');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GclkHighAddr;
        await this.connection.send(req);
    }
    // #13746
    async ReadSubField(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.PartNumPerRefOccupancy +
            AddressMapping_1.default.SubFieldNum * AddressMapping_1.default.SubFieldOccupancy, 'ReadSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PartNumPerRefAddr;
        return (await this.connection.send(req)).data;
    }
    // #13792
    async ReadRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RowsCtrlByDataGroupOccupancy * AddressMapping_1.default.RowsCtrlByDataGroupNum, 'ReadRowsCtrlByDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RowsCtrlByDataGroupAddr;
        return (await this.connection.send(req)).data;
    }
    // #13812
    async SetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup) {
        if (countCtrlByDataGroup.length !==
            AddressMapping_1.default.RowsCtrlByDataGroupOccupancy * AddressMapping_1.default.RowsCtrlByDataGroupNum)
            throw new TypeError(`Invalid buffer size: ${countCtrlByDataGroup.length}`);
        const req = new codec_1.Request(countCtrlByDataGroup, bBroadcast, 'SetRowsCtrlByDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RowsCtrlByDataGroupAddr;
        await this.connection.send(req);
    }
    // #13827
    async ReadTotalGclkUnitNumPerScan(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TotalGclkUnitNumPerScanOccupancy, 'ReadTotalGclkUnitNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalGclkUnitNumPerScanAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13847
    async SetTotalGclkUnitNumPerScan(addr, portAddr, scanBoardAddr, bBroadcast, totalGclk) {
        const $data = (0, codec_1.encodeUIntLE)(totalGclk, AddressMapping_1.default.TotalGclkUnitNumPerScanOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTotalGclkUnitNumPerScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalGclkUnitNumPerScanAddr;
        await this.connection.send(req);
    }
    // #13857
    async ReadCorrectionOn(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CorrectionOnOccupancy, 'ReadCorrectionOn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #13866
    async SetCorrectionOnROELine(addr, portAddr, scanBoardAddr, bBroadcast, correctionInfo) {
        if (correctionInfo.length !== AddressMapping_1.default.CorrectionOnOccupancy)
            throw new TypeError(`Invalid buffer size: ${correctionInfo.length}`);
        const req = new codec_1.Request(correctionInfo, bBroadcast, 'SetCorrectionOnROELine');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #13927
    async SetCorrectionOnEx(addr, portAddr, scanBoardAddr, bBroadcast, bCorrectionOn) {
        const req = new codec_1.Request(bCorrectionOn ? [5] : [0], bBroadcast, 'SetCorrectionOnEx');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnExAddr;
        await this.connection.send(req);
    }
    // #13946
    async SetCorrectionOn(addr, portAddr, scanBoardAddr, bBroadcast, bCorrectionOn) {
        const req = new codec_1.Request(bCorrectionOn ? [1] : [0], bBroadcast, 'SetCorrectionOn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #13965
    async SetCorrectionOn_1(addr, portAddr, scanBoardAddr, bBroadcast, isOpenCorrect, type, retainClrInfo) {
        const req = new codec_1.Request([0, 0 | (isOpenCorrect ? 1 : 0), 0 | (type << 1), 0 | (!retainClrInfo ? 4 : 0)], bBroadcast, 'SetCorrectionOn_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #13979
    async SetCorrectionOn_2(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetCorrectionOn_2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #14001
    async SetCorrectionOnROE(addr, portAddr, scanBoardAddr, bBroadcast, isOpenCorrect, type, retainClrInfo) {
        const req = new codec_1.Request(isOpenCorrect
            ? [0 | 128]
            : [0, 0 | (isOpenCorrect ? 1 : 0), 0 | (type << 1), 0 | (!retainClrInfo ? 4 : 0)], bBroadcast, 'SetCorrectionOnROE');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #14019
    async SetCorrectionOnROELine_1(addr, portAddr, scanBoardAddr, bBroadcast, isOpenCorrect, type, retainClrInfo) {
        const req = new codec_1.Request(isOpenCorrect
            ? [0 | 64]
            : [0, 0 | (isOpenCorrect ? 1 : 0), 0 | (type << 1), 0 | (!retainClrInfo ? 4 : 0)], bBroadcast, 'SetCorrectionOnROELine_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CorrectionOnAddr;
        await this.connection.send(req);
    }
    // #14037
    async SetBrightDarkLineFixState(addr, portAddr, scanBoardAddr, bBroadcast, stateByte) {
        const req = new codec_1.Request([stateByte], bBroadcast, 'SetBrightDarkLineFixState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightDarkLineFixStateAddr;
        await this.connection.send(req);
    }
    // #14060
    async ReadCoefficientSource(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CoefficientSourceOccupancy, 'ReadCoefficientSource');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientSourceAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14087
    async SetCoefficientSource(addr, portAddr, scanBoardAddr, bBroadcast, coefficienceSource) {
        const $data = (0, codec_1.encodeUIntLE)(coefficienceSource, AddressMapping_1.default.CoefficientSourceOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCoefficientSource');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefficientSourceAddr;
        await this.connection.send(req);
    }
    // #14097
    async ReadShowLastFrameWhenCableNotConected(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ShowLastFrameWhenCableNotConectedOccupancy, 'ReadShowLastFrameWhenCableNotConected');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ShowLastFrameWhenCableNotConectedAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14124
    async SetShowLastFrameWhenCableNotConected(addr, portAddr, scanBoardAddr, bBroadcast, showMode) {
        const $data = (0, codec_1.encodeUIntLE)(showMode, AddressMapping_1.default.ShowLastFrameWhenCableNotConectedOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetShowLastFrameWhenCableNotConected');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ShowLastFrameWhenCableNotConectedAddr;
        await this.connection.send(req);
    }
    // #14134
    async ReadDisplayModeWhenNoSignal(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ShowLastFrameWhenCableNotConectedOccupancy, 'ReadDisplayModeWhenNoSignal');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ShowLastFrameWhenCableNotConectedAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14181
    async ReadABCDCode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ABCDCodeOccupancy, 'ReadABCDCode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ABCDCodeAddr;
        return (await this.connection.send(req)).data;
    }
    // #14228
    async ReadLineBias(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LineBiasOccupancy, 'ReadLineBias');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LineBiasAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14248
    async SetLineBias(addr, portAddr, scanBoardAddr, bBroadcast, lineBias) {
        const $data = (0, codec_1.encodeUIntLE)(lineBias, AddressMapping_1.default.LineBiasOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLineBias');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LineBiasAddr;
        await this.connection.send(req);
    }
    // #14258
    async ReadRgbCode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RgbCodeOccupancy, 'ReadRgbCode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RgbCodeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14285
    async SetRgbCode(addr, portAddr, scanBoardAddr, bBroadcast, red, green, blue, virtualRed) {
        const $data = (0, codec_1.encodeUIntLE)(red | (green << 2) | (blue << 4) | (virtualRed << 6), AddressMapping_1.default.RgbCodeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRgbCode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RgbCodeAddr;
        await this.connection.send(req);
    }
    // #14296
    async ReadRgain(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RgainOccupancy, 'ReadRgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RgainAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14316
    async SetRgain(addr, portAddr, scanBoardAddr, bBroadcast, rgain) {
        const $data = (0, codec_1.encodeUIntLE)(rgain, AddressMapping_1.default.RgainOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetRgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RgainAddr;
        await this.connection.send(req);
    }
    // #14326
    async ReadGgain(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GgainOccupancy, 'ReadGgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GgainAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14346
    async SetGgain(addr, portAddr, scanBoardAddr, bBroadcast, ggain) {
        const $data = (0, codec_1.encodeUIntLE)(ggain, AddressMapping_1.default.GgainOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GgainAddr;
        await this.connection.send(req);
    }
    // #14356
    async ReadBgain(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BgainOccupancy, 'ReadBgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BgainAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14376
    async SetBgain(addr, portAddr, scanBoardAddr, bBroadcast, bgain) {
        const $data = (0, codec_1.encodeUIntLE)(bgain, AddressMapping_1.default.BgainOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetBgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BgainAddr;
        await this.connection.send(req);
    }
    // #14386
    async ReadVRgain(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.VRgainOccupancy, 'ReadVRgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.VRgainAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14406
    async SetVRgain(addr, portAddr, scanBoardAddr, bBroadcast, vRgain) {
        const $data = (0, codec_1.encodeUIntLE)(vRgain, AddressMapping_1.default.VRgainOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVRgain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.VRgainAddr;
        await this.connection.send(req);
    }
    // #14416
    async ReadThreshold(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ThresholdOccupancy, 'ReadThreshold');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ThresholdAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14436
    async SetThreshold(addr, portAddr, scanBoardAddr, bBroadcast, threshold) {
        const $data = (0, codec_1.encodeUIntLE)(threshold, AddressMapping_1.default.ThresholdOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetThreshold');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ThresholdAddr;
        await this.connection.send(req);
    }
    // #14446
    async ReadSymmetricalOutputMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SymmetricalOutputModeOccupancy, 'ReadSymmetricalOutputMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SymmetricalOutputModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14466
    async SetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, bBroadcast, outPutMode) {
        const $data = (0, codec_1.encodeUIntLE)(outPutMode, AddressMapping_1.default.SymmetricalOutputModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSymmetricalOutputMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SymmetricalOutputModeAddr;
        await this.connection.send(req);
    }
    // #14476
    async ReadColorMatrix(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColorMatrixOccupancy * AddressMapping_1.default.ColorMatrixNum, 'ReadColorMatrix');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorMatrixAddr;
        return (await this.connection.send(req)).data;
    }
    // #14524
    async ReadStartPositionOfDataGroup(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.StartPositionOfDataGroupOccupancy * AddressMapping_1.default.StartPositionOfDataGroupNum, 'ReadStartPositionOfDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StartPositionOfDataGroupAddr;
        return (await this.connection.send(req)).data;
    }
    // #14550
    async SetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, startPositionOfDataGroup) {
        if (startPositionOfDataGroup.length !==
            AddressMapping_1.default.StartPositionOfDataGroupOccupancy * AddressMapping_1.default.StartPositionOfDataGroupNum)
            throw new TypeError(`Invalid buffer size: ${startPositionOfDataGroup.length}`);
        const req = new codec_1.Request(startPositionOfDataGroup, bBroadcast, 'SetStartPositionOfDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StartPositionOfDataGroupAddr;
        await this.connection.send(req);
    }
    // #14563
    async ReadCabinetSerialNum(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CabinetSerialNumOccupancy, 'ReadCabinetSerialNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CabinetSerialNumAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14583
    async SetvCabinetSerialNum(addr, portAddr, scanBoardAddr, bBroadcast, cabinetSerialNum) {
        const $data = (0, codec_1.encodeUIntLE)(cabinetSerialNum, AddressMapping_1.default.CabinetSerialNumOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetvCabinetSerialNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CabinetSerialNumAddr;
        await this.connection.send(req);
    }
    // #14593
    async ReadConfigRegister(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ReadConfigRegisterOccupancy, 'ReadConfigRegister');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ReadConfigRegisterAddr;
        return (await this.connection.send(req)).data;
    }
    // #14613
    async ReadMbi5042GrayEnhanced(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Mbi5042GrayEnhancedOccupancy, 'ReadMbi5042GrayEnhanced');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Mbi5042GrayEnhancedAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14636
    async SetMbi5042GrayEnhanced(addr, portAddr, scanBoardAddr, bBroadcast, isEnable) {
        const req = new codec_1.Request(isEnable ? [5] : [255], bBroadcast, 'SetMbi5042GrayEnhanced');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Mbi5042GrayEnhancedAddr;
        await this.connection.send(req);
    }
    // #14654
    async ReadNoCorrectionThreshold(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.NoCorrectionThresholdOccupancy, 'ReadNoCorrectionThreshold');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NoCorrectionThresholdAddr;
        return (await this.connection.send(req)).data;
    }
    // #14703
    async ReadNoCorrectionAttenuation(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.NoCorrectionAttenuationOccupancy, 'ReadNoCorrectionAttenuation');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NoCorrectionAttenuationAddr;
        return (await this.connection.send(req)).data;
    }
    // #14752
    async ReadCtrlEndPoint(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CtrlEndPointOccupancy, 'ReadCtrlEndPoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CtrlEndPointAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14772
    async SetCtrlEndPoint(addr, portAddr, scanBoardAddr, bBroadcast, ctrlEndPoint) {
        const $data = (0, codec_1.encodeUIntLE)(ctrlEndPoint, AddressMapping_1.default.CtrlEndPointOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCtrlEndPoint');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CtrlEndPointAddr;
        await this.connection.send(req);
    }
    // #14782
    async ReadLocalStartX(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LocalStartXOccupancy, 'ReadLocalStartX');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LocalStartXAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14802
    async ReadLocalStartY(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LocalStartYOccupancy, 'ReadLocalStartY');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LocalStartYAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14822
    async ReadNewOERamEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.NewOERamEnableOccupancy, 'ReadNewOERamEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOERamEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14842
    async SetNewOERamEnable(addr, portAddr, scanBoardAddr, bBroadcast, newOERamEnable) {
        const $data = (0, codec_1.encodeUIntLE)(newOERamEnable, AddressMapping_1.default.NewOERamEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetNewOERamEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOERamEnableAddr;
        await this.connection.send(req);
    }
    // #14901
    async ReadLowGrayCompensation(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowGrayCompensationOccupancy, 'ReadLowGrayCompensation');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowGrayCompensationAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14921
    async SetLowGrayCompensation(addr, portAddr, scanBoardAddr, bBroadcast, lowGrayCpt) {
        const $data = (0, codec_1.encodeUIntLE)(lowGrayCpt, AddressMapping_1.default.LowGrayCompensationOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLowGrayCompensation');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowGrayCompensationAddr;
        await this.connection.send(req);
    }
    // #14931
    async ReadAddrExtend(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AddrExtendOccupancy, 'ReadAddrExtend');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AddrExtendAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14951
    async SetAddrExtend(addr, portAddr, scanBoardAddr, bBroadcast, addrExtend) {
        const $data = (0, codec_1.encodeUIntLE)(addrExtend, AddressMapping_1.default.AddrExtendOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetAddrExtend');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AddrExtendAddr;
        await this.connection.send(req);
    }
    // #14961
    async ReadTwentyDataGroup(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TwentyDataGroupOccupancy, 'ReadTwentyDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TwentyDataGroupAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #14984
    async SetTwentyDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, isEanbleTwentyDataGroup) {
        const req = new codec_1.Request(isEanbleTwentyDataGroup ? [5] : [0], bBroadcast, 'SetTwentyDataGroup');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TwentyDataGroupAddr;
        await this.connection.send(req);
    }
    // #15002
    async ReadGroupSwapEn(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GroupSwapEnOccupancy, 'ReadGroupSwapEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupSwapEnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15025
    async SetGroupSwapEn(addr, portAddr, scanBoardAddr, bBroadcast, isEnableGroupSwapEn) {
        const req = new codec_1.Request(isEnableGroupSwapEn ? [5] : [0], bBroadcast, 'SetGroupSwapEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupSwapEnAddr;
        await this.connection.send(req);
    }
    // #15043
    async ReadGroupSwapInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GroupSwapInfoOccupancy, 'ReadGroupSwapInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupSwapInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #15063
    async SetGroupSwapInfo(addr, portAddr, scanBoardAddr, bBroadcast, groupSwapInfo) {
        if (groupSwapInfo.length !== AddressMapping_1.default.GroupSwapInfoOccupancy)
            throw new TypeError(`Invalid buffer size: ${groupSwapInfo.length}`);
        const req = new codec_1.Request(groupSwapInfo, bBroadcast, 'SetGroupSwapInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupSwapInfoAddr;
        await this.connection.send(req);
    }
    // #15072
    async ReadSerialColorNum(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SerialColorNumOccupancy, 'ReadSerialColorNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialColorNumAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15092
    async SetSerialColorNum(addr, portAddr, scanBoardAddr, bBroadcast, serialColorNum) {
        const $data = (0, codec_1.encodeUIntLE)(serialColorNum, AddressMapping_1.default.SerialColorNumOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSerialColorNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialColorNumAddr;
        await this.connection.send(req);
    }
    // #15102
    async ReadSerialDotsNumPerColor(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SerialDotsNumPerColorOccupancy, 'ReadSerialDotsNumPerColor');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialDotsNumPerColorAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15122
    async SetSerialDotsNumPerColor(addr, portAddr, scanBoardAddr, bBroadcast, serialDotsNumPerColor) {
        const $data = (0, codec_1.encodeUIntLE)(serialDotsNumPerColor, AddressMapping_1.default.SerialDotsNumPerColorOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSerialDotsNumPerColor');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialDotsNumPerColorAddr;
        await this.connection.send(req);
    }
    // #15132
    async ReadSerialRGBCode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SerialRGBCodeOccupancy, 'ReadSerialRGBCode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialRGBCodeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15159
    async SetSerialRGBCode(addr, portAddr, scanBoardAddr, bBroadcast, red, green, blue, virtualRed) {
        const $data = (0, codec_1.encodeUIntLE)(red | (green << 2) | (blue << 4) | (virtualRed << 6), AddressMapping_1.default.SerialRGBCodeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSerialRGBCode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SerialRGBCodeAddr;
        await this.connection.send(req);
    }
    // #15170
    async ReadTVCardDVI0Width(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TVCardDVI0WidthOccupancy, 'ReadTVCardDVI0Width');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0WidthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15190
    async SetTVCardDVI0Width(addr, portAddr, scanBoardAddr, bBroadcast, dviWidth) {
        const $data = (0, codec_1.encodeUIntLE)(dviWidth, AddressMapping_1.default.TVCardDVI0WidthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTVCardDVI0Width');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0WidthAddr;
        await this.connection.send(req);
    }
    // #15200
    async ReadTVCardDVI0Height(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TVCardDVI0HeightOccupancy, 'ReadTVCardDVI0Height');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0HeightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15220
    async SetTVCardDVI0Height(addr, portAddr, scanBoardAddr, bBroadcast, dviHeight) {
        const $data = (0, codec_1.encodeUIntLE)(dviHeight, AddressMapping_1.default.TVCardDVI0HeightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTVCardDVI0Height');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0HeightAddr;
        await this.connection.send(req);
    }
    // #15230
    async ReadTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TVCardDVI0OffsetXOccupancy, 'ReadTVCardDVI0OffsetX');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0OffsetXAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15250
    async SetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetX) {
        const $data = (0, codec_1.encodeUIntLE)(dviOffsetX, AddressMapping_1.default.TVCardDVI0OffsetXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTVCardDVI0OffsetX');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0OffsetXAddr;
        await this.connection.send(req);
    }
    // #15260
    async ReadTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TVCardDVI0OffsetYOccupancy, 'ReadTVCardDVI0OffsetY');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0OffsetYAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15280
    async SetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY) {
        const $data = (0, codec_1.encodeUIntLE)(dviOffsetY, AddressMapping_1.default.TVCardDVI0OffsetYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTVCardDVI0OffsetY');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TVCardDVI0OffsetYAddr;
        await this.connection.send(req);
    }
    // #15290
    async ReadLogicShiftUnitNumPerSubField(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LogicShiftUnitNumPerSubFieldOccupancy, 'ReadLogicShiftUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LogicShiftUnitNumPerSubFieldAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15310
    async SetLogicShiftUnitNumPerSubField(addr, portAddr, scanBoardAddr, bBroadcast, ShiftUnitNum) {
        const $data = (0, codec_1.encodeUIntLE)(ShiftUnitNum, AddressMapping_1.default.LogicShiftUnitNumPerSubFieldOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLogicShiftUnitNumPerSubField');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LogicShiftUnitNumPerSubFieldAddr;
        await this.connection.send(req);
    }
    // #15320
    async ReadDviEncyptEn(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DviEncyptEnOccupancy, 'ReadDviEncyptEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DviEncyptEnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15343
    async SetDviEncyptEn(addr, portAddr, scanBoardAddr, bBroadcast, isDviEncypt) {
        const req = new codec_1.Request(isDviEncypt ? [5] : [255], bBroadcast, 'SetDviEncyptEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DviEncyptEnAddr;
        await this.connection.send(req);
    }
    // #15361
    async ReadPCMacAddr(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.PCMacAddrOccupancy, 'ReadPCMacAddr');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PCMacAddrAddr;
        return (await this.connection.send(req)).data;
    }
    // #15382
    async SetPCMacAddr(addr, portAddr, scanBoardAddr, bBroadcast, sendCardSn) {
        if (sendCardSn.length !== AddressMapping_1.default.PCMacAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${sendCardSn.length}`);
        const req = new codec_1.Request(sendCardSn, bBroadcast, 'SetPCMacAddr');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PCMacAddrAddr;
        await this.connection.send(req);
    }
    // #15426
    async ReadKillMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.KillModeOccupancy, 'ReadKillMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.KillModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15446
    async SetKillMode(addr, portAddr, scanBoardAddr, bBroadcast, killMode) {
        const $data = (0, codec_1.encodeUIntLE)(killMode, AddressMapping_1.default.KillModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetKillMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.KillModeAddr;
        await this.connection.send(req);
    }
    // #15456
    async ReadSelfTestMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SelfTestModeOccupancy, 'ReadSelfTestMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SelfTestModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15483
    async SetSelfTestMode(addr, portAddr, scanBoardAddr, bBroadcast, selfTestMode) {
        const $data = (0, codec_1.encodeUIntLE)(selfTestMode, AddressMapping_1.default.SelfTestModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSelfTestMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SelfTestModeAddr;
        await this.connection.send(req);
    }
    // #15494
    async ReadLockMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LockModeOccupancy, 'ReadLockMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LockModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15514
    async SetLockMode(addr, portAddr, scanBoardAddr, bBroadcast, lockMode) {
        const $data = (0, codec_1.encodeUIntLE)(lockMode, AddressMapping_1.default.LockModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetLockMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LockModeAddr;
        await this.connection.send(req);
    }
    // #15525
    async SetTemprature(addr, portAddr, scanBoardAddr, bBroadcast, tem) {
        const $data = (0, codec_1.encodeUIntLE)(tem, AddressMapping_1.default.TempratureOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTemprature');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TempratureAddr;
        await this.connection.send(req);
    }
    // #15536
    async ReadTemprature(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TempratureOccupancy, 'ReadTemprature');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TempratureAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15556
    async Set5pinControlLight(addr, portAddr, scanBoardAddr, bBroadcast, tem) {
        const $data = (0, codec_1.encodeUIntLE)(tem, AddressMapping_1.default.ControlLightOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Set5pinControlLight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlLightAddr;
        await this.connection.send(req);
    }
    // #15567
    async Read5pinControlLight(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ControlLightOccupancy, 'Read5pinControlLight');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ControlLightAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15587
    async ReadScreenEncrypt(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScreenEncryptedOccupancy, 'ReadScreenEncrypt');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScreenEncryptedAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15607
    async ReadSmartSetMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SmartSetModeOccupancy, 'ReadSmartSetMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SmartSetModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15633
    async SetSmartSetMode(addr, portAddr, scanBoardAddr, bBroadcast, smartMode) {
        const $data = (0, codec_1.encodeUIntLE)(smartMode, AddressMapping_1.default.SmartSetModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSmartSetMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SmartSetModeAddr;
        await this.connection.send(req);
    }
    // #15644
    async SetSmartSetMode_1(addr, portAddr, scanBoardAddr, bBroadcast, smartMode) {
        const $data = (0, codec_1.encodeUIntLE)(smartMode, AddressMapping_1.default.SmartSetModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSmartSetMode_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SmartSetModeAddr;
        await this.connection.send(req);
    }
    // #15655
    async ReadAverMatrix(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AverMatrixOccupancy, 'ReadAverMatrix');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AverMatrixAddr;
        return (await this.connection.send(req)).data;
    }
    // #15675
    async ReadColorAdjustEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColorAdjustEnableOccupancy, 'ReadColorAdjustEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15698
    async SetColorAdjustEnable(addr, portAddr, scanBoardAddr, bBroadcast, isEnable) {
        const req = new codec_1.Request(isEnable ? [2] : [255], bBroadcast, 'SetColorAdjustEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustEnableAddr;
        await this.connection.send(req);
    }
    // #15717
    async ReadAdjustMatrixAndEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColorAdjustEnableOccupancy, 'ReadAdjustMatrixAndEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustMatrixAndEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15763
    async SetColorAdjustMatrixAndEnableNew(addr, portAddr, scanBoardAddr, bBroadcast, isEnable) {
        const req = new codec_1.Request(isEnable ? [4] : [0], bBroadcast, 'SetColorAdjustMatrixAndEnableNew');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustMatrixAndEnableAddr;
        await this.connection.send(req);
    }
    // #15777
    async SetColorAdjustMatrixAndDataNew(addr, portAddr, scanBoardAddr, bBroadcast, byteData) {
        const req = new codec_1.Request([byteData], bBroadcast, 'SetColorAdjustMatrixAndDataNew');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustMatrixAndEnableAddr;
        await this.connection.send(req);
    }
    // #15787
    async ReadScaleInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScaleInfoOccupancy, 'ReadScaleInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScaleInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15807
    async SetScaleInfo(addr, portAddr, scanBoardAddr, bBroadcast, scaleInfo) {
        const $data = (0, codec_1.encodeUIntLE)(scaleInfo, AddressMapping_1.default.ScaleInfoOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScaleInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScaleInfoAddr;
        await this.connection.send(req);
    }
    // #15817
    async SetScanerDirectModeEnable(addr, portAddr, scanBoardAddr, broadcast, enable) {
        const req = new codec_1.Request(enable ? [5] : [0], broadcast, 'SetScanerDirectModeEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannderDirectModeEnableAddr;
        await this.connection.send(req);
    }
    // #15835
    async ReadScanerDirectModeEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerDirectModeEnableOccupancy, 'ReadScanerDirectModeEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannderDirectModeEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15858
    async ReadTotalLightCdfRes(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.TotalLightCdfResOccupancy, 'ReadTotalLightCdfRes');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalLightCdfResAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #15878
    async SetTotalLightCdfRes(addr, portAddr, scanBoardAddr, bBroadcast, totalLightCdfRes) {
        const $data = (0, codec_1.encodeUIntLE)(totalLightCdfRes, AddressMapping_1.default.TotalLightCdfResOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetTotalLightCdfRes');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.TotalLightCdfResAddr;
        await this.connection.send(req);
    }
    // #15922
    async ReadModuleScanSequenceInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Module_ScanSequenceInfoOccupancy, 'ReadModuleScanSequenceInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_ScanSequenceInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #15931
    async SetModuleScanSequenceInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanSequenceInfo) {
        const req = new codec_1.Request(scanSequenceInfo, bBroadcast, 'SetModuleScanSequenceInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_ScanSequenceInfoAddr;
        await this.connection.send(req);
    }
    // #15940
    async ReadScannerFunctionConfig(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScanBoardFunctionConfigOccupancy, 'ReadScannerFunctionConfig');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanBoardFunctionConfigAddr;
        return (await this.connection.send(req)).data;
    }
    // #15997
    async ReadModule_McuProgramLength(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_McuProgramLengthOccupancy, 'ReadModule_McuProgramLength');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_McuProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16017
    async ReadModule_McuProgramEdition(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Module_McuProgramEditionOccupancy, 'ReadModule_McuProgramEdition');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_McuProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16037
    async ReadModule_McuProgramRemarks(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Module_McuProgramRemarksOccupancy, 'ReadModule_McuProgramRemarks');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Module_McuProgramRemarksAddr;
        return (await this.connection.send(req)).data;
    }
    // #16152
    async SetRedGammaTableData(addr, portAddr, scanBoardAddr, bBroadcast, data, is22Bit) {
        const req = new codec_1.Request(data, bBroadcast, 'SetRedGammaTableData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RedGammaTableAddr;
        if (is22Bit) {
            req.address = AddressMapping_1.default.RedGammaTableAddr_22bit;
        }
        await this.connection.send(req);
    }
    // #16316
    async SetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, bBroadcast, data, is22Bit) {
        const req = new codec_1.Request(data, bBroadcast, 'SetExtendRedGammaTableData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ExtendRedGammaTableAddr;
        if (is22Bit) {
            req.address = AddressMapping_1.default.ExtendRedGammaTableAddr_22bit;
        }
        await this.connection.send(req);
    }
    // #16553
    async WriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, bBroadcast, data, length, registerAddr) {
        if (data.length !== length)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteCorrectionDataToScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = registerAddr;
        await this.connection.send(req);
    }
    // #16562
    async ReadCorrectionDataToScan(addr, portAddr, scanBoardAddr, readLength, registerAddr) {
        const req = new codec_1.Request(readLength, 'ReadCorrectionDataToScan');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = registerAddr;
        return (await this.connection.send(req)).data;
    }
    // #16598
    async ReadScanerBurningProgramPackage(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanerBurningProgramPackage');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = 0;
        return (await this.connection.send(req)).data;
    }
    // #16685
    async ReadScanner_FPGAProgramLength(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_FPGAProgramLengthOccupancy, 'ReadScanner_FPGAProgramLength');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16705
    async SetScanner_FPGAProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramLength) {
        const $data = (0, codec_1.encodeUIntLE)(scanner_FPGAProgramLength, AddressMapping_1.default.Scanner_FPGAProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanner_FPGAProgramLength');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramLengthAddr;
        await this.connection.send(req);
    }
    // #16715
    async ReadScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_FPGAProgramEditionOccupancy, 'ReadScanner_FPGAProgramEdition');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16735
    async SetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramEdition) {
        const $data = (0, codec_1.encodeUIntLE)(scanner_FPGAProgramEdition, AddressMapping_1.default.Scanner_FPGAProgramEditionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanner_FPGAProgramEdition');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramEditionAddr;
        await this.connection.send(req);
    }
    // #16745
    async ReadScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_FPGAProgramRemarksOccupancy, 'ReadScanner_FPGAProgramRemarks');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramRemarksAddr;
        return (await this.connection.send(req)).data;
    }
    // #16767
    async SetScanner_FPGAProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramRemarks) {
        if (scanner_FPGAProgramRemarks.length !== AddressMapping_1.default.Scanner_FPGAProgramRemarksOccupancy)
            throw new TypeError(`Invalid buffer size: ${scanner_FPGAProgramRemarks.length}`);
        const req = new codec_1.Request(scanner_FPGAProgramRemarks, bBroadcast, 'SetScanner_FPGAProgramRemarks');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramRemarksAddr;
        await this.connection.send(req);
    }
    // #16805
    async ReadScanner_FPGAProgramInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_FPGAProgramInfoOccupancy, 'ReadScanner_FPGAProgramInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #16827
    async SetScanner_FPGAProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramRemarks) {
        if (scanner_FPGAProgramRemarks.length !== AddressMapping_1.default.Scanner_FPGAProgramInfoOccupancy)
            throw new TypeError(`Invalid buffer size: ${scanner_FPGAProgramRemarks.length}`);
        const req = new codec_1.Request(scanner_FPGAProgramRemarks, bBroadcast, 'SetScanner_FPGAProgramInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_FPGAProgramInfoAddr;
        await this.connection.send(req);
    }
    // #16836
    async ReadSender3D_FPGAProgramInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender3D_FPGAProgramInfoOccupancy, 'ReadSender3D_FPGAProgramInfo');
        req.destination = addr;
        req.deviceType = 4;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender3D_FPGAProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #16858
    async ReadSender3D_McuProgramInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Sender3D_McuProgramInfoOccupancy, 'ReadSender3D_McuProgramInfo');
        req.destination = addr;
        req.deviceType = 4;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Sender3D_McuProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #16906
    async ReadScanner_McuProgram(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_McuProgram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramLengthAddr;
        return (await this.connection.send(req)).data;
    }
    // #16915
    async ReadScanner_McuProgramLength(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_McuProgramLengthOccupancy, 'ReadScanner_McuProgramLength');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16935
    async SetScanner_McuProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramLength) {
        const $data = (0, codec_1.encodeUIntLE)(scanner_McuProgramLength, AddressMapping_1.default.Scanner_McuProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanner_McuProgramLength');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramLengthAddr;
        await this.connection.send(req);
    }
    // #16945
    async ReadScanner_McuProgramEdition(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_McuProgramEditionOccupancy, 'ReadScanner_McuProgramEdition');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramEditionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #16965
    async SetScanner_McuProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramEdition) {
        const $data = (0, codec_1.encodeUIntLE)(scanner_McuProgramEdition, AddressMapping_1.default.Scanner_McuProgramEditionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScanner_McuProgramEdition');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramEditionAddr;
        await this.connection.send(req);
    }
    // #16975
    async ReadScanner_McuProgramRemarks(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_McuProgramRemarksOccupancy, 'ReadScanner_McuProgramRemarks');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramRemarksAddr;
        return (await this.connection.send(req)).data;
    }
    // #16997
    async SetScanner_McuProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramRemarks) {
        if (scanner_McuProgramRemarks.length !== AddressMapping_1.default.Scanner_McuProgramRemarksOccupancy)
            throw new TypeError(`Invalid buffer size: ${scanner_McuProgramRemarks.length}`);
        const req = new codec_1.Request(scanner_McuProgramRemarks, bBroadcast, 'SetScanner_McuProgramRemarks');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramRemarksAddr;
        await this.connection.send(req);
    }
    // #17061
    async ReadScanner_McuProgramInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_McuProgramInfoOccupancy, 'ReadScanner_McuProgramInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #17083
    async SetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramRemarks) {
        if (scanner_McuProgramRemarks.length !== AddressMapping_1.default.Scanner_McuProgramInfoOccupancy)
            throw new TypeError(`Invalid buffer size: ${scanner_McuProgramRemarks.length}`);
        const req = new codec_1.Request(scanner_McuProgramRemarks, bBroadcast, 'SetScanner_McuProgramInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_McuProgramInfoAddr;
        await this.connection.send(req);
    }
    // #17092
    async ReadTempInfoOfScanCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_TempInfoOfScanCardOccupancy, 'ReadTempInfoOfScanCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_TempInfoOfScanCardhAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17121
    async ReadHumiOfScanCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_HumiOfScanCardOccupancy, 'ReadHumiOfScanCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_HumiOfScanCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17144
    async ReadVoltageOfScanCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_VoltageOfScanCardOccupancy, 'ReadVoltageOfScanCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_VoltageOfScanCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17167
    async ReadAttachedMonitorCardExist(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AttachedMonitorCardExistOccupancy, 'ReadAttachedMonitorCardExist');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AttachedMonitorCardExistAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17196
    async ReadAttachedMonitorCardModle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AttachedMonitorCardModleOccupancy, 'ReadAttachedMonitorCardModle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AttachedMonitorCardModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17216
    async ReadAttachedMonitorCardProgramVersion(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AttachedMonitorCardProgramVersionOccupancy, 'ReadAttachedMonitorCardProgramVersion');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AttachedMonitorCardProgramVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17236
    async ReadTempInfoOfMonitorCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_TempInfoOfMonitorCardOccupancy, 'ReadTempInfoOfMonitorCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_TempInfoOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17265
    async ReadHumiOfMonitorCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_HumiOfMonitorCardOccupancy, 'ReadHumiOfMonitorCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_HumiOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17288
    async ReadSmokeWarningOfMonitorCard(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_SmokeWarningOfMonitorCardOccupancy, 'ReadSmokeWarningOfMonitorCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_SmokeWarningOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17320
    async ReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_FanSpeedOfMonitorCardOccupancy * readCountOfFan, 'ReadFanSpeedOfMonitorCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address =
            AddressMapping_1.default.Scanner_FanSpeedOfMonitorCardAddr +
                AddressMapping_1.default.Scanner_FanSpeedOfMonitorCardOccupancy * beginIdnexOfFan;
        return (await this.connection.send(req)).data;
    }
    // #17348
    async ReadVoltageOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfValtage, beginIdnexOfValtage) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_VoltageOfMonitorCardOccupancy * readCountOfValtage, 'ReadVoltageOfMonitorCard');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address =
            AddressMapping_1.default.Scanner_VoltageOfMonitorCardAddr +
                AddressMapping_1.default.Scanner_VoltageOfMonitorCardOccupancy * beginIdnexOfValtage;
        return (await this.connection.send(req)).data;
    }
    // #17376
    async ReadAllStatus(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_AllMonitorDataOccupancy, 'ReadAllStatus');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_AllMonitorDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #17385
    async ReadAllStatus_1(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadAllStatus_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_AllMonitorDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #17394
    async ReadAllModuelStatus(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadAllModuelStatus');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_AllMonitorModuelDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #17533
    async ReadHubMonitorStatus(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_HubMonitorDataOccupancy, 'ReadHubMonitorStatus');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_HubMonitorAllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #17542
    async ReadHubMonitorStatus_1(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadHubMonitorStatus_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_HubMonitorAllDataAddr;
        return (await this.connection.send(req)).data;
    }
    // #17664
    async ReadAutoCorrectUpload(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.AutoCorrectUploadOccupancy, 'ReadAutoCorrectUpload');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AutoCorrectUploadAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17691
    async SetAutoCorrectUpload(addr, portAddr, scanBoardAddr, bBroadcast, AutoCorrect) {
        const req = new codec_1.Request(AutoCorrect ? [85] : [5], bBroadcast, 'SetAutoCorrectUpload');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AutoCorrectUploadAddr;
        await this.connection.send(req);
    }
    // #17709
    async ReadScanCardAllStatus(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_ScanCardAllStatusOccupancy, 'ReadScanCardAllStatus');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_ScanCardAllStatusAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17752
    async ReadScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_MutiChipRamA');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamAAddr;
        return (await this.connection.send(req)).data;
    }
    // #17774
    async SetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
        if (mutiChipRamA.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
        const req = new codec_1.Request(mutiChipRamA, bBroadcast, 'SetScanner_MutiChipRamA');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamAAddr;
        await this.connection.send(req);
    }
    // #17814
    async ReadScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_MutiChipRamB');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamBAddr;
        return (await this.connection.send(req)).data;
    }
    // #17836
    async SetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamB) {
        if (mutiChipRamB.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamB.length}`);
        const req = new codec_1.Request(mutiChipRamB, bBroadcast, 'SetScanner_MutiChipRamB');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamBAddr;
        await this.connection.send(req);
    }
    // #17876
    async ReadScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_MutiChipRamC');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamCAddr;
        return (await this.connection.send(req)).data;
    }
    // #17898
    async SetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamC) {
        if (mutiChipRamC.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamC.length}`);
        const req = new codec_1.Request(mutiChipRamC, bBroadcast, 'SetScanner_MutiChipRamC');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamCAddr;
        await this.connection.send(req);
    }
    // #17909
    async SetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamD) {
        if (mutiChipRamD.length !== 0)
            throw new TypeError(`Invalid buffer size: ${mutiChipRamD.length}`);
        const req = new codec_1.Request(mutiChipRamD, bBroadcast, 'SetScanner_MutiChipRamD');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_MutiChipRamDAddr;
        await this.connection.send(req);
    }
    // #17949
    async Set2038SBlankOptimizationLevel1(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set2038SBlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SBlankOptimizationLevelAddr1;
        await this.connection.send(req);
    }
    // #17960
    async Read2038SBlankOptimizationLevel1(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowAshCompensationOne5253Occupancy, 'Read2038SBlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SBlankOptimizationLevelAddr1;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #17980
    async Set2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set2038SBlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SBlankOptimizationLevelAddr2;
        await this.connection.send(req);
    }
    // #17991
    async Read2038SBlankOptimizationLevel2(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_BlankOptimizationLevelOccupancy, 'Read2038SBlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SBlankOptimizationLevelAddr2;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18011
    async Set2038SPhotoBlankOptimizationLevel1(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set2038SPhotoBlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SPhotoBlankOptimizationLevelAddr1;
        await this.connection.send(req);
    }
    // #18022
    async Set2038SPhotoBlankOptimizationLevel2(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set2038SPhotoBlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_2038SPhotoBlankOptimizationLevelAddr2;
        await this.connection.send(req);
    }
    // #18033
    async Set9868ABlankOptimizationLevel1(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set9868ABlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868ABlankOptimizationLevelAddr1;
        await this.connection.send(req);
    }
    // #18044
    async Read9868ABlankOptimizationLevel1(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_BlankOptimizationLevelOccupancy, 'Read9868ABlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868ABlankOptimizationLevelAddr1;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18064
    async Set9868ABlankOptimizationLevel2(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set9868ABlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868ABlankOptimizationLevelAddr2;
        await this.connection.send(req);
    }
    // #18075
    async Read9868ABlankOptimizationLevel2(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner_BlankOptimizationLevelOccupancy, 'Read9868ABlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868ABlankOptimizationLevelAddr2;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18095
    async Set9868APhotoBlankOptimizationLevel1(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set9868APhotoBlankOptimizationLevel1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868APhotoBlankOptimizationLevelAddr1;
        await this.connection.send(req);
    }
    // #18106
    async Set9868APhotoBlankOptimizationLevel2(addr, portAddr, scanBoardAddr, bBroadcast, blankLevelValue) {
        const req = new codec_1.Request([blankLevelValue], bBroadcast, 'Set9868APhotoBlankOptimizationLevel2');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_9868APhotoBlankOptimizationLevelAddr2;
        await this.connection.send(req);
    }
    // #18117
    async ReadScanner_NewOETable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.NewOETableOccupancy, 'ReadScanner_NewOETable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOETableAddr;
        return (await this.connection.send(req)).data;
    }
    // #18137
    async SetScanner_NewOETable(addr, portAddr, scanBoardAddr, bBroadcast, newOETable) {
        if (newOETable.length !== AddressMapping_1.default.NewOETableOccupancy)
            throw new TypeError(`Invalid buffer size: ${newOETable.length}`);
        const req = new codec_1.Request(newOETable, bBroadcast, 'SetScanner_NewOETable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOETableAddr;
        await this.connection.send(req);
    }
    // #18146
    async ReadScanner_NewOEHighTable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.NewOEHighTableOccupancy, 'ReadScanner_NewOEHighTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOEHighTableAddr;
        return (await this.connection.send(req)).data;
    }
    // #18166
    async SetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, bBroadcast, newOETable) {
        if (newOETable.length !== AddressMapping_1.default.NewOEHighTableOccupancy)
            throw new TypeError(`Invalid buffer size: ${newOETable.length}`);
        const req = new codec_1.Request(newOETable, bBroadcast, 'SetScanner_NewOEHighTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.NewOEHighTableAddr;
        await this.connection.send(req);
    }
    // #18175
    async ReadScanner_ColorRestore(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColorRestoreOccupancy, 'ReadScanner_ColorRestore');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorRestoreAddr;
        return (await this.connection.send(req)).data;
    }
    // #18195
    async SetScanner_ColorRestore(addr, portAddr, scanBoardAddr, bBroadcast, colorRestore) {
        if (colorRestore.length !== AddressMapping_1.default.ColorRestoreOccupancy)
            throw new TypeError(`Invalid buffer size: ${colorRestore.length}`);
        const req = new codec_1.Request(colorRestore, bBroadcast, 'SetScanner_ColorRestore');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorRestoreAddr;
        await this.connection.send(req);
    }
    // #18204
    async SetScanner_DMFirst(addr, portAddr, scanBoardAddr, bBroadcast, DMFirst) {
        if (DMFirst.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMFirst.length}`);
        const req = new codec_1.Request(DMFirst, bBroadcast, 'SetScanner_DMFirst');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmFirstAddr;
        await this.connection.send(req);
    }
    // #18214
    async SetScanner_DMPM(addr, portAddr, scanBoardAddr, bBroadcast, DMPM) {
        if (DMPM.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMPM.length}`);
        const req = new codec_1.Request(DMPM, bBroadcast, 'SetScanner_DMPM');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmPMAAddr;
        await this.connection.send(req);
    }
    // #18224
    async SetScanner_DMSecond(addr, portAddr, scanBoardAddr, bBroadcast, DMSecond) {
        if (DMSecond.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMSecond.length}`);
        const req = new codec_1.Request(DMSecond, bBroadcast, 'SetScanner_DMSecond');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmSecondAddr;
        await this.connection.send(req);
    }
    // #18234
    async SetScanner_DMThird(addr, portAddr, scanBoardAddr, bBroadcast, DMThird) {
        if (DMThird.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMThird.length}`);
        const req = new codec_1.Request(DMThird, bBroadcast, 'SetScanner_DMThird');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmThirdAAddr;
        await this.connection.send(req);
    }
    // #18244
    async SetScanner_OE(addr, portAddr, scanBoardAddr, bBroadcast, DMThird) {
        if (DMThird.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMThird.length}`);
        const req = new codec_1.Request(DMThird, bBroadcast, 'SetScanner_OE');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_OEAAddr;
        await this.connection.send(req);
    }
    // #18254
    async SetScanner_DMWSP(addr, portAddr, scanBoardAddr, bBroadcast, DMWSP) {
        if (DMWSP.length !== 0)
            throw new TypeError(`Invalid buffer size: ${DMWSP.length}`);
        const req = new codec_1.Request(DMWSP, bBroadcast, 'SetScanner_DMWSP');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmWSPAAddr;
        await this.connection.send(req);
    }
    // #18329
    async ReadScanner_DMFirst(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_DMFirst');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmFirstAddr;
        return (await this.connection.send(req)).data;
    }
    // #18337
    async ReadScanner_DMPM(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_DMPM');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmPMAAddr;
        return (await this.connection.send(req)).data;
    }
    // #18345
    async ReadScanner_DMSecond(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_DMSecond');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmSecondAddr;
        return (await this.connection.send(req)).data;
    }
    // #18353
    async ReadScanner_DMThird(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_DMThird');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmThirdAAddr;
        return (await this.connection.send(req)).data;
    }
    // #18361
    async ReadScanner_DMWSP(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadScanner_DMWSP');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_DmWSPAAddr;
        return (await this.connection.send(req)).data;
    }
    // #18369
    async ReadScanner_LowGrayCodeTable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowGrayCodeTableOccupancy, 'ReadScanner_LowGrayCodeTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowGrayCodeTableAddr;
        return (await this.connection.send(req)).data;
    }
    // #18389
    async SetScanner_LowGrayCodeTable(addr, portAddr, scanBoardAddr, bBroadcast, lowGrayCodeTable) {
        if (lowGrayCodeTable.length !== AddressMapping_1.default.LowGrayCodeTableOccupancy)
            throw new TypeError(`Invalid buffer size: ${lowGrayCodeTable.length}`);
        const req = new codec_1.Request(lowGrayCodeTable, bBroadcast, 'SetScanner_LowGrayCodeTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.LowGrayCodeTableAddr;
        await this.connection.send(req);
    }
    // #18398
    async SetScanner_AutoRefreshRate(addr, portAddr, scanBoardAddr, bBroadcast, autoRefreshRateData) {
        const req = new codec_1.Request(autoRefreshRateData, bBroadcast, 'SetScanner_AutoRefreshRate');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.AutoRefreshRateAddr;
        await this.connection.send(req);
    }
    // #18407
    async ReadSingleChipMicyocoSpaceAuto(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SingleChipMicyocoSpaceAutoOccupancy, 'ReadSingleChipMicyocoSpaceAuto');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SingleChipMicyocoSpaceAutoAddr;
        return (await this.connection.send(req)).data;
    }
    // #18446
    async ReadSingleChipMicyocoSpace(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SingleChipMicyocoSpaceOccupancy, 'ReadSingleChipMicyocoSpace');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SingleChipMicyocoSpaceAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18466
    async SetSingleChipMicyocoSpace(addr, portAddr, scanBoardAddr, bBroadcast, singleChipMicyocoSpace) {
        const $data = (0, codec_1.encodeUIntLE)(singleChipMicyocoSpace, AddressMapping_1.default.ConnectRelayTemperatureOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSingleChipMicyocoSpace');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SingleChipMicyocoSpaceAddr;
        await this.connection.send(req);
    }
    // #18476
    async ReadConnectRelayTemperature(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ConnectRelayTemperatureOccupancy, 'ReadConnectRelayTemperature');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ConnectRelayTemperatureAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18509
    async ReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DisConnectRelayTemperatureOccupancy, 'ReadDisConnectRelayTemperature');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DisConnectRelayTemperatureAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18542
    async ReadScannerRecordTime(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerRecordTimeOccupancy, 'ReadScannerRecordTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerRecordTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18562
    async SetScannerRecordTime(addr, portAddr, scanBoardAddr, bBroadcast) {
        const $data = (0, codec_1.encodeUIntLE)(0, AddressMapping_1.default.ScannerRecordTimeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScannerRecordTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerRecordTimeAddr;
        await this.connection.send(req);
    }
    // #18572
    async ReadPowerWorkState(addr, portAddr, scanBoardAddr, powerBackNumber) {
        const req = new codec_1.Request(powerBackNumber, 'ReadPowerWorkState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.PowerWorkStateAddr;
        return (await this.connection.send(req)).data;
    }
    // #18592
    async ReadScannerDigitalTubeSwitch(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerDigitalTubeSwitchOccupancy, 'ReadScannerDigitalTubeSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerDigitalTubeSwitchAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18615
    async SetScannerDigitalTubeSwitch(addr, portAddr, scanBoardAddr, bBroadcast, isOpen) {
        const req = new codec_1.Request(isOpen ? [22] : [0], bBroadcast, 'SetScannerDigitalTubeSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerDigitalTubeSwitchAddr;
        await this.connection.send(req);
    }
    // #18629
    async ReadConfigFileID(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerConfigFileIDOccupancy, 'ReadConfigFileID');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerConfigFileIDAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18649
    async SetConfigFileID(addr, portAddr, scanBoardAddr, bBroadcast, configFileID) {
        const $data = (0, codec_1.encodeUIntLE)(configFileID, AddressMapping_1.default.ScannerConfigFileIDOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetConfigFileID');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerConfigFileIDAddr;
        await this.connection.send(req);
    }
    // #18659
    async ReadScannerIrCabientCfg(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerIrCanbinetCfgOccupancy, 'ReadScannerIrCabientCfg');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerIrCanbinetCfgAddr;
        return (await this.connection.send(req)).data;
    }
    // #18680
    async SetScannerIrCabientCfg(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetScannerIrCabientCfg');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerIrCanbinetCfgAddr;
        await this.connection.send(req);
    }
    // #18689
    async ReadScannerCabinetID(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerCabinetIDOccupancy, 'ReadScannerCabinetID');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerCabinetIDAddr;
        return (await this.connection.send(req)).data;
    }
    // #18757
    async ReadScannerCabinetCorrectLocationSize(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerCabinetCorrectLocationSizeOccupancy, 'ReadScannerCabinetCorrectLocationSize');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerCabinetCorrectLocationSizeAddr;
        return (await this.connection.send(req)).data;
    }
    // #18818
    async ReadSpecialFrameRate(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SpecialFrameRateOccupancy, 'ReadSpecialFrameRate');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SpecialFrameRateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18850
    async ReadMoudleNumber(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerMoudleNumberOccupancy, 'ReadMoudleNumber');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanneMoudleNumberAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18871
    async SetMoudleNumber(addr, portAddr, scanBoardAddr, bBroadcast, MoudleNumber) {
        const $data = (0, codec_1.encodeUIntLE)(MoudleNumber, AddressMapping_1.default.ScannerMoudleNumberOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetMoudleNumber');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanneMoudleNumberAddr;
        await this.connection.send(req);
    }
    // #18881
    async ReadDoubleCardSpace(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleModelCardSpaceCardSpaceOccupancy, 'ReadDoubleCardSpace');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceCardSpace;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18901
    async SetScannerRecordCmd(addr, portAddr, scanBoardAddr, bBroadcast, bStartRecord) {
        const req = new codec_1.Request(bStartRecord ? [1] : [0], bBroadcast, 'SetScannerRecordCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceRecordCmd;
        await this.connection.send(req);
    }
    // #18919
    async ReadDoubleCardRecordCmd(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleModelCardSpaceRecordCmdOccupancy, 'ReadDoubleCardRecordCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceRecordCmd;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18939
    async ReadDoubleCardEaraseState(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleModelCardSpaceEaraseStateOccupancy, 'ReadDoubleCardEaraseState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceEaraseState;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18968
    async SetDoubleCardEaraseState(addr, portAddr, scanBoardAddr, bBroadcast, EaraseTag) {
        const $data = (0, codec_1.encodeUIntLE)(EaraseTag, AddressMapping_1.default.DoubleModelCardSpaceNandFlashEaraseOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDoubleCardEaraseState');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceNandFlashEarase;
        await this.connection.send(req);
    }
    // #18978
    async ReadDoubleEaraseStateCmd(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleModelCardSpaceNandFlashEaraseOccupancy, 'ReadDoubleEaraseStateCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceNandFlashEarase;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #18998
    async ReadDoubleModelFrameRate(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleModelCardSpaceRecordFreOccupancy, 'ReadDoubleModelFrameRate');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceRecordFre;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19018
    async SetScannerFrameRate(addr, portAddr, scanBoardAddr, bBroadcast, frameRate) {
        const $data = (0, codec_1.encodeUIntLE)(frameRate, AddressMapping_1.default.DoubleModelCardSpaceRecordFreOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetScannerFrameRate');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DoubleModelCardSpaceRecordFre;
        await this.connection.send(req);
    }
    // #19028
    async ReadModuleConfigInfo(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadModuleConfigInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleConfigInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #19050
    async SetModuleConfigInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetModuleConfigInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleConfigInfoAddr;
        await this.connection.send(req);
    }
    // #19059
    async ExtendModuleOperCmd(addr, portAddr, scanBoardAddr, bBroadcast, data, length) {
        if (data.length !== length)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'ExtendModuleOperCmd');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleOperCmdAddr;
        await this.connection.send(req);
    }
    // #19068
    async ReadExtendModuleConfigInfo(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadExtendModuleConfigInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ModuleConfigInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #19090
    async ReadScannerBacklightSwitch(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerBacklightSwitchOccupancy, 'ReadScannerBacklightSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerBacklightSwitchAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19113
    async SetScannerBacklightSwitch(addr, portAddr, scanBoardAddr, bBroadcast, isOpen) {
        const req = new codec_1.Request(isOpen ? [22] : [0], bBroadcast, 'SetScannerBacklightSwitch');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerBacklightSwitchAddr;
        await this.connection.send(req);
    }
    // #19127
    async ReadBitErrorRateData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BitErrorRateOccupancy, 'ReadBitErrorRateData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BitErrorRateAddr;
        return (await this.connection.send(req)).data;
    }
    // #19151
    async WriteBitErrorRateClearData(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'WriteBitErrorRateClearData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BitErrorRateClearAddr;
        await this.connection.send(req);
    }
    // #19161
    async WriteScanerSlavaFlashToSdram(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([134], bBroadcast, 'WriteScanerSlavaFlashToSdram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerSlavaFlashToSdramAddr;
        await this.connection.send(req);
    }
    // #19171
    async WriteScanerSdramToSlaveFlash(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([133], bBroadcast, 'WriteScanerSdramToSlaveFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerSdramToSlaveFlash;
        await this.connection.send(req);
    }
    // #19181
    async MoveCorrectionFromSlaveFlashToSdram(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'MoveCorrectionFromSlaveFlashToSdram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Correction_FactoryAddr;
        await this.connection.send(req);
    }
    // #19191
    async MoveCorrectionFromMasterFlashToSdram(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'MoveCorrectionFromMasterFlashToSdram');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Correction_ApplicationAddr;
        await this.connection.send(req);
    }
    // #19201
    async MoveCorrectionFromSdramToSlaveFlash(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'MoveCorrectionFromSdramToSlaveFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Correction_SolidificationAddr;
        await this.connection.send(req);
    }
    // #19211
    async MoveCorrectionFromSdramToMasterFlash(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'MoveCorrectionFromSdramToMasterFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Correction_RestitutionAddr;
        await this.connection.send(req);
    }
    // #19221
    async WriteMappingFrontToScaner(addr, portAddr, scanBoardAddr, bBroadcast, data, dataLength) {
        const req = new codec_1.Request(data, bBroadcast, 'WriteMappingFrontToScaner');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.WriteScannerMappingFrontAddr;
        await this.connection.send(req);
    }
    // #19241
    async SaveScannerFontLibToFlash(addr, portAddr, scanBoardAddr, bBroadcast) {
        const req = new codec_1.Request([5], bBroadcast, 'SaveScannerFontLibToFlash');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SaveScannerFontLibAddr;
        await this.connection.send(req);
    }
    // #19251
    async WriteScannerResetEn(addr, portAddr, scanBoardAddr, bBroadcast, isOpen, length) {
        const $data = (0, codec_1.encodeUIntLE)(!isOpen ? 4 : 5, AddressMapping_1.default.ResetEnPointOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'WriteScannerResetEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerResetEnAddr;
        await this.connection.send(req);
    }
    // #19264
    async ReadScannerResetEn(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ResetEnPointOccupancy, 'ReadScannerResetEn');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerResetEnAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19284
    async WriteScannerResetCycleNum(addr, portAddr, scanBoardAddr, bBroadcast, cycleNum, length) {
        const $data = (0, codec_1.encodeUIntLE)(cycleNum, AddressMapping_1.default.ResetCycleNumPointOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'WriteScannerResetCycleNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerResetCycleNumAddr;
        await this.connection.send(req);
    }
    // #19295
    async ReadScannerResetCycleNum(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ResetCycleNumPointOccupancy, 'ReadScannerResetCycleNum');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerResetCycleNumAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19315
    async WriteScannerResetCommand(addr, portAddr, scanBoardAddr, bBroadcast, resetType) {
        const req = new codec_1.Request([resetType], bBroadcast, 'WriteScannerResetCommand');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerResetAndSwitchAddr;
        await this.connection.send(req);
    }
    // #19325
    async Switch2053IP(addr, portAddr, scanBoardAddr, bBroadcast, switchIP2053Enable) {
        const $data = (0, codec_1.encodeUIntLE)(!switchIP2053Enable ? 5 : 0, AddressMapping_1.default.SwitchIP2053Occupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Switch2053IP');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SwitchIP2053Addr;
        await this.connection.send(req);
    }
    // #19340
    async SwitchAutoOrManualLinearTable(addr, portAddr, scanBoardAddr, bBroadcast, switchAutoOrManualEnable) {
        const $data = (0, codec_1.encodeUIntLE)(switchAutoOrManualEnable ? 1 : 0, AddressMapping_1.default.SwitchAutoOrManualLinearTableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SwitchAutoOrManualLinearTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SwitchAutoOrManualLinearTableAddr;
        await this.connection.send(req);
    }
    // #19352
    async StartAutoLinearTable(addr, portAddr, scanBoardAddr, bBroadcast) {
        const $data = (0, codec_1.encodeUIntLE)(1, AddressMapping_1.default.StartAutoLinearTableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'StartAutoLinearTable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StartAutoLinearTableAddr;
        await this.connection.send(req);
    }
    // #19363
    async SetSpecialParam(addr, portAddr, scanBoardAddr, bBroadcast, rowChangePoint) {
        const $data = (0, codec_1.encodeUIntLE)(rowChangePoint, AddressMapping_1.default.RowChangePointOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetSpecialParam');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StartAutoLinearTableAddr;
        await this.connection.send(req);
    }
    // #19373
    async ReadGammaMaxValue2053(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GammaMaxValue2053Occupancy, 'ReadGammaMaxValue2053');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GammaMaxValue2053Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19409
    async ReadGammaMaxValue(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.GammaMaxValue2053Occupancy, 'ReadGammaMaxValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GammaMaxValue2053Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19418
    async SetGammaMaxValue(addr, portAddr, scanBoardAddr, bBroadcast, GammaMaxValue2053) {
        const $data = (0, codec_1.encodeUIntLE)(GammaMaxValue2053, AddressMapping_1.default.GammaMaxValue2053Occupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetGammaMaxValue');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GammaMaxValue2053Addr;
        await this.connection.send(req);
    }
    // #19428
    async ReadEnhancedMode2053(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.EnhancedMode2053Occupancy, 'ReadEnhancedMode2053');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.EnhancedMode2053Addr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19481
    async SetScanBoardDataTo2000(addr, portIndex, scanIndex, data, length) {
        if (data.length !== length)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, false, 'SetScanBoardDataTo2000');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portIndex;
        req.rcvIndex = scanIndex;
        req.address = AddressMapping_1.default.SDKReadOrWriteAddr;
        await this.connection.send(req);
    }
    // #19490
    async ReadScanBoardDataTo2000(addr, portAddr, scanBoardAddr, length) {
        const req = new codec_1.Request(length, 'ReadScanBoardDataTo2000');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SDKReadOrWriteAddr;
        return (await this.connection.send(req)).data;
    }
    // #19499
    async SetScanBoardDataTo2500(addr, portIndex, scanIndex, data, length) {
        if (data.length !== length)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, false, 'SetScanBoardDataTo2500');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portIndex;
        req.rcvIndex = scanIndex;
        req.address = AddressMapping_1.default.SDKNewReadOrWriteAddr;
        await this.connection.send(req);
    }
    // #19508
    async ReadScanBoardDataTo2500(addr, portAddr, scanBoardAddr, length) {
        const req = new codec_1.Request(length, 'ReadScanBoardDataTo2500');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SDKNewReadOrWriteAddr;
        return (await this.connection.send(req)).data;
    }
    // #19517
    async ReadABCDESignalDelay(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ABCDESignalDelayOccupancy, 'ReadABCDESignalDelay');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ABCDESignalDelayAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19555
    async SetABCDESignalDelay(addr, portAddr, scanBoardAddr, bBroadcast, ABCDESignalDelay) {
        const req = new codec_1.Request([ABCDESignalDelay], bBroadcast, 'SetABCDESignalDelay');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ABCDESignalDelayAddr;
        await this.connection.send(req);
    }
    // #19565
    async ReadScannerColorSupportInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerColorSupportInfoOccupancy, 'ReadScannerColorSupportInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerColorSupportInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19585
    async SetScannerRGBColor(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetScannerRGBColor');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerRGBColorAddr;
        await this.connection.send(req);
    }
    // #19810
    async ReadScannerGrayScaleCoef(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerGrayScaleBlueCoefOccupancy, 'ReadScannerGrayScaleCoef');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner_GrayScaleRedCoefAddr;
        return (await this.connection.send(req)).data;
    }
    // #19838
    async SetMagnitudes(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetMagnitudes');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MagnitudesAddr;
        await this.connection.send(req);
    }
    // #19847
    async ReadMagnitudes(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.MagnitudesAddrOccupancy, 'ReadMagnitudes');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MagnitudesAddr;
        return (await this.connection.send(req)).data;
    }
    // #19856
    async ReadScannerColorInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerColorInfoOccupancy, 'ReadScannerColorInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerColorInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19876
    async SetScannerColorInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetScannerColorInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerColorInfoAddr;
        await this.connection.send(req);
    }
    // #19885
    async SetColorAdjustMatrixType(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetColorAdjustMatrixType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustMatrixTypeAddr;
        await this.connection.send(req);
    }
    // #19894
    async ReadColorAdjustMatrixType(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerColorInfoOccupancy, 'ReadColorAdjustMatrixType');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorAdjustMatrixTypeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #19903
    async ReadColorManageCoefData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ColorManageInfoAddrOccupancy, 'ReadColorManageCoefData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorManageInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #19923
    async SetScanner_ColorManageCoefData(addr, portAddr, scanBoardAddr, bBroadcast, colorRestore) {
        const req = new codec_1.Request(colorRestore, bBroadcast, 'SetScanner_ColorManageCoefData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ColorManageInfoAddr;
        await this.connection.send(req);
    }
    // #19932
    async ReadMGCoefData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(256, 'ReadMGCoefData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MagicGrayLutAddr;
        return (await this.connection.send(req)).data;
    }
    // #19996
    async ReadMGParmData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.MGParmccupancy, 'ReadMGParmData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MGParmAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20016
    async SetScanner_MGParmData(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request(data, bBroadcast, 'SetScanner_MGParmData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MGParmAddr;
        await this.connection.send(req);
    }
    // #20025
    async ReadMGEnParmData(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.MGEnParmccupancy, 'ReadMGEnParmData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MGEnParmAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20045
    async SetScanner_MGEnParmData(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetScanner_MGEnParmData');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MGEnParmAddr;
        await this.connection.send(req);
    }
    // #20054
    async ReadScanner18BitEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Scanner18BitEnableOccupancy, 'ReadScanner18BitEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner18BitEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20077
    async SetScanner18BitEnable(addr, portAddr, scanBoardAddr, bBroadcast, enable) {
        const req = new codec_1.Request(enable ? [5] : [0], bBroadcast, 'SetScanner18BitEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner18BitEnableAddr;
        await this.connection.send(req);
    }
    // #20095
    async SetScannerxBitEnable(addr, portAddr, scanBoardAddr, bBroadcast, da) {
        const req = new codec_1.Request([da], bBroadcast, 'SetScannerxBitEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.Scanner22bitEnableAddr;
        await this.connection.send(req);
    }
    // #20105
    async SetScannerxBit1d8(addr, portAddr, scanBoardAddr, bBroadcast, da) {
        const req = new codec_1.Request(da, bBroadcast, 'SetScannerxBit1d8');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerxbitTwinkleOptiAddr;
        await this.connection.send(req);
    }
    // #20114
    async SetScannerxBit1d9(addr, portAddr, scanBoardAddr, bBroadcast, da) {
        const req = new codec_1.Request(da, bBroadcast, 'SetScannerxBit1d9');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerxbitOptiAddr;
        await this.connection.send(req);
    }
    // #20123
    async ReadClearViewInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerClearViewOccupancy, 'ReadClearViewInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerClearViewAddr;
        return (await this.connection.send(req)).data;
    }
    // #20185
    async ReadClearViewEnableInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerClearViewEnable, 'ReadClearViewEnableInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerClearViewAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20208
    async SetClearViewEnableInfo(addr, portAddr, scanBoardAddr, bBroadcast, enable) {
        const req = new codec_1.Request(enable ? [5] : [0], bBroadcast, 'SetClearViewEnableInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerClearViewAddr;
        await this.connection.send(req);
    }
    // #20226
    async Set2038SDelayTime(addr, portAddr, scanBoardAddr, bBroadcast, delayTime) {
        const $data = (0, codec_1.encodeUIntLE)(delayTime, AddressMapping_1.default.DelayTimeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Set2038SDelayTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DelayTimeAddr;
        await this.connection.send(req);
    }
    // #20236
    async Read2038SDelayTime(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DelayTimeOccupancy, 'Read2038SDelayTime');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.DelayTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20256
    async SetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, bBroadcast, customGammaConfigInfo) {
        const $data = (0, codec_1.encodeUIntLE)(customGammaConfigInfo, AddressMapping_1.default.GammaConfigInfoOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetCustomGammaConfigInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CustomGammaConfigInfoAddr;
        await this.connection.send(req);
    }
    // #20266
    async ReadCustomGammaConfigInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DelayTimeOccupancy, 'ReadCustomGammaConfigInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CustomGammaConfigInfoAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20275
    async WriteScannerDoubleLock(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== 1)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteScannerDoubleLock');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerDoubleLockAddr;
        await this.connection.send(req);
    }
    // #20284
    async ReadScannerDoubleLock(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DoubleLockPointOccupancy, 'ReadScannerDoubleLock');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerDoubleLockAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20304
    async ReadScannerLowDelayEnable(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScannerLowDelayEnableOccupancy, 'ReadScannerLowDelayEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerLowDelayEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20331
    async SetScannerLowDelayEnable(addr, portAddr, scanBoardAddr, bBroadcast, lowDelayEnable) {
        const req = new codec_1.Request(lowDelayEnable ? [85] : [0], bBroadcast, 'SetScannerLowDelayEnable');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScannerLowDelayEnableAddr;
        await this.connection.send(req);
    }
    // #20349
    async ReadSenderLowDelayEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.LowDelayOccupancy, 'ReadSenderLowDelayEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.LowDelayAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20376
    async SetSenderLowDelayEnable(addr, bBroadcast, enableLowDelay) {
        const req = new codec_1.Request(enableLowDelay ? [120] : [0], bBroadcast, 'SetSenderLowDelayEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.LowDelayAddr;
        await this.connection.send(req);
    }
    // #20394
    async FuncCard_ReadCompanyID(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_CompanyIDOccupancy, 'FuncCard_ReadCompanyID');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_CompanyIDAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20403
    async FuncCard_ReadCompanyID_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_CompanyIDOccupancy, 'FuncCard_ReadCompanyID_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_CompanyIDAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20423
    async FuncCard_ReadFuncCardModle(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ModleOccupancy, 'FuncCard_ReadFuncCardModle');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_ModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20432
    async FuncCard_ReadFuncCardModle_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ModleOccupancy, 'FuncCard_ReadFuncCardModle_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_ModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20452
    async FuncCard_ReadGoldenFPGAVersion(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_GoldenFPGAVersionOccupancy, 'FuncCard_ReadGoldenFPGAVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_GoldenFPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20461
    async FuncCard_ReadGoldenFPGAVersion_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_GoldenFPGAVersionOccupancy, 'FuncCard_ReadGoldenFPGAVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_GoldenFPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20481
    async FuncCard_ReadIsMonitorCardExist(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_IsMonitorCardExistOccupancy, 'FuncCard_ReadIsMonitorCardExist');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_IsMonitorCardExistAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20490
    async FuncCard_ReadIsMonitorCardExist_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_IsMonitorCardExistOccupancy, 'FuncCard_ReadIsMonitorCardExist_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_IsMonitorCardExistAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20522
    async FuncCard_ReadMonitorCardModle(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardModleOccupancy, 'FuncCard_ReadMonitorCardModle');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20531
    async FuncCard_ReadMonitorCardModle_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardModleOccupancy, 'FuncCard_ReadMonitorCardModle_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20551
    async FuncCard_ReadMonitorFPGAVersion(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorFPGAVersionOccupancy, 'FuncCard_ReadMonitorFPGAVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MonitorFPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20560
    async FuncCard_ReadMonitorFPGAVersion_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorFPGAVersionOccupancy, 'FuncCard_ReadMonitorFPGAVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MonitorFPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20580
    async FuncCard_ReadFuncCardFPGALength(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGALengthOccupancy, 'FuncCard_ReadFuncCardFPGALength');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20589
    async FuncCard_ReadFuncCardFPGALength_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGALengthOccupancy, 'FuncCard_ReadFuncCardFPGALength_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20609
    async FuncCard_SetFuncCardFPGALength(addr, bBroadcast, fpgaLength) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaLength, AddressMapping_1.default.FuncCard_FPGALengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardFPGALength');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr;
        await this.connection.send(req);
    }
    // #20619
    async FuncCard_SetFuncCardFPGALength_1(addr, portAddr, funcCardAddr, bBroadcast, fpgaLength) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaLength, AddressMapping_1.default.FuncCard_FPGALengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardFPGALength_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr;
        await this.connection.send(req);
    }
    // #20629
    async FuncCard_ReadFuncCardFPGAVersion(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGAVersionOccupancy, 'FuncCard_ReadFuncCardFPGAVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20638
    async FuncCard_ReadFuncCardFPGAVersion_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGAVersionOccupancy, 'FuncCard_ReadFuncCardFPGAVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20658
    async FuncCard_SetFuncCardFPGAVersion(addr, bBroadcast, fpgaVersion) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaVersion, AddressMapping_1.default.FuncCard_FPGAVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardFPGAVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGAVersionAddr;
        await this.connection.send(req);
    }
    // #20668
    async FuncCard_SetFuncCardFPGAVersion_1(addr, portAddr, funcCardAddr, bBroadcast, fpgaVersion) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaVersion, AddressMapping_1.default.FuncCard_FPGAVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardFPGAVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGAVersionAddr;
        await this.connection.send(req);
    }
    // #20678
    async FuncCard_ReadFuncCardFPGADescription(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGADescriptionnOccupancy, 'FuncCard_ReadFuncCardFPGADescription');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGADescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #20687
    async FuncCard_ReadFuncCardFPGADescription_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FPGADescriptionnOccupancy, 'FuncCard_ReadFuncCardFPGADescription_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGADescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #20709
    async FuncCard_SetFuncCardFPGADescription(addr, bBroadcast, funcCard_FPGADescription) {
        if (funcCard_FPGADescription.length !== AddressMapping_1.default.FuncCard_FPGADescriptionnOccupancy)
            throw new TypeError(`Invalid buffer size: ${funcCard_FPGADescription.length}`);
        const req = new codec_1.Request(funcCard_FPGADescription, bBroadcast, 'FuncCard_SetFuncCardFPGADescription');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FPGADescriptionAddr;
        await this.connection.send(req);
    }
    // #20718
    async FuncCard_SetFuncCardFPGADescription_1(addr, portAddr, funcCardAddr, bBroadcast, funcCard_FPGADescription) {
        if (funcCard_FPGADescription.length !== AddressMapping_1.default.FuncCard_FPGADescriptionnOccupancy)
            throw new TypeError(`Invalid buffer size: ${funcCard_FPGADescription.length}`);
        const req = new codec_1.Request(funcCard_FPGADescription, bBroadcast, 'FuncCard_SetFuncCardFPGADescription_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGADescriptionAddr;
        await this.connection.send(req);
    }
    // #20774
    async FuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset) {
        const req = new codec_1.Request(data, bBroadcast, 'FuncCard_SetFPGAData');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FPGALengthAddr + offset;
        await this.connection.send(req);
    }
    // #20783
    async FuncCard_ReadFuncCardMCULength(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUProgramLengthOccupancy, 'FuncCard_ReadFuncCardMCULength');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20792
    async FuncCard_ReadFuncCardMCULength_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUProgramLengthOccupancy, 'FuncCard_ReadFuncCardMCULength_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20812
    async FuncCard_SetFuncCardMCULength(addr, bBroadcast, mcuLength) {
        const $data = (0, codec_1.encodeUIntLE)(mcuLength, AddressMapping_1.default.FuncCard_MCUProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardMCULength');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUProgramLengthAddr;
        await this.connection.send(req);
    }
    // #20822
    async FuncCard_SetFuncCardMCULength_1(addr, portAddr, funcCardAddr, bBroadcast, mcuLength) {
        const $data = (0, codec_1.encodeUIntLE)(mcuLength, AddressMapping_1.default.FuncCard_MCUProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardMCULength_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUProgramLengthAddr;
        await this.connection.send(req);
    }
    // #20832
    async FuncCard_ReadFuncCardMCUVersion(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUVersionOccupancy, 'FuncCard_ReadFuncCardMCUVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20841
    async FuncCard_ReadFuncCardMCUVersion_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUVersionOccupancy, 'FuncCard_ReadFuncCardMCUVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #20861
    async FuncCard_SetFuncCardMCUVersion(addr, bBroadcast, mcuVersion) {
        const $data = (0, codec_1.encodeUIntLE)(mcuVersion, AddressMapping_1.default.FuncCard_MCUVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardMCUVersion');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUVersionAddr;
        await this.connection.send(req);
    }
    // #20871
    async FuncCard_SetFuncCardMCUVersion_1(addr, portAddr, funcCardAddr, bBroadcast, mcuVersion) {
        const $data = (0, codec_1.encodeUIntLE)(mcuVersion, AddressMapping_1.default.FuncCard_MCUVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetFuncCardMCUVersion_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUVersionAddr;
        await this.connection.send(req);
    }
    // #20881
    async FuncCard_ReadFuncCardMCUDescription(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUDescriptionOccupancy, 'FuncCard_ReadFuncCardMCUDescription');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUDescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #20890
    async FuncCard_ReadFuncCardMCUDescription_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MCUDescriptionOccupancy, 'FuncCard_ReadFuncCardMCUDescription_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUDescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #20912
    async FuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription) {
        if (funcCard_MCUDescription.length !== AddressMapping_1.default.FuncCard_MCUDescriptionOccupancy)
            throw new TypeError(`Invalid buffer size: ${funcCard_MCUDescription.length}`);
        const req = new codec_1.Request(funcCard_MCUDescription, bBroadcast, 'FuncCard_SetFuncCardMCUDescription');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MCUDescriptionAddr;
        await this.connection.send(req);
    }
    // #20921
    async FuncCard_SetFuncCardMCUDescription_1(addr, portAddr, funcCardAddr, bBroadcast, mcuDescription) {
        if (mcuDescription.length !== AddressMapping_1.default.FuncCard_MCUDescriptionOccupancy)
            throw new TypeError(`Invalid buffer size: ${mcuDescription.length}`);
        const req = new codec_1.Request(mcuDescription, bBroadcast, 'FuncCard_SetFuncCardMCUDescription_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MCUDescriptionAddr;
        await this.connection.send(req);
    }
    // #20977
    async FuncCard_SetRebootBootFpgaProgram(addr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_RebootBootFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetRebootBootFpgaProgram');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_RebootBootFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #20987
    async FuncCard_SetRebootBootFpgaProgram_1(addr, portAddr, funcCardAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_RebootBootFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetRebootBootFpgaProgram_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_RebootBootFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #20997
    async FuncCard_SetRebootAppFpgaProgram(addr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_RebootAppFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetRebootAppFpgaProgram');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_RebootAppFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #21007
    async FuncCard_SetRebootAppFpgaProgram_1(addr, portAddr, funcCardAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_RebootAppFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetRebootAppFpgaProgram_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_RebootAppFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #21017
    async FuncCard_SetStoreFpgaBootProgram(addr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_StoreFpgaBootProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetStoreFpgaBootProgram');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_StoreFpgaBootProgramAddr;
        await this.connection.send(req);
    }
    // #21027
    async FuncCard_SetStoreFpgaBootProgram_1(addr, portAddr, funcCardAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_StoreFpgaBootProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetStoreFpgaBootProgram_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_StoreFpgaBootProgramAddr;
        await this.connection.send(req);
    }
    // #21037
    async FuncCard_SetStoreFpgaAppProgram(addr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_StoreFpgaAppProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetStoreFpgaAppProgram');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_StoreFpgaAppProgramAddr;
        await this.connection.send(req);
    }
    // #21047
    async FuncCard_SetStoreFpgaAppProgram_1(addr, portAddr, funcCardAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.FuncCard_StoreFpgaAppProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetStoreFpgaAppProgram_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_StoreFpgaAppProgramAddr;
        await this.connection.send(req);
    }
    // #21057
    async FuncCard_ReadTempInfoOfFuncCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TempInfoOfFuncCardOccupancy, 'FuncCard_ReadTempInfoOfFuncCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_TempInfoOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21066
    async FuncCard_ReadTempInfoOfFuncCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TempInfoOfFuncCardOccupancy, 'FuncCard_ReadTempInfoOfFuncCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_TempInfoOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21095
    async FuncCard_ReadHumiOfFuncCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_HumidityOfFuncCardOccupancy, 'FuncCard_ReadHumiOfFuncCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_HumidityOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21104
    async FuncCard_ReadHumiOfFuncCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_HumidityOfFuncCardOccupancy, 'FuncCard_ReadHumiOfFuncCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_HumidityOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21127
    async FuncCard_ReadVoltageOfFuncCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_VoltageOfFuncCardOccupancy, 'FuncCard_ReadVoltageOfFuncCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_VoltageOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21136
    async FuncCard_ReadVoltageOfFuncCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_VoltageOfFuncCardOccupancy, 'FuncCard_ReadVoltageOfFuncCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_VoltageOfFuncCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21159
    async FuncCard_ReadLinkStateOfMonitorCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_LinkStateOfMonitorCardOccupancy, 'FuncCard_ReadLinkStateOfMonitorCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_LinkStateOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21168
    async FuncCard_ReadLinkStateOfMonitorCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_LinkStateOfMonitorCardOccupancy, 'FuncCard_ReadLinkStateOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_LinkStateOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21193
    async FuncCard_ReadTempInfoOfMonitorCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TempInfoOfMonitorCardOccupancy, 'FuncCard_ReadTempInfoOfMonitorCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_TempInfoOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21202
    async FuncCard_ReadTempInfoOfMonitorCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TempInfoOfMonitorCardOccupancy, 'FuncCard_ReadTempInfoOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_TempInfoOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21231
    async FuncCard_ReadHumiOfMonitorCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_HumiOfMonitorCardOccupancy, 'FuncCard_ReadHumiOfMonitorCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_HumiOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21240
    async FuncCard_ReadHumiOfMonitorCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_HumiOfMonitorCardOccupancy, 'FuncCard_ReadHumiOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_HumiOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21263
    async FuncCard_ReadSmokeWarningOfMonitorCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_SmokeWarningOfMonitorCardOccupancy, 'FuncCard_ReadSmokeWarningOfMonitorCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_SmokeWarningOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21272
    async FuncCard_ReadSmokeWarningOfMonitorCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_SmokeWarningOfMonitorCardOccupancy, 'FuncCard_ReadSmokeWarningOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_SmokeWarningOfMonitorCardAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21304
    async FuncCard_ReadFanSpeedOfMonitorCard(addr, readCountOfFan, beginIdnexOfFan) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardOccupancy * readCountOfFan, 'FuncCard_ReadFanSpeedOfMonitorCard');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardAddr +
                AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardOccupancy * beginIdnexOfFan;
        return (await this.connection.send(req)).data;
    }
    // #21317
    async FuncCard_ReadFanSpeedOfMonitorCard_1(addr, portAddr, funcCardAddr, readCountOfFan, beginIdnexOfFan) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardOccupancy * readCountOfFan, 'FuncCard_ReadFanSpeedOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address =
            AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardAddr +
                AddressMapping_1.default.FuncCard_FanSpeedOfMonitorCardOccupancy * beginIdnexOfFan;
        return (await this.connection.send(req)).data;
    }
    // #21349
    async FuncCard_ReadVoltageOfMonitorCard(addr, readCountOfValtage, beginIdnexOfValtage) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_VoltageOfMonitorCardOccupancy * readCountOfValtage, 'FuncCard_ReadVoltageOfMonitorCard');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.FuncCard_VoltageOfMonitorCardAddr +
                AddressMapping_1.default.FuncCard_VoltageOfMonitorCardOccupancy * beginIdnexOfValtage;
        return (await this.connection.send(req)).data;
    }
    // #21362
    async FuncCard_ReadVoltageOfMonitorCard_1(addr, portAddr, funcCardAddr, readCountOfValtage, beginIdnexOfValtage) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_VoltageOfMonitorCardOccupancy * readCountOfValtage, 'FuncCard_ReadVoltageOfMonitorCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address =
            AddressMapping_1.default.FuncCard_VoltageOfMonitorCardAddr +
                AddressMapping_1.default.FuncCard_VoltageOfMonitorCardOccupancy * beginIdnexOfValtage;
        return (await this.connection.send(req)).data;
    }
    // #21394
    async FuncCard_ReadFuncCardAllStatus(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FuncCardAllStatusOccupancy, 'FuncCard_ReadFuncCardAllStatus');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_FuncCardAllStatusAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21403
    async FuncCard_ReadFuncCardAllStatus_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_FuncCardAllStatusOccupancy, 'FuncCard_ReadFuncCardAllStatus_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_FuncCardAllStatusAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21446
    async FuncCard_ReadMonitorCardAllInfo(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardAllInfoOccupancy, 'FuncCard_ReadMonitorCardAllInfo');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardAllInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #21455
    async FuncCard_ReadMonitorCardAllInfo_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardAllInfoOccupancy, 'FuncCard_ReadMonitorCardAllInfo_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardAllInfoAddr;
        return (await this.connection.send(req)).data;
    }
    // #21538
    async FuncCard_ReadMonitorCardAllStatus(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardAllStatusOccupancy, 'FuncCard_ReadMonitorCardAllStatus');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardAllStatusAddr;
        return (await this.connection.send(req)).data;
    }
    // #21547
    async FuncCard_ReadMonitorCardAllStatus_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_MonitorCardAllStatusOccupancy, 'FuncCard_ReadMonitorCardAllStatus_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_MonitorCardAllStatusAddr;
        return (await this.connection.send(req)).data;
    }
    // #21619
    async FuncCard_ReadTimeOnFuncCard(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TimeOnFuncCardOccupancy, 'FuncCard_ReadTimeOnFuncCard');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_TimeOnFuncCardAddr;
        return (await this.connection.send(req)).data;
    }
    // #21628
    async FuncCard_ReadTimeOnFuncCard_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_TimeOnFuncCardOccupancy, 'FuncCard_ReadTimeOnFuncCard_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_TimeOnFuncCardAddr;
        return (await this.connection.send(req)).data;
    }
    // #21676
    async FuncCard_ReadPowerPortCtrl(addr, powerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy, 'FuncCard_ReadPowerPortCtrl');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.FuncCard_PowerPortCtrlAddr +
                powerIndex * AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21685
    async FuncCard_ReadPowerPortCtrl_1(addr, portAddr, funcCardAddr, powerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy, 'FuncCard_ReadPowerPortCtrl_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address =
            AddressMapping_1.default.FuncCard_PowerPortCtrlAddr +
                powerIndex * AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21713
    async FuncCard_SetPowerPortCtrl(addr, bBroadcast, powerCtrlMode, powerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(powerCtrlMode, AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerPortCtrl');
        req.destination = addr;
        req.address =
            AddressMapping_1.default.FuncCard_PowerPortCtrlAddr +
                powerIndex * AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy;
        await this.connection.send(req);
    }
    // #21723
    async FuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, bBroadcast, powerCtrlMode, powerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(powerCtrlMode, AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerPortCtrl_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address =
            AddressMapping_1.default.FuncCard_PowerPortCtrlAddr +
                powerIndex * AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy;
        await this.connection.send(req);
    }
    // #21733
    async FuncCard_ReadAllPowerPortCtrl(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy * AddressMapping_1.default.FuncCard_PowerPortCtrlNum, 'FuncCard_ReadAllPowerPortCtrl');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlAddr;
        return (await this.connection.send(req)).data;
    }
    // #21742
    async FuncCard_ReadAllPowerPortCtrl_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlOccupancy * AddressMapping_1.default.FuncCard_PowerPortCtrlNum, 'FuncCard_ReadAllPowerPortCtrl_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlAddr;
        return (await this.connection.send(req)).data;
    }
    // #21794
    async FuncCard_ReadPowerOperTime(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_OperPowerOccupancy, 'FuncCard_ReadPowerOperTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerOperTimeAddr;
        return (await this.connection.send(req)).data;
    }
    // #21803
    async FuncCard_ReadPowerOperTime_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_OperPowerOccupancy, 'FuncCard_ReadPowerOperTime_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerOperTimeAddr;
        return (await this.connection.send(req)).data;
    }
    // #21866
    async FuncCard_ReadPowerCtrlMode(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerCtrlModeOccupancy, 'FuncCard_ReadPowerCtrlMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerCtrlModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21875
    async FuncCard_ReadPowerCtrlMode_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerCtrlModeOccupancy, 'FuncCard_ReadPowerCtrlMode_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerCtrlModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21903
    async FuncCard_SetPowerCtrlMode(addr, bBroadcast, powerCtrlMode) {
        const $data = (0, codec_1.encodeUIntLE)(powerCtrlMode, AddressMapping_1.default.FuncCard_PowerCtrlModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerCtrlMode');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerCtrlModeAddr;
        await this.connection.send(req);
    }
    // #21913
    async FuncCard_SetPowerCtrlMode_1(addr, portAddr, funcCardAddr, bBroadcast, powerCtrlMode) {
        const $data = (0, codec_1.encodeUIntLE)(powerCtrlMode, AddressMapping_1.default.FuncCard_PowerCtrlModeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerCtrlMode_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerCtrlModeAddr;
        await this.connection.send(req);
    }
    // #21923
    async FuncCard_ReadDelayTime(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_DelayTimeOccupancy, 'FuncCard_ReadDelayTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_DelayTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21932
    async FuncCard_ReadDelayTime_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_DelayTimeOccupancy, 'FuncCard_ReadDelayTime_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_DelayTimeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21952
    async FuncCard_SetDelayTime(addr, bBroadcast, delayTime) {
        const $data = (0, codec_1.encodeUIntLE)(delayTime, AddressMapping_1.default.FuncCard_DelayTimeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetDelayTime');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_DelayTimeAddr;
        await this.connection.send(req);
    }
    // #21962
    async FuncCard_SetDelayTime_1(addr, portAddr, funcCardAddr, bBroadcast, delayTime) {
        const $data = (0, codec_1.encodeUIntLE)(delayTime, AddressMapping_1.default.FuncCard_DelayTimeOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetDelayTime_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_DelayTimeAddr;
        await this.connection.send(req);
    }
    // #21972
    async FuncCard_ReadPowerPortCtrlTotal(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlTotalOccupancy, 'FuncCard_ReadPowerPortCtrlTotal');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlTotalAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #21981
    async FuncCard_ReadPowerPortCtrlTotal_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_PowerPortCtrlTotalOccupancy, 'FuncCard_ReadPowerPortCtrlTotal_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlTotalAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22009
    async FuncCard_SetPowerPortCtrlTotal(addr, bBroadcast, operType) {
        const $data = (0, codec_1.encodeUIntLE)(operType, AddressMapping_1.default.FuncCard_PowerPortCtrlTotalOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerPortCtrlTotal');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlTotalAddr;
        await this.connection.send(req);
    }
    // #22019
    async FuncCard_SetPowerPortCtrlTotal_1(addr, portAddr, funcCardAddr, bBroadcast, operType) {
        const $data = (0, codec_1.encodeUIntLE)(operType, AddressMapping_1.default.FuncCard_PowerPortCtrlTotalOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetPowerPortCtrlTotal_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_PowerPortCtrlTotalAddr;
        await this.connection.send(req);
    }
    // #22029
    async FuncCard_ReadOutDeviceValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ReadOutDeviceOccupancy, 'FuncCard_ReadOutDeviceValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22038
    async FuncCard_ReadOutDeviceValue_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ReadOutDeviceOccupancy, 'FuncCard_ReadOutDeviceValue_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22047
    async FuncCard_ReadOutDeviceValue_2(addr, dataLength) {
        const req = new codec_1.Request(dataLength, 'FuncCard_ReadOutDeviceValue_2');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22056
    async FuncCard_ReadOutDeviceValue_3(addr, portAddr, funcCardAddr, dataLength) {
        const req = new codec_1.Request(dataLength, 'FuncCard_ReadOutDeviceValue_3');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22097
    async FuncCard_ReadOutTAndHumValue(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ReadTemAndHumOccupancy, 'FuncCard_ReadOutTAndHumValue');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22106
    async FuncCard_ReadOutTAndHumValue_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_ReadTemAndHumOccupancy, 'FuncCard_ReadOutTAndHumValue_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_ReadOutDeviceAddr;
        return (await this.connection.send(req)).data;
    }
    // #22222
    async FuncCard_SetOutDevice_2(addr, bBroadcast, outDeviceAddr, baudType, otherDeviceProtocol) {
        const $data = makeOutDeviceBytes(outDeviceAddr, baudType, otherDeviceProtocol);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetOutDevice_2');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_WriteOutDeviceAddr;
        await this.connection.send(req);
    }
    // #22236
    async FuncCard_SetOutDevice_3(addr, portAddr, funcCardAddr, bBroadcast, outDeviceAddr, baudType, otherDeviceProtocol) {
        const $data = makeOutDeviceBytes(outDeviceAddr, baudType, otherDeviceProtocol);
        const req = new codec_1.Request($data, bBroadcast, 'FuncCard_SetOutDevice_3');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_WriteOutDeviceAddr;
        await this.connection.send(req);
    }
    // #22270
    async FuncCard_ReadAudioFrequency(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_AudioFrequencyOccupancy, 'FuncCard_ReadAudioFrequency');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_AudioFrequencyAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22279
    async FuncCard_ReadAudioFrequency_1(addr, portAddr, funcCardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.FuncCard_AudioFrequencyOccupancy, 'FuncCard_ReadAudioFrequency_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_AudioFrequencyAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22308
    async FuncCard_SetAudioFrequency(addr, bBroadcast, freMode) {
        const req = new codec_1.Request([freMode], bBroadcast, 'FuncCard_SetAudioFrequency');
        req.destination = addr;
        req.address = AddressMapping_1.default.FuncCard_AudioFrequencyAddr;
        await this.connection.send(req);
    }
    // #22319
    async FuncCard_SetAudioFrequency_1(addr, portAddr, funcCardAddr, bBroadcast, freMode) {
        const req = new codec_1.Request([freMode], bBroadcast, 'FuncCard_SetAudioFrequency_1');
        req.destination = addr;
        req.deviceType = 2;
        req.port = portAddr;
        req.rcvIndex = funcCardAddr;
        req.address = AddressMapping_1.default.FuncCard_AudioFrequencyAddr;
        await this.connection.send(req);
    }
    // #22330
    async ReadVirtualFrameRate(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualFrameRateOccupancy, 'ReadVirtualFrameRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualFrameRateAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22350
    async SetVirtualFrameRate(addr, bBroadcast, virtualFrameRate) {
        const $data = (0, codec_1.encodeUIntLE)(virtualFrameRate, AddressMapping_1.default.VirtualFrameRateOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualFrameRate');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualFrameRateAddr;
        await this.connection.send(req);
    }
    // #22360
    async ReadVirtualCaptureEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualCaptureEnableOccupancy, 'ReadVirtualCaptureEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualCaptureEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22388
    async SetVirtualCaptureEnable(addr, bBroadcast, virtualCaptureEnable) {
        const $data = (0, codec_1.encodeUIntLE)(virtualCaptureEnable ? 5 : 0, AddressMapping_1.default.VirtualCaptureEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualCaptureEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualCaptureEnableAddr;
        await this.connection.send(req);
    }
    // #22403
    async ReadVirtualImageDataSource(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualImageDataSourceOccupancy, 'ReadVirtualImageDataSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualImageDataSourceAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22423
    async SetVirtualImageDataSource(addr, bBroadcast, virtuaImageDataSource) {
        const $data = (0, codec_1.encodeUIntLE)(virtuaImageDataSource, AddressMapping_1.default.VirtualImageDataSourceOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualImageDataSource');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualImageDataSourceAddr;
        await this.connection.send(req);
    }
    // #22433
    async ReadVirtualSendDataEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualSendEnableOccupancy, 'ReadVirtualSendDataEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualSendEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22461
    async SetVirtualSendEnable(addr, bBroadcast, virtualSendEnable) {
        const $data = (0, codec_1.encodeUIntLE)(virtualSendEnable ? 5 : 0, AddressMapping_1.default.VirtualSendEnableOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualSendEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualSendEnableAddr;
        await this.connection.send(req);
    }
    // #22476
    async ReadWindowBmpTimeoutSet(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.VirtualWindowBmpTimeoutSetOccupancy, 'ReadWindowBmpTimeoutSet');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualWindowBmpTimeoutSetAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22496
    async SetVirtualWindowBmpTimeoutSet(addr, bBroadcast, virtuaWindowBmpTimeoutSet) {
        const $data = (0, codec_1.encodeUIntLE)(virtuaWindowBmpTimeoutSet, AddressMapping_1.default.VirtualWindowBmpTimeoutSetOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetVirtualWindowBmpTimeoutSet');
        req.destination = addr;
        req.address = AddressMapping_1.default.VirtualWindowBmpTimeoutSetAddr;
        await this.connection.send(req);
    }
    // #22506
    async ReadSender_DistributeEnable(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeEnableOccupancy, 'ReadSender_DistributeEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.DistributeEnableAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22529
    async SetSender_DistributeEnable(addr, bBroadcast, functionType) {
        const req = new codec_1.Request(functionType === ModulationModeType_1.ModulationModeTypeEnum.TwoToFour ||
            functionType === ModulationModeType_1.ModulationModeTypeEnum.OneToEight
            ? [137]
            : functionType === ModulationModeType_1.ModulationModeTypeEnum.NoDistributor
                ? [255]
                : [0], bBroadcast, 'SetSender_DistributeEnable');
        req.destination = addr;
        req.address = AddressMapping_1.default.DistributeEnableAddr;
        await this.connection.send(req);
    }
    // #22549
    async ReadSender_DistributePortSeting(addr) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributePortSetingAddrOccupancy, 'ReadSender_DistributePortSeting');
        req.destination = addr;
        req.address = AddressMapping_1.default.DistributePortSetingAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22571
    async SetSender_DistributePortSeting(addr, bBroadcast, dataValue) {
        if (dataValue.length !== AddressMapping_1.default.DistributePortSetingAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${dataValue.length}`);
        const req = new codec_1.Request(dataValue, bBroadcast, 'SetSender_DistributePortSeting');
        req.destination = addr;
        req.address = AddressMapping_1.default.DistributePortSetingAddr;
        await this.connection.send(req);
    }
    // #22580
    async ReadSaveDistributeParameters(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.SaveDistributeParameterOccupancy, 'ReadSaveDistributeParameters');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.SaveDistributeParameterAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22600
    async SetSaveDistributeParameters(addr, portAddr, distributeAddr, bBroadcast, saveSendCardsParameters) {
        const req = new codec_1.Request([saveSendCardsParameters], bBroadcast, 'SetSaveDistributeParameters');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.SaveDistributeParameterAddr;
        await this.connection.send(req);
    }
    // #22611
    async ReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeReturnFactoryOccupancy, 'ReadDistributeReturnFactoryValues');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.DistributeReturnFactoryValuesAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22631
    async SetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, bBroadcast, returnFactoryValues) {
        const $data = (0, codec_1.encodeUIntLE)(returnFactoryValues, AddressMapping_1.default.DistributeReturnFactoryOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDistributeReturnFactoryValues');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.DistributeReturnFactoryValuesAddr;
        await this.connection.send(req);
    }
    // #22642
    async Distribute_ReadCompanyID(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_CompanyIDOccupancy, 'Distribute_ReadCompanyID');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_CompanyIDAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22662
    async Distribute_ReadDistributeModle(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_ModleOccupancy, 'Distribute_ReadDistributeModle');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_ModleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22682
    async Distribute_ReadGoldenFPGAVersion(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_GoldenFPGAVersionOccupancy, 'Distribute_ReadGoldenFPGAVersion');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_GoldenFPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22702
    async Distribute_ReadDistributeFPGALength(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_FPGALengthOccupancy, 'Distribute_ReadDistributeFPGALength');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_FPGALengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22722
    async Distribute_SetDistributeFPGALength(addr, portAddr, distributAddr, bBroadcast, fpgaLength) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaLength, AddressMapping_1.default.Distribute_FPGALengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetDistributeFPGALength');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributAddr;
        req.address = AddressMapping_1.default.Distribute_FPGALengthAddr;
        await this.connection.send(req);
    }
    // #22732
    async Distribute_ReadFuncCardFPGAVersion(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_FPGAVersionOccupancy, 'Distribute_ReadFuncCardFPGAVersion');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_FPGAVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22752
    async Distribute_SetFuncCardFPGAVersion(addr, portAddr, distributeAddr, bBroadcast, fpgaVersion) {
        const $data = (0, codec_1.encodeUIntLE)(fpgaVersion, AddressMapping_1.default.Distribute_FPGAVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetFuncCardFPGAVersion');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_FPGAVersionAddr;
        await this.connection.send(req);
    }
    // #22762
    async Distribute_ReadDistributeFPGADescription(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_FPGADescriptionnOccupancy, 'Distribute_ReadDistributeFPGADescription');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_FPGADescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #22784
    async Distribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, bBroadcast, distribute_FPGADescription) {
        if (distribute_FPGADescription.length !== AddressMapping_1.default.Distribute_FPGADescriptionnOccupancy)
            throw new TypeError(`Invalid buffer size: ${distribute_FPGADescription.length}`);
        const req = new codec_1.Request(distribute_FPGADescription, bBroadcast, 'Distribute_SetFuncCardFPGADescription');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_FPGADescriptionAddr;
        await this.connection.send(req);
    }
    // #22822
    async Distribute_ReadDistributeMCULength(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_MCUProgramLengthOccupancy, 'Distribute_ReadDistributeMCULength');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUProgramLengthAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22842
    async Distribute_SetDistributeMCULength(addr, portAddr, distributeAddr, bBroadcast, mcuLength) {
        const $data = (0, codec_1.encodeUIntLE)(mcuLength, AddressMapping_1.default.Distribute_MCUProgramLengthOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetDistributeMCULength');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUProgramLengthAddr;
        await this.connection.send(req);
    }
    // #22852
    async Distribute_ReadDistributeMCUVersion(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_MCUVersionOccupancy, 'Distribute_ReadDistributeMCUVersion');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUVersionAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #22872
    async Distribute_SetDistributeMCUVersion(addr, portAddr, distributeAddr, bBroadcast, mcuVersion) {
        const $data = (0, codec_1.encodeUIntLE)(mcuVersion, AddressMapping_1.default.Distribute_MCUVersionOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetDistributeMCUVersion');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUVersionAddr;
        await this.connection.send(req);
    }
    // #22882
    async Distribute_ReadDistributeMCUDescription(addr, portAddr, distributeAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.Distribute_MCUDescriptionOccupancy, 'Distribute_ReadDistributeMCUDescription');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUDescriptionAddr;
        return (await this.connection.send(req)).data;
    }
    // #22904
    async Distribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, bBroadcast, mcuDescription) {
        if (mcuDescription.length !== AddressMapping_1.default.Distribute_MCUDescriptionOccupancy)
            throw new TypeError(`Invalid buffer size: ${mcuDescription.length}`);
        const req = new codec_1.Request(mcuDescription, bBroadcast, 'Distribute_SetDistributeMCUDescription');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_MCUDescriptionAddr;
        await this.connection.send(req);
    }
    // #22942
    async Distribute_SetRebootBootFpgaProgram(addr, portAddr, distributeAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.Distribute_RebootBootFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetRebootBootFpgaProgram');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_RebootBootFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #22952
    async Distribute_SetRebootAppFpgaProgram(addr, portAddr, distributeAddr, bBroadcast, distributeModle) {
        const $data = (0, codec_1.encodeUIntLE)(distributeModle, AddressMapping_1.default.Distribute_RebootAppFpgaProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetRebootAppFpgaProgram');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_RebootAppFpgaProgramAddr;
        await this.connection.send(req);
    }
    // #22962
    async Distribute_SetStoreFpgaBootProgram(addr, portAddr, distributeAddr, bBroadcast, funcCardModle) {
        const $data = (0, codec_1.encodeUIntLE)(funcCardModle, AddressMapping_1.default.Distribute_StoreFpgaBootProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetStoreFpgaBootProgram');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_StoreFpgaBootProgramAddr;
        await this.connection.send(req);
    }
    // #22972
    async Distribute_SetStoreFpgaAppProgram(addr, portAddr, distributeAddr, bBroadcast, distributeModle) {
        const $data = (0, codec_1.encodeUIntLE)(distributeModle, AddressMapping_1.default.Distribute_StoreFpgaAppProgramOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'Distribute_SetStoreFpgaAppProgram');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = AddressMapping_1.default.Distribute_StoreFpgaAppProgramAddr;
        await this.connection.send(req);
    }
    // #22982
    async ReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy, 'ReadDistributeEthernetPortScannerX');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXAddr +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23006
    async SetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(ethernetPortScannerX, AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDistributeEthernetPortScannerX');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXAddr +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy;
        await this.connection.send(req);
    }
    // #23016
    async ReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy, 'ReadDistributeEthernetPortScannerY');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerYAddr +
                AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23040
    async SetDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerY, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)(ethernetPortScannerY, AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDistributeEthernetPortScannerY');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerYAddr +
                AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex;
        await this.connection.send(req);
    }
    // #23050
    async ReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
            AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy, 'ReadDistributeEthernetPortScannerXY');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXAddr +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex;
        return (await this.connection.send(req)).data;
    }
    // #23077
    async SetDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
        const $data = (0, codec_1.encodeUIntLE)((ethernetPortScannerX << 16) + ethernetPortScannerY, AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
            AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDistributeEthernetPortScannerXY');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address =
            AddressMapping_1.default.DistributeEthernetPortOccupancy * portIndex +
                AddressMapping_1.default.DistributeEthernetPortScannerXAddr +
                (AddressMapping_1.default.DistributeEthernetPortScannerXOccupancy +
                    AddressMapping_1.default.DistributeEthernetPortScannerYOccupancy) *
                    scannerIndex;
        await this.connection.send(req);
    }
    // #23125
    async ReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
        const req = new codec_1.Request(AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy, 'ReadDistributeNumberOfCardOrScanBoardInPort');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = 0;
        if (portIndex > 3) {
            req.address =
                AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                    AddressMapping_1.default.DistributePortAddr +
                    portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
        }
        else {
            req.address =
                AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                    portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
        }
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23168
    async SetDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, bBroadcast, number, portIndex, cardType) {
        const $data = (0, codec_1.encodeUIntLE)(number, AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetDistributeNumberOfCardOrScanBoardInPort');
        req.destination = addr;
        req.deviceType = 3;
        req.port = portAddr;
        req.rcvIndex = distributeAddr;
        req.address = 0;
        if (portIndex > 3) {
            req.address =
                AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                    AddressMapping_1.default.DistributePortAddr +
                    portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
        }
        else {
            req.address =
                AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortAddr +
                    portIndex * AddressMapping_1.default.DistributeNumOfCardAndBoardInPortOccupancy +
                    cardType * AddressMapping_1.default.DistributeNumberOfCardOrBoardInPortOccupancy;
        }
        await this.connection.send(req);
    }
    // #23481
    async ReadGroupSwapInfo_1(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadGroupSwapInfo_1');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.GroupSwapInfoAndEnAddr;
        return (await this.connection.send(req)).data;
    }
    // #23538
    async ReadMonitorDataSwapInfo(addr, portAddr, scanBoardAddr, readLength) {
        const req = new codec_1.Request(readLength, 'ReadMonitorDataSwapInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.MonitorGroupSwapInfoAndEnAddr;
        return (await this.connection.send(req)).data;
    }
    // #23547
    async WriteFirstGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.FirstGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteFirstGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FirstGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23556
    async WriteSecondGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.SecondGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteSecondGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SecondGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23565
    async WriteThirdGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.ThirdGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteThirdGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ThirdGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23574
    async WriteFourthGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.FourthGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteFourthGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FourthGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23583
    async WriteFifthGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.FifthGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteFifthGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FifthGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23592
    async WriteSixthGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.SixthGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteSixthGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SixthGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23601
    async WriteSeventhGroupRegistorGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.SeventhGroupRegistorGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteSeventhGroupRegistorGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SeventhGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23610
    async WriteFirstGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.FirstGroupRegistorRGBGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteFirstGroupRegistorRGBGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FirstGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23619
    async WriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.SecondGroupRegistorRGBGainOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteSecGroupRegistorRGBGain');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.SecondGroupRegistorGainAddr;
        await this.connection.send(req);
    }
    // #23628
    async WriteRotateAngleInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.RotateAngleOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteRotateAngleInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RotateAngleAddr;
        await this.connection.send(req);
    }
    // #23650
    async ReadRotateAngle(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.RotateAngleOccupancy, 'ReadRotateAngle');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.RotateAngleAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23659
    async WriteCabinetInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.CabinetOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteCabinetInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CabinetAddr;
        await this.connection.send(req);
    }
    // #23679
    async ReadCabinetInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.CabinetOccupancy, 'ReadCabinetInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CabinetAddr;
        return (await this.connection.send(req)).data;
    }
    // #23688
    async WriteSaveCabinetInfo(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.FlashCabinetOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteSaveCabinetInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.FlashCabinetAddr;
        await this.connection.send(req);
    }
    // #23697
    async WriteBrightPriorityMode(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.BrightPriorityModeOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteBrightPriorityMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightPriorityModeAddr;
        await this.connection.send(req);
    }
    // #23719
    async ReadBrightnessModel(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.BrightnessModelOccupancy, 'ReadBrightnessModel');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightnessModelAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23739
    async SetBrightnessModel(addr, portAddr, scanBoardAddr, bBroadcast, brightnessmodel) {
        const $data = (0, codec_1.encodeUIntLE)(brightnessmodel, AddressMapping_1.default.BrightnessModelOccupancy);
        const req = new codec_1.Request($data, bBroadcast, 'SetBrightnessModel');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.BrightnessModelAddr;
        await this.connection.send(req);
    }
    // #23749
    async ReadStandbyMode(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.StandbyModeOccupancy, 'ReadStandbyMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StandbyModeAddr;
        return (0, codec_1.decodeUIntLE)(await this.connection.send(req));
    }
    // #23778
    async SetStandbyMode(addr, portAddr, scanBoardAddr, bBroadcast, standbyMode) {
        const req = new codec_1.Request([standbyMode], bBroadcast, 'SetStandbyMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.StandbyModeAddr;
        await this.connection.send(req);
    }
    // #23788
    async ReadScannerFunctionInfo(addr, portAddr, scanBoardAddr) {
        const req = new codec_1.Request(AddressMapping_1.default.ScanCardFunctionOccupancy, 'ReadScannerFunctionInfo');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.ScanCardFunctionAddr;
        return (await this.connection.send(req)).data;
    }
    // #23797
    async WriteLowCoef(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.CoefAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteLowCoef');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefLowAddr;
        await this.connection.send(req);
    }
    // #23806
    async WriteHighCoef(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        if (data.length !== AddressMapping_1.default.CoefAddrOccupancy)
            throw new TypeError(`Invalid buffer size: ${data.length}`);
        const req = new codec_1.Request(data, bBroadcast, 'WriteHighCoef');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.CoefHighAddr;
        await this.connection.send(req);
    }
    // #23815
    async SetXbitGammaMode(addr, portAddr, scanBoardAddr, bBroadcast, data) {
        const req = new codec_1.Request([data], bBroadcast, 'SetXbitGammaMode');
        req.destination = addr;
        req.deviceType = 1;
        req.port = portAddr;
        req.rcvIndex = scanBoardAddr;
        req.address = AddressMapping_1.default.XbitGammaModeAddr;
        await this.connection.send(req);
    }
}
exports.default = SessionAPI;
_SessionAPI_timeouts = new WeakMap();
//# sourceMappingURL=Session.js.map
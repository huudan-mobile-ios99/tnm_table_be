import * as t from 'io-ts';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip2053ExtendPropety}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:38979
 */
export declare const Chip2053ExtendPropety: t.IntersectionC<[t.TypeC<{
    EnhancedModeSwitch: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RColorAdjust: t.Type<number, number, unknown>;
    GColorAdjust: t.Type<number, number, unknown>;
    BColorAdjust: t.Type<number, number, unknown>;
    RVanishingStrength: t.Type<number, number, unknown>;
    GVanishingStrength: t.Type<number, number, unknown>;
    BVanishingStrength: t.Type<number, number, unknown>;
    RdeGhost: t.Type<boolean, boolean, unknown>;
    GdeGhost: t.Type<boolean, boolean, unknown>;
    BdeGhost: t.Type<boolean, boolean, unknown>;
    RBlackingEnhance: t.Type<boolean, boolean, unknown>;
    GBlackingEnhance: t.Type<boolean, boolean, unknown>;
    BBlackingEnhance: t.Type<boolean, boolean, unknown>;
    RHeadDarkLineOpt: t.Type<number, number, unknown>;
    GHeadDarkLineOpt: t.Type<number, number, unknown>;
    BHeadDarkLineOpt: t.Type<number, number, unknown>;
    RFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    GFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    BFirstLineSlantsDarkOptimization: t.Type<number, number, unknown>;
    RRemoveBadPointGain: t.Type<number, number, unknown>;
    GRemoveBadPointGain: t.Type<number, number, unknown>;
    BRemoveBadPointGain: t.Type<number, number, unknown>;
}>, t.PartialC<{
    EnhancedMode: t.Type<number, number, unknown>;
    RAberrationOptimize: t.Type<boolean, boolean, unknown>;
    GAberrationOptimize: t.Type<boolean, boolean, unknown>;
    BAberrationOptimize: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    RColorAdjustEn: t.Type<boolean, boolean, unknown>;
    GColorAdjustEn: t.Type<boolean, boolean, unknown>;
    BColorAdjustEn: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
    IsCustomMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFifth: t.Type<number, number, unknown>;
    GreenRegValueConfigFifth: t.Type<number, number, unknown>;
    BlueRegValueConfigFifth: t.Type<number, number, unknown>;
}>]>;
export interface Chip2053ExtendPropety extends t.TypeOf<typeof Chip2053ExtendPropety> {
}

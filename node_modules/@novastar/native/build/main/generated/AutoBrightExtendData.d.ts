import * as t from 'io-ts';
import { AutoBrightCalcTypeEnum } from './AutoBrightCalcType';
import { OpticalProbeFailureInfo } from './OpticalProbeFailureInfo';
import { SetBrightData } from './SetBrightData';
/**
 * @category Codecs
 * @desc Codec for interface {@link AutoBrightExtendData}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:58370
 */
export declare const AutoBrightExtendData: t.IntersectionC<[t.TypeC<{
    AutoBrightMappingList: t.ArrayC<t.PartialC<{
        EnvironmentBright: t.Type<number, number, unknown>;
        DisplayBright: t.Type<number, number, unknown>;
    }>>;
    UseLightSensorList: t.ArrayC<t.PartialC<{
        IsEable: t.Type<boolean, boolean, unknown>;
        CommPort: t.StringC;
        FirstSenderSN: t.StringC;
        SensorType: t.Type<import("./PeripheralsType").PeripheralsTypeEnum, "LightSensorOnSender" | "LightSensorOnFuncCardInPort" | "LightSensorOnComm", unknown>;
        SenderIndex: t.Type<number, number, unknown>;
        PortIndex: t.Type<number, number, unknown>;
        FuncCardIndex: t.Type<number, number, unknown>;
        SensorIndex: t.Type<number, number, unknown>;
    }>>;
}>, t.PartialC<{
    CalcType: t.Type<AutoBrightCalcTypeEnum, "AllAverage" | "NoMaxMinAver", unknown>;
    OpticalFailureInfo: t.PartialC<{
        IsEnable: t.Type<boolean, boolean, unknown>;
        BrightnessValue: t.Type<number, number, unknown>;
    }>;
    SetBrightData: t.IntersectionC<[t.TypeC<{
        PosNumber: t.Type<number, number, unknown>;
        SectionNumber: t.Type<number, number, unknown>;
        MaxLuxData: t.Type<number, number, unknown>;
        MinLuxData: t.Type<number, number, unknown>;
        MaxAdjustBright: t.Type<number, number, unknown>;
        MinAdjustBright: t.Type<number, number, unknown>;
        LightSensorDataList: t.ArrayC<t.IntersectionC<[t.TypeC<{
            POS_STORAGE_SPACE: t.Type<number, number, unknown>;
            LightSensorSite: t.Type<import("./EnLightSensorSite").EnLightSensorSiteEnum, "FunctionCard" | "SendCard" | "None", unknown>;
            FunctionCardPosSite: t.Type<number, number, unknown>;
            PortAddrPosSite: t.Type<number, number, unknown>;
            PosInFunctionCardAddr: t.Type<number, number, unknown>;
        }>, t.PartialC<{}>]>>;
    }>, t.PartialC<{
        IsHWAutoBright: t.Type<boolean, boolean, unknown>;
        IsConfigurationSetted: t.Type<boolean, boolean, unknown>;
        SelectAdjustMode: t.Type<import("./AdjustMode").AdjustModeEnum, "CommonMode" | "HighMode", unknown>;
    }>]>;
}>]>;
export interface AutoBrightExtendData extends t.TypeOf<typeof AutoBrightExtendData> {
    CalcType?: AutoBrightCalcTypeEnum;
    OpticalFailureInfo?: OpticalProbeFailureInfo;
    SetBrightData?: SetBrightData;
}

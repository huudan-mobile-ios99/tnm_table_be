import * as t from 'io-ts';
import { ChipSM16259ExtendProperty } from './ChipSM16259ExtendProperty';
export declare const ChipSM16259RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16259RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16259.decompiled.cs:432
 */
export declare const ChipSM16259RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        MultiplierGrade: t.Type<import("./MultiplierGrade").MultiplierGradeEnum, "OneGrade" | "TwoGrade" | "ThreeGrade" | "FourGrade" | "SevenGrade" | "EightGrade", unknown>;
        ScanTypeUshort: t.Type<number, number, unknown>;
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<import("./OpenTestVoltageGrade").OpenTestVoltageGradeEnum, "OneVoltageGrade" | "TwoVoltageGrade" | "ThreeVoltageGrade" | "FourVoltageGrade", unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        PWMModel: t.Type<import("./PWMModel").PWMModelEnum, "OneModel" | "TwoModel", unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshGrade: t.Type<import("./LowAshGrade").LowAshGradeEnum, "NotEffective" | "OneGrade" | "TwoGrade" | "ThreeGrade", unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16259ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16259RGBVExtendProperty">;
}>]>;
export interface ChipSM16259RGBVExtendProperty extends t.TypeOf<typeof ChipSM16259RGBVExtendProperty> {
    RedProperty?: ChipSM16259ExtendProperty;
    GreenProperty?: ChipSM16259ExtendProperty;
    BlueProperty?: ChipSM16259ExtendProperty;
    VRedProperty?: ChipSM16259ExtendProperty;
}

import * as t from 'io-ts';
export declare const ChipFM6047ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    OEWidth: t.Type<number, number, unknown>;
    OEDelay: t.Type<number, number, unknown>;
    Inflexion: t.Type<number, number, unknown>;
    HiddenMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    ErrCurrentGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6047ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6047.decompiled.cs:6202
 */
export declare const ChipFM6047ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    OEWidth: t.Type<number, number, unknown>;
    OEDelay: t.Type<number, number, unknown>;
    Inflexion: t.Type<number, number, unknown>;
    HiddenMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    OpenTestEnable: t.Type<boolean, boolean, unknown>;
    ErrCurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6047ExtendProperty">;
}>]>;
export interface ChipFM6047ExtendProperty extends t.TypeOf<typeof ChipFM6047ExtendProperty> {
}

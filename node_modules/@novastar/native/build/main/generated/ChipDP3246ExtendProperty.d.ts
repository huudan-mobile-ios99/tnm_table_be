import * as t from 'io-ts';
export declare const ChipDP3246ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    GammaSmoothingLevel: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
    ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3246ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3246.decompiled.cs:6475
 */
export declare const ChipDP3246ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    GammaSmoothingLevel: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
    ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
}>]>;
export interface ChipDP3246ExtendProperty extends t.TypeOf<typeof ChipDP3246ExtendProperty> {
}

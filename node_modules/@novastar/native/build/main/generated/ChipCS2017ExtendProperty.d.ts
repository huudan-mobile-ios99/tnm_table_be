import * as t from 'io-ts';
export declare const ChipCS2017ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstRegistor: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LineEliminationEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ResponseSpeed: t.Type<number, number, unknown>;
    WorkMode: t.Type<number, number, unknown>;
    SetCurrentPosition: t.Type<number, number, unknown>;
    InflectionCurrent: t.Type<number, number, unknown>;
    DMAWriteMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2017ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2017.decompiled.cs:78
 */
export declare const ChipCS2017ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    FirstRegistor: t.Type<number, number, unknown>;
}>, t.PartialC<{
    LineEliminationEnable: t.Type<boolean, boolean, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ResponseSpeed: t.Type<number, number, unknown>;
    WorkMode: t.Type<number, number, unknown>;
    SetCurrentPosition: t.Type<number, number, unknown>;
    InflectionCurrent: t.Type<number, number, unknown>;
    DMAWriteMode: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
}>]>;
export interface ChipCS2017ExtendProperty extends t.TypeOf<typeof ChipCS2017ExtendProperty> {
}

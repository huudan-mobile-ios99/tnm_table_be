import * as t from 'io-ts';
import { ChipRT5938SSExtendProperty } from './ChipRT5938SSExtendProperty';
import { PointDetectParameter } from './PointDetectParameter';
export declare const ChipRT5938SSRGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("./DetectPointType").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("./ThresholdType").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("./RegisterGroupType").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipRT5938SSRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipRT5938SS.decompiled.cs:6754
 */
export declare const ChipRT5938SSRGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        EliminationLevel: t.Type<number, number, unknown>;
        EliminateEnable: t.Type<boolean, boolean, unknown>;
        OpenCircuitLevel: t.Type<number, number, unknown>;
        ShortCircuitLevel: t.Type<number, number, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5938SSExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("./DetectPointType").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("./ThresholdType").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("./RegisterGroupType").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5938SSRGBVExtendProperty">;
}>]>;
export interface ChipRT5938SSRGBVExtendProperty extends t.TypeOf<typeof ChipRT5938SSRGBVExtendProperty> {
    RedProperty?: ChipRT5938SSExtendProperty;
    GreenProperty?: ChipRT5938SSExtendProperty;
    BlueProperty?: ChipRT5938SSExtendProperty;
    VRedProperty?: ChipRT5938SSExtendProperty;
    PointDetectParameter?: PointDetectParameter;
}

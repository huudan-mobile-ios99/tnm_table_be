import * as t from 'io-ts';
export declare const Numeric: t.Type<number, number, unknown>;
export declare const Bool: t.Type<boolean, boolean, unknown>;
export declare const UInt8: t.Type<number, number, unknown>;
export declare const Int8: t.Type<number, number, unknown>;
export declare const UInt16: t.Type<number, number, unknown>;
export declare const Int16: t.Type<number, number, unknown>;
export declare const UInt32: t.Type<number, number, unknown>;
export declare const Int32: t.Type<number, number, unknown>;
export declare const UInt64: t.Type<bigint, bigint, unknown>;
export declare function withDefault<C extends t.Mixed>(codec: C, defaultValue: t.TypeOf<C> | t.OutputOf<C>): C;
export declare class BufferFromBase64 extends t.Type<Uint8Array, string> {
    constructor(name: string, length?: number, strict?: boolean);
}
export declare const Base64: BufferFromBase64;
export type Base64 = t.TypeOf<typeof Base64>;

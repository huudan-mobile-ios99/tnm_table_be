import * as t from 'io-ts';
import { ChipSM16380ExtendProperty } from './ChipSM16380ExtendProperty';
export declare const ChipSM16380RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    MutiRate: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16380RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16380.decompiled.cs:1196
 */
export declare const ChipSM16380RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    GreenExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    BlueExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    VRedExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationEnable: t.Type<boolean, boolean, unknown>;
        FirstLineDarkCompensationLevel: t.Type<number, number, unknown>;
        LowGrayCompsention: t.Type<number, number, unknown>;
        CrossEliminationLevel: t.Type<number, number, unknown>;
        GrayScaleUniformity: t.Type<number, number, unknown>;
        CouplingOptimization: t.Type<number, number, unknown>;
        EnergySavingMode: t.Type<number, number, unknown>;
        EnergySavingEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16380ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    MutiRate: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    CurrentGainGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16380RGBVExtendProperty">;
}>]>;
export interface ChipSM16380RGBVExtendProperty extends t.TypeOf<typeof ChipSM16380RGBVExtendProperty> {
    RedExtendProperty?: ChipSM16380ExtendProperty;
    GreenExtendProperty?: ChipSM16380ExtendProperty;
    BlueExtendProperty?: ChipSM16380ExtendProperty;
    VRedExtendProperty?: ChipSM16380ExtendProperty;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { LowAshGrade } from './LowAshGrade';
import { MultiplierGrade } from './MultiplierGrade';
import { OpenTestVoltageGrade } from './OpenTestVoltageGrade';
import { PWMModel } from './PWMModel';
export const ChipSM16259ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsShadowsEnable: common.Bool_true,
        MultiplierGrade: common.withDefault(MultiplierGrade, 'EightGrade'),
        ScanTypeUshort: common.UInt8_32,
        LowAshCompensationTwo: common.UInt8_0,
        Gain: common.withDefault(common.UInt8, 57),
        RegValueConfigFirst: common.UInt16_65337,
        LowAshCompensationOne: common.UInt8_0,
        IsOpenTest: common.Bool_false,
        OpenTestVoltageGrade: common.withDefault(OpenTestVoltageGrade, 'OneVoltageGrade'),
        BlankingMode: common.UInt8_2,
        RegValueConfigSecond: common.UInt16_11,
        IsEnergySaving: common.Bool_false,
        ShadowVoltageOne: common.UInt8_0,
        ShadowVoltageTwo: common.UInt8_0,
        PWMModel: common.withDefault(PWMModel, 'OneModel'),
        RegValueConfigThird: common.UInt16_3072,
        RegValueConfigForth: common.UInt16_0,
    }),
    t.partial({
        LowAshGrade,
    }),
], 'ChipSM16259ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16259ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16259.decompiled.cs:110
 */
export const ChipSM16259ExtendProperty = t.intersection([
    ChipSM16259ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSM16259ExtendProperty') }),
], 'ChipSM16259ExtendProperty');
//# sourceMappingURL=ChipSM16259ExtendProperty.js.map
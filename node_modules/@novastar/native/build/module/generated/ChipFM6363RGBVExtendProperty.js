import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipFM6363ExtendProperty } from './ChipFM6363ExtendProperty';
export const ChipFM6363RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipFM6363ExtendProperty,
        GreenProperty: ChipFM6363ExtendProperty,
        BlueProperty: ChipFM6363ExtendProperty,
        VRedProperty: ChipFM6363ExtendProperty,
        ScanCount: common.UInt8,
        LowAshPitsImprove: common.UInt8,
        IsAberrationOptimize: common.Bool,
        IsCouplingOptimize: common.Bool,
        IsStarSwipPoint: common.Bool,
        IsAdvancedModel: common.Bool,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
        FifthDataLen: common.Int32,
        FifthStartIndex: common.Int32,
        FifthRegisterAddr: common.Int32,
    }),
], 'ChipFM6363RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6363RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6363.decompiled.cs:1032
 */
export const ChipFM6363RGBVExtendProperty = t.intersection([
    ChipFM6363RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6363RGBVExtendProperty') }),
], 'ChipFM6363RGBVExtendProperty');
//# sourceMappingURL=ChipFM6363RGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { FirstLineCompensationType, } from './FirstLineCompensationType';
export const Chip5152ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        IsAdvancedMode: common.Bool,
        RedRegValueConfigFirst: common.UInt16,
        GreenRegValueConfigFirst: common.UInt16,
        BlueRegValueConfigFirst: common.UInt16,
        VRedRegValueConfigFirst: common.UInt16,
        RedRegValueConfigSecond: common.UInt16,
        GreenRegValueConfigSecond: common.UInt16,
        BlueRegValueConfigSecond: common.UInt16,
        VRedRegValueConfigSecond: common.UInt16,
        LowGrayCompensate1En: common.Bool,
        LowGrayCompensate2En: common.Bool,
        FirstLineCompensation: FirstLineCompensationType,
        EliminationGhost: common.UInt8,
    }),
], 'Chip5152ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link Chip5152ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:28116
 */
export const Chip5152ExtendProperty = t.intersection([Chip5152ExtendPropertyBase, t.partial({ '@_xsi:type': t.literal('Chip5152ExtendProperty') })], 'Chip5152ExtendProperty');
//# sourceMappingURL=Chip5152ExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ScanType } from './ScanType';
export const ChipICND2055ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        ScanType: common.withDefault(ScanType, 'Scan_32'),
        RefreshTheNumberOfClusters: common.UInt8_31,
        SubFields: common.UInt8_4,
        ShadowEliminationLevel: common.UInt8_29,
        ShadowEliminationTime: common.UInt8_1,
        LowAshUniformity: common.UInt8_2,
        TheFirstSweepDarkCompensation: common.UInt8_8,
        TheFirstLineSlantsDarkCompensationTime: common.UInt8_4,
        CouplingToAdjust: common.UInt8_8,
        CrossCouplingToAdjust: common.UInt8_1,
        SlowlyOpening: common.UInt8_1,
        Gain: common.UInt16_185,
        GclkFreqP: common.UInt8_12,
        GclkFreqM: common.UInt8_3,
        GclkFreqN: common.UInt8_2,
        Group_Num: common.UInt8_32,
        GclkNum: common.UInt16_128,
        RegValue: common.XMLArray(common.UInt16, 'ushort'),
        FirstRegValue: common.UInt16_85,
        SecondRegValue: common.UInt16_341,
        ThreeRegValue: common.UInt16_543,
        FourRegValue: common.UInt16_799,
        FiveRegValue: common.UInt16_1027,
        SixRegValue: common.UInt16_1292,
        SevenRegValue: common.UInt16_1538,
        EightRegValue: common.UInt16_1824,
        NineRegValue: common.UInt16_2080,
        TenRegValue: common.UInt16_2312,
        ElevenRegValue: common.UInt16_2568,
        TwelveRegValue: common.UInt16_2944,
        ThirteenRegValue: common.UInt16_3073,
        ForteenRegValue: common.UInt16_3329,
        FifteenRegValue: common.UInt16_3588,
        SixteenRegValue: common.UInt16_3841,
        SeveteenRegValue: common.UInt16_4226,
        EighteenRegValue: common.UInt16_4385,
        NineteenRegValue: common.UInt16_4609,
        TwentyRegValue: common.withDefault(common.UInt16, 4872),
        TwentyOneRegValue: common.UInt16_5120,
        TwentyTwoRegValue: common.UInt16_5376,
        TwentyThreeRegValue: common.UInt16_5632,
        TwentyFourRegValue: common.UInt16_6128,
        TwentyFiveRegValue: common.UInt16_6175,
        TwentySixRegValue: common.UInt16_6400,
        TwentySevenRegValue: common.UInt16_6687,
        TwentyEightRegValue: common.UInt16_6928,
        TwentyNineRegValue: common.UInt16_7376,
        ThirtyRegValue: common.UInt16_7434,
        ThirtyOneRegValue: common.UInt16_7746,
        ThirtyTwoRegValue: common.UInt16_7940,
        ThirtyThreeRegValue: common.UInt16_8200,
        ThirtyFourRegValue: common.UInt16_8449,
        ThirtyFiveRegValue: common.UInt16_8732,
        ThirtySixRegValue: common.UInt16_28672,
        ThirtySevenRegValue: common.UInt16_28928,
        ThirtyEightRegValue: common.UInt16_29184,
        ThirtyNineRegValue: common.UInt16_29440,
        FortyRegValue: common.UInt16_29696,
        FortyOneRegValue: common.UInt16_61440,
        FortyTwoRegValue: common.UInt16_61696,
        FortyThreeRegValue: common.UInt16_61952,
        FortyFourRegValue: common.UInt16_62208,
        FortyFiveRegValue: common.UInt16_62464,
        FortySixRegValue: common.UInt16_62720,
        FortySevenRegValue: common.UInt16_8960,
    }),
    t.partial({
        DisplayMode: common.UInt8,
        FineTuningTheFirstSweepDarkCompensationEnable: common.Bool,
        FineTuningTheFirstSweepDarkCompensation: common.UInt8,
        LowAshColorCompensation: common.UInt8,
        EnableCouplingToAdjust: common.Bool,
        CouplingEnhancedMode: common.Bool,
        CrossCouplingToAdjustN: common.UInt8,
        KneeVoltage: common.UInt8,
        DclkNumPerScanRegPart: common.Int32,
        EnergySavingMode: common.UInt8,
        EnableToRemoveBadPoints: common.Bool,
        IsAdvancedMode: common.Bool,
    }),
], 'ChipICND2055ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2055ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:33710
 */
export const ChipICND2055ExtendProperty = t.intersection([
    ChipICND2055ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2055ExtendProperty') }),
], 'ChipICND2055ExtendProperty');
//# sourceMappingURL=ChipICND2055ExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
export declare const ChipTLC6983ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegisterArray: common.BufferFromBase64;
    RegArrayUI: common.BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsPowerSavingMode1: t.Type<boolean, boolean, unknown>;
    PowerSavingMode2: t.Type<number, number, unknown>;
    IsBadPoints: t.Type<boolean, boolean, unknown>;
    RLowGrayGradientAdj: t.Type<number, number, unknown>;
    GLowGrayGradientAdj: t.Type<number, number, unknown>;
    BLowGrayGradientAdj: t.Type<number, number, unknown>;
    RLowGrayBrightCompensation: t.Type<number, number, unknown>;
    GLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BlackFieldRegulation: t.Type<number, number, unknown>;
    RCouplingParameterAdj1: t.Type<number, number, unknown>;
    GCouplingParameterAdj1: t.Type<number, number, unknown>;
    BCouplingParameterAdj1: t.Type<number, number, unknown>;
    RCouplingParameterAdj2: t.Type<number, number, unknown>;
    GCouplingParameterAdj2: t.Type<number, number, unknown>;
    BCouplingParameterAdj2: t.Type<number, number, unknown>;
    IsRCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsGCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsBCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    RLowAshColorCastCompensation: t.Type<number, number, unknown>;
    GLowAshColorCastCompensation: t.Type<number, number, unknown>;
    BLowAshColorCastCompensation: t.Type<number, number, unknown>;
    Is256FrameRateMode: t.Type<boolean, boolean, unknown>;
    RGain: t.Type<number, number, unknown>;
    GGain: t.Type<number, number, unknown>;
    BGain: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    ShortDetectionLevel: t.Type<number, number, unknown>;
    MaxCurrentValue: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RQuickTurnOff: t.Type<number, number, unknown>;
    GQuickTurnOff: t.Type<number, number, unknown>;
    BQuickTurnOff: t.Type<number, number, unknown>;
    FirstLineDarkAdj: t.Type<number, number, unknown>;
    IsCouplingParameterAdj3: t.Type<boolean, boolean, unknown>;
    CouplingParameterAdj4: t.Type<number, number, unknown>;
    IsCouplingParameterAdj4: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC6983ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipTLC6983.decompiled.cs:4332
 */
export declare const ChipTLC6983ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegisterArray: common.BufferFromBase64;
    RegArrayUI: common.BufferFromBase64;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsPowerSavingMode1: t.Type<boolean, boolean, unknown>;
    PowerSavingMode2: t.Type<number, number, unknown>;
    IsBadPoints: t.Type<boolean, boolean, unknown>;
    RLowGrayGradientAdj: t.Type<number, number, unknown>;
    GLowGrayGradientAdj: t.Type<number, number, unknown>;
    BLowGrayGradientAdj: t.Type<number, number, unknown>;
    RLowGrayBrightCompensation: t.Type<number, number, unknown>;
    GLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BLowGrayBrightCompensation: t.Type<number, number, unknown>;
    BlackFieldRegulation: t.Type<number, number, unknown>;
    RCouplingParameterAdj1: t.Type<number, number, unknown>;
    GCouplingParameterAdj1: t.Type<number, number, unknown>;
    BCouplingParameterAdj1: t.Type<number, number, unknown>;
    RCouplingParameterAdj2: t.Type<number, number, unknown>;
    GCouplingParameterAdj2: t.Type<number, number, unknown>;
    BCouplingParameterAdj2: t.Type<number, number, unknown>;
    IsRCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsGCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    IsBCouplingParameterAdj2: t.Type<boolean, boolean, unknown>;
    RLowAshColorCastCompensation: t.Type<number, number, unknown>;
    GLowAshColorCastCompensation: t.Type<number, number, unknown>;
    BLowAshColorCastCompensation: t.Type<number, number, unknown>;
    Is256FrameRateMode: t.Type<boolean, boolean, unknown>;
    RGain: t.Type<number, number, unknown>;
    GGain: t.Type<number, number, unknown>;
    BGain: t.Type<number, number, unknown>;
    GlobalGain: t.Type<number, number, unknown>;
    ShortDetectionLevel: t.Type<number, number, unknown>;
    MaxCurrentValue: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RQuickTurnOff: t.Type<number, number, unknown>;
    GQuickTurnOff: t.Type<number, number, unknown>;
    BQuickTurnOff: t.Type<number, number, unknown>;
    FirstLineDarkAdj: t.Type<number, number, unknown>;
    IsCouplingParameterAdj3: t.Type<boolean, boolean, unknown>;
    CouplingParameterAdj4: t.Type<number, number, unknown>;
    IsCouplingParameterAdj4: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC6983ExtendProperty">;
}>]>;
export interface ChipTLC6983ExtendProperty extends t.TypeOf<typeof ChipTLC6983ExtendProperty> {
}

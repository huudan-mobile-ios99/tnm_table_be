import * as t from 'io-ts';
export declare const ChipUCS5603RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg: t.Type<number, number, unknown>;
    GreenFirstReg: t.Type<number, number, unknown>;
    BlueFirstReg: t.Type<number, number, unknown>;
    VRedFirstReg: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipUCS5603RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipUCS5603.decompiled.cs:868
 */
export declare const ChipUCS5603RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg: t.Type<number, number, unknown>;
    GreenFirstReg: t.Type<number, number, unknown>;
    BlueFirstReg: t.Type<number, number, unknown>;
    VRedFirstReg: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipUCS5603RGBVExtendProperty">;
}>]>;
export interface ChipUCS5603RGBVExtendProperty extends t.TypeOf<typeof ChipUCS5603RGBVExtendProperty> {
}

import * as t from 'io-ts';
export declare const Chip9348ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CurrentSet1: t.Type<number, number, unknown>;
    CurrentSet2: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowGrayscaleCompensation: t.Type<number, number, unknown>;
    FirstScanCompensation: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    CurrentSet3: t.Type<number, number, unknown>;
    NextGhostAbatement: t.Type<number, number, unknown>;
    Adjustment: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip9348ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:39711
 */
export declare const Chip9348ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    CurrentSet1: t.Type<number, number, unknown>;
    CurrentSet2: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    LowGrayscaleCompensation: t.Type<number, number, unknown>;
    FirstScanCompensation: t.Type<number, number, unknown>;
    CompensationMode: t.Type<number, number, unknown>;
    CurrentSet3: t.Type<number, number, unknown>;
    NextGhostAbatement: t.Type<number, number, unknown>;
    Adjustment: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip9348ExtendProperty">;
}>]>;
export interface Chip9348ExtendProperty extends t.TypeOf<typeof Chip9348ExtendProperty> {
}

import * as t from 'io-ts';
export declare const ChipTLC59581ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    GlobalBrightness: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    SetTD0: t.Type<number, number, unknown>;
    GamaValue: t.Type<number, number, unknown>;
    RedNegVoltageCtrl: t.Type<number, number, unknown>;
    GreenNegVoltageCtrl: t.Type<number, number, unknown>;
    BlueNegVoltageCtrl: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    GreenInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    BlueInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    PrechargeModeControl: t.Type<number, number, unknown>;
    CaterpillarElimination: t.Type<number, number, unknown>;
    EdgeSetGCLK: t.Type<number, number, unknown>;
    PWMModelSelecte: t.Type<boolean, boolean, unknown>;
    RedInterference: t.Type<number, number, unknown>;
    GreenInterference: t.Type<number, number, unknown>;
    BlueInterference: t.Type<number, number, unknown>;
    HardwarePar: t.Type<number, number, unknown>;
    PowerSavingModeSettings: t.Type<boolean, boolean, unknown>;
    RedLowGrayscaleUniformity: t.Type<number, number, unknown>;
    GreenLowGrayscaleUniformity: t.Type<number, number, unknown>;
    BlueLowGrayscaleUniformity: t.Type<number, number, unknown>;
    HighLightInterference: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC59581ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:46466
 */
export declare const ChipTLC59581ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    GlobalBrightness: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    SetTD0: t.Type<number, number, unknown>;
    GamaValue: t.Type<number, number, unknown>;
    RedNegVoltageCtrl: t.Type<number, number, unknown>;
    GreenNegVoltageCtrl: t.Type<number, number, unknown>;
    BlueNegVoltageCtrl: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    GreenInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    BlueInhibitoryControlEMI: t.Type<boolean, boolean, unknown>;
    PrechargeModeControl: t.Type<number, number, unknown>;
    CaterpillarElimination: t.Type<number, number, unknown>;
    EdgeSetGCLK: t.Type<number, number, unknown>;
    PWMModelSelecte: t.Type<boolean, boolean, unknown>;
    RedInterference: t.Type<number, number, unknown>;
    GreenInterference: t.Type<number, number, unknown>;
    BlueInterference: t.Type<number, number, unknown>;
    HardwarePar: t.Type<number, number, unknown>;
    PowerSavingModeSettings: t.Type<boolean, boolean, unknown>;
    RedLowGrayscaleUniformity: t.Type<number, number, unknown>;
    GreenLowGrayscaleUniformity: t.Type<number, number, unknown>;
    BlueLowGrayscaleUniformity: t.Type<number, number, unknown>;
    HighLightInterference: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipTLC59581ExtendProperty">;
}>]>;
export interface ChipTLC59581ExtendProperty extends t.TypeOf<typeof ChipTLC59581ExtendProperty> {
}

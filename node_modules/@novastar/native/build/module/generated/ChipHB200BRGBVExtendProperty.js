import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipHB200BRGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedFirstReg1: common.UInt16,
        GreenFirstReg1: common.UInt16,
        BlueFirstReg1: common.UInt16,
        VRedFirstReg1: common.UInt16,
        RedFirstReg2: common.UInt16,
        GreenFirstReg2: common.UInt16,
        BlueFirstReg2: common.UInt16,
        VRedFirstReg2: common.UInt16,
        RedFirstReg3: common.UInt16,
        GreenFirstReg3: common.UInt16,
        BlueFirstReg3: common.UInt16,
        VRedFirstReg3: common.UInt16,
        RedFirstReg4: common.UInt16,
        GreenFirstReg4: common.UInt16,
        BlueFirstReg4: common.UInt16,
        VRedFirstReg4: common.UInt16,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
        RedGian: common.UInt16,
        GreenGian: common.UInt16,
        BlueGian: common.UInt16,
        HB200B_T1H: common.UInt16,
        HB200B_T0H: common.UInt16,
        HB200B_T: common.UInt16,
        ChannelOpenDetectionEn: common.Bool,
        ChannelOpenDetection: common.UInt8,
        WorkingMode: common.UInt8,
        AntiInterferenceEn: common.Bool,
    }),
], 'ChipHB200BRGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipHB200BRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHB200B.decompiled.cs:868
 */
export const ChipHB200BRGBVExtendProperty = t.intersection([
    ChipHB200BRGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipHB200BRGBVExtendProperty') }),
], 'ChipHB200BRGBVExtendProperty');
//# sourceMappingURL=ChipHB200BRGBVExtendProperty.js.map
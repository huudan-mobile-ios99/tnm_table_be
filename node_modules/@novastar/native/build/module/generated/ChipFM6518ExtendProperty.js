import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipFM6518ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RegFirst: common.UInt16,
        RegSecond: common.UInt16,
        RegThird: common.UInt16,
        RegFourth: common.UInt16,
        RegFifth: common.UInt16,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        LowGrayAdjustGrade: common.UInt8,
        IsLowGrayAdjust: common.Bool,
        IsElimateShadow: common.Bool,
        IsLowGrayCompensate: common.Bool,
        LowGrayCompensateGrade: common.UInt8,
        LowAshEnhanceUniformity: common.UInt8,
        IsFirstLineSlantsDark: common.Bool,
        FirstLineSlantsDarkOptimization: common.UInt8,
        IsAberrationOptimize: common.Bool,
        ChannelStaggering: common.UInt8,
        IsCouplingOptimize: common.Bool,
        CouplingOptimize: common.UInt8,
        IsClampEnhancement: common.Bool,
        IsShadowingEnhancement: common.Bool,
        ChannelOpeningSpeed: common.UInt8,
        ChannelClosingSpeed: common.UInt8,
        Gain: common.UInt16,
    }),
], 'ChipFM6518ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6518ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6518.decompiled.cs:6307
 */
export const ChipFM6518ExtendProperty = t.intersection([
    ChipFM6518ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6518ExtendProperty') }),
], 'ChipFM6518ExtendProperty');
//# sourceMappingURL=ChipFM6518ExtendProperty.js.map
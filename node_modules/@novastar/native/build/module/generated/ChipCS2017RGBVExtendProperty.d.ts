import * as t from 'io-ts';
import { ChipCS2017ExtendProperty } from './ChipCS2017ExtendProperty';
export declare const ChipCS2017RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2017RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2017.decompiled.cs:216
 */
export declare const ChipCS2017RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017RGBVExtendProperty">;
}>]>;
export interface ChipCS2017RGBVExtendProperty extends t.TypeOf<typeof ChipCS2017RGBVExtendProperty> {
    RedProperty?: ChipCS2017ExtendProperty;
    GreenProperty?: ChipCS2017ExtendProperty;
    BlueProperty?: ChipCS2017ExtendProperty;
    VRedProperty?: ChipCS2017ExtendProperty;
}

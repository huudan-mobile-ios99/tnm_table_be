import * as t from 'io-ts';
import { Chip5253BExtendProperty } from './Chip5253BExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip5253BRGBExtendPropety}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:31904
 */
export declare const Chip5253BRGBExtendPropety: t.IntersectionC<[t.TypeC<{
    EnableLowImprovement: t.Type<boolean, boolean, unknown>;
    EnShadeTransitOptimize: t.Type<boolean, boolean, unknown>;
    EnGCLKMutiRate: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        UnderEliminateGhostingEnhancedMode: t.Type<boolean, boolean, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        TextGhostElimination: t.Type<number, number, unknown>;
        CrossCouplingOptimization: t.Type<number, number, unknown>;
        BrightBlockCouplingOptimization: t.Type<number, number, unknown>;
        FirstSweepBiasElimination: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        GrayHorizontalStripesEliminateLow: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        GradientCompensation: t.Type<number, number, unknown>;
        GradientCompensationOne: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip5253BExtendProperty">;
    }>]>;
    EnDoubleRefresh: t.Type<boolean, boolean, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSeven: t.Type<number, number, unknown>;
    GreenRegValueConfigSeven: t.Type<number, number, unknown>;
    BlueRegValueConfigSeven: t.Type<number, number, unknown>;
    VRedRegValueConfigSeven: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>]>;
export interface Chip5253BRGBExtendPropety extends t.TypeOf<typeof Chip5253BRGBExtendPropety> {
    RedProperty?: Chip5253BExtendProperty;
    GreenProperty?: Chip5253BExtendProperty;
    BlueProperty?: Chip5253BExtendProperty;
    VRedProperty?: Chip5253BExtendProperty;
}

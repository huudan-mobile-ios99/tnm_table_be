import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipICND2126ExtendProperty } from './ChipICND2126ExtendProperty';
import { PointDetectParameter } from './PointDetectParameter';
export const ChipICND2126RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipICND2126ExtendProperty,
        GreenProperty: ChipICND2126ExtendProperty,
        BlueProperty: ChipICND2126ExtendProperty,
        VRedProperty: ChipICND2126ExtendProperty,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        IsAdvancedMode: common.Bool,
        PointDetectType: common.UInt8,
        SetSpecialBit: common.UInt8,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        PointDetectParameter,
    }),
], 'ChipICND2126RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2126RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICN2126.decompiled.cs:1400
 */
export const ChipICND2126RGBVExtendProperty = t.intersection([
    ChipICND2126RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2126RGBVExtendProperty') }),
], 'ChipICND2126RGBVExtendProperty');
//# sourceMappingURL=ChipICND2126RGBVExtendProperty.js.map
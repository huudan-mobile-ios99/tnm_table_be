import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipDP3246ExtendProperty } from './ChipDP3246ExtendProperty';
export const ChipDP3246RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipDP3246ExtendProperty,
        GreenProperty: ChipDP3246ExtendProperty,
        BlueProperty: ChipDP3246ExtendProperty,
        VRedProperty: ChipDP3246ExtendProperty,
        ClkDataTransMode: common.UInt8,
        BlackScreenEnergySaving: common.Bool,
        EnableToRemoveBadPoints: common.Bool,
        IsAdvancedMode: common.Bool,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
        ErrRedGain: common.Int32,
        ErrGreenGain: common.Int32,
        ErrBlueGain: common.Int32,
        ErrVRedGain: common.Int32,
    }),
], 'ChipDP3246RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3246RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3246.decompiled.cs:6596
 */
export const ChipDP3246RGBVExtendProperty = t.intersection([
    ChipDP3246RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipDP3246RGBVExtendProperty') }),
], 'ChipDP3246RGBVExtendProperty');
//# sourceMappingURL=ChipDP3246RGBVExtendProperty.js.map
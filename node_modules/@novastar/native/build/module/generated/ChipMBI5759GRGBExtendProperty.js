import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipMBI5759GRGBExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        Global1_Register1: common.withDefault(common.UInt16, 57216),
        Global1_Register2: common.withDefault(common.UInt16, 3),
        Global1_Register3: common.withDefault(common.UInt16, 11267),
        Global2_Register1: common.UInt16_11,
        Global2_Register2: common.UInt16_4096,
        Global2_Register3: common.withDefault(common.UInt16, 12315),
        Global3_Register1: common.UInt16_0,
        Global3_Register2: common.withDefault(common.UInt16, 24649),
        Global3_Register3: common.withDefault(common.UInt16, 272),
        R1_Register1: common.UInt16_16384,
        R1_Register2: common.UInt16_64929,
        R1_Register3: common.UInt16_0,
        R2_Register1: common.UInt16_1023,
        R2_Register2: common.UInt16_2080,
        R2_Register3: common.UInt16_16387,
        G1_Register1: common.UInt16_16384,
        G1_Register2: common.UInt16_64929,
        G1_Register3: common.UInt16_0,
        G2_Register1: common.UInt16_1023,
        G2_Register2: common.UInt16_2080,
        G2_Register3: common.UInt16_16387,
        B1_Register1: common.UInt16_16384,
        B1_Register2: common.UInt16_64929,
        B1_Register3: common.UInt16_0,
        B2_Register1: common.UInt16_1023,
        B2_Register2: common.UInt16_2080,
        B2_Register3: common.UInt16_16387,
    }),
    t.partial({
        RLowGrayCompsentionOne: common.UInt8,
        GLowGrayCompsentionOne: common.UInt8,
        BLowGrayCompsentionOne: common.UInt8,
        RLowGrayCompsentionTwo: common.UInt8,
        GLowGrayCompsentionTwo: common.UInt8,
        BLowGrayCompsentionTwo: common.UInt8,
        RAdvancedLowGrayCompsention: common.UInt8,
        GAdvancedLowGrayCompsention: common.UInt8,
        BAdvancedLowGrayCompsention: common.UInt8,
        RedGain: common.UInt8,
        GreenGain: common.UInt8,
        BlueGain: common.UInt8,
    }),
], 'ChipMBI5759GRGBExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5759GRGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5759.decompiled.cs:1003
 */
export const ChipMBI5759GRGBExtendProperty = t.intersection([
    ChipMBI5759GRGBExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipMBI5759GRGBExtendProperty') }),
], 'ChipMBI5759GRGBExtendProperty');
//# sourceMappingURL=ChipMBI5759GRGBExtendProperty.js.map
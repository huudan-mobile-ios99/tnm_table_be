import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipDP3264ExtendProperty } from './ChipDP3264ExtendProperty';
export const ChipDP3264RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_13,
        RefreshNum: common.Int32_32,
        MaxRefreshNum: common.Int32_128,
    }),
    t.partial({
        RedProperty: ChipDP3264ExtendProperty,
        GreenProperty: ChipDP3264ExtendProperty,
        BlueProperty: ChipDP3264ExtendProperty,
        VRedProperty: ChipDP3264ExtendProperty,
        RefreshNumPerVs: common.UInt8,
        LineGclkNum: common.UInt8,
        R: common.UInt8,
        LowGrayDisplayEnhance: common.Bool,
        BlackScreenDynamicEnergySaving: common.UInt8,
        HighGrayDataIndependentRefresh: common.UInt8,
        EnableToRemoveBadPoints: common.Bool,
        IsAdvancedMode: common.Bool,
        IsUseNewModule: common.Bool,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
        ErrRedGain: common.Int32,
        ErrGreenGain: common.Int32,
        ErrBlueGain: common.Int32,
        ErrVRedGain: common.Int32,
    }),
], 'ChipDP3264RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3264RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3264.decompiled.cs:7020
 */
export const ChipDP3264RGBVExtendProperty = t.intersection([
    ChipDP3264RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipDP3264RGBVExtendProperty') }),
], 'ChipDP3264RGBVExtendProperty');
//# sourceMappingURL=ChipDP3264RGBVExtendProperty.js.map
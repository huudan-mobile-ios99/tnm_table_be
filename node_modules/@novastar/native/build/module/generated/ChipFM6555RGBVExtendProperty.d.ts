import * as t from 'io-ts';
import { ChipFM6555ExtendProperty } from './ChipFM6555ExtendProperty';
export declare const ChipFM6555RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6555RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6555.decompiled.cs:1319
 */
export declare const ChipFM6555RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LEN: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        LowAshColorCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
        LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
        LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
        CouplingOptimization1: t.Type<number, number, unknown>;
        CouplingOptimization2: t.Type<number, number, unknown>;
        CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
        SlowlyOpen: t.Type<number, number, unknown>;
        InflectionPointVoltage: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6555ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6555RGBVExtendProperty">;
}>]>;
export interface ChipFM6555RGBVExtendProperty extends t.TypeOf<typeof ChipFM6555RGBVExtendProperty> {
    RedProperty?: ChipFM6555ExtendProperty;
    GreenProperty?: ChipFM6555ExtendProperty;
    BlueProperty?: ChipFM6555ExtendProperty;
    VRedProperty?: ChipFM6555ExtendProperty;
}

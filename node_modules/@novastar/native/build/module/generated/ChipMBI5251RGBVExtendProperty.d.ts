import * as t from 'io-ts';
import { ChipMBI5251ExtendProperty } from './ChipMBI5251ExtendProperty';
export declare const ChipMBI5251RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5251RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5251.decompiled.cs:1238
 */
export declare const ChipMBI5251RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        Reg_First: t.Type<number, number, unknown>;
        Reg_Second: t.Type<number, number, unknown>;
        Reg_Third: t.Type<number, number, unknown>;
        Reg_Fourth: t.Type<number, number, unknown>;
        Reg_Fifth: t.Type<number, number, unknown>;
        Reg_Sixth: t.Type<number, number, unknown>;
    }>, t.PartialC<{}>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5251ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigFour: t.Type<number, number, unknown>;
    GreenRegValueConfigFour: t.Type<number, number, unknown>;
    BlueRegValueConfigFour: t.Type<number, number, unknown>;
    VRedRegValueConfigFour: t.Type<number, number, unknown>;
    RedRegValueConfigFive: t.Type<number, number, unknown>;
    GreenRegValueConfigFive: t.Type<number, number, unknown>;
    BlueRegValueConfigFive: t.Type<number, number, unknown>;
    VRedRegValueConfigFive: t.Type<number, number, unknown>;
    RedRegValueConfigSix: t.Type<number, number, unknown>;
    GreenRegValueConfigSix: t.Type<number, number, unknown>;
    BlueRegValueConfigSix: t.Type<number, number, unknown>;
    VRedRegValueConfigSix: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5251RGBVExtendProperty">;
}>]>;
export interface ChipMBI5251RGBVExtendProperty extends t.TypeOf<typeof ChipMBI5251RGBVExtendProperty> {
    RedProperty?: ChipMBI5251ExtendProperty;
    GreenProperty?: ChipMBI5251ExtendProperty;
    BlueProperty?: ChipMBI5251ExtendProperty;
    VRedProperty?: ChipMBI5251ExtendProperty;
}

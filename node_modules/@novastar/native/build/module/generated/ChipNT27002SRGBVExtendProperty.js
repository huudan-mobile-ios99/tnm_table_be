import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipNT27002SExtendProperty } from './ChipNT27002SExtendProperty';
export const ChipNT27002SRGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_196,
    }),
    t.partial({
        RedProperty: ChipNT27002SExtendProperty,
        GreenProperty: ChipNT27002SExtendProperty,
        BlueProperty: ChipNT27002SExtendProperty,
        VRedProperty: ChipNT27002SExtendProperty,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        ScanType: common.UInt8,
        IsAdvancedMode: common.Bool,
        MyRedGain: common.Int32,
        RedRangeGain: common.UInt8,
        MyGreenGain: common.Int32,
        GreenRangeGain: common.UInt8,
        MyBlueGain: common.Int32,
        BlueRangeGain: common.UInt8,
        GraySteps: common.Int32,
        GetTrueGraySteps: common.Int32,
        NO_GCLK: common.Int32,
        F_gclk: common.Int32,
        FrameStartTime: common.Int32,
        ScanBetweenTime: common.Int32,
        ShadowEliminationTime: common.Int32,
        PrechargeTime: common.Int32,
        ScanShadowEliminationTime: common.Int32,
        ScanOpeningDelayTime: common.Int32,
        ScanCloseingDelayTime: common.Int32,
        ScanShadowEliminationVoltage: common.Int32,
        ShadowEliminationVoltageR: common.Int32,
        ShadowEliminationVoltageG: common.Int32,
        ShadowEliminationVoltageB: common.Int32,
        PulseWidthCompensationR: common.Int32,
        PulseWidthCompensationG: common.Int32,
        PulseWidthCompensationB: common.Int32,
        PrechargeVoltagR: common.Int32,
        PrechargeVoltagG: common.Int32,
        PrechargeVoltagB: common.Int32,
        ColorTemperature1R: common.Int32,
        ColorTemperature1G: common.Int32,
        ColorTemperature1B: common.Int32,
        ColorTemperature2R: common.Int32,
        ColorTemperature2G: common.Int32,
        ColorTemperature2B: common.Int32,
        ColorTemperature3R: common.Int32,
        ColorTemperature3G: common.Int32,
        ColorTemperature3B: common.Int32,
        AbnormalStatePattern: common.Int32,
        OpenVoltageR: common.Int32,
        OpenVoltageG: common.Int32,
        OpenVoltageB: common.Int32,
        DICOpenDateReplication: common.Bool,
        DICOpenDark: common.Bool,
        SavingMode: common.Bool,
        TemperatureSelevtorEn: common.Bool,
        TemperatureSelevtorLevel: common.Int32,
        ChannelCloseMode: common.Int32,
        FileNumber: common.Int32,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
    }),
], 'ChipNT27002SRGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipNT27002SRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipNT27002S.decompiled.cs:1039
 */
export const ChipNT27002SRGBVExtendProperty = t.intersection([
    ChipNT27002SRGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipNT27002SRGBVExtendProperty') }),
], 'ChipNT27002SRGBVExtendProperty');
//# sourceMappingURL=ChipNT27002SRGBVExtendProperty.js.map
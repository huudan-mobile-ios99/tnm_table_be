import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipFM6182ExtendProperty } from './ChipFM6182ExtendProperty';
export const ChipFM6182RGBVExtendPropeyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipFM6182ExtendProperty,
        GreenProperty: ChipFM6182ExtendProperty,
        BlueProperty: ChipFM6182ExtendProperty,
        VRedProperty: ChipFM6182ExtendProperty,
        IsAdvancedMode: common.Bool,
    }),
], 'ChipFM6182RGBVExtendPropeyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6182RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:42907
 */
export const ChipFM6182RGBVExtendPropey = t.intersection([
    ChipFM6182RGBVExtendPropeyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6182RGBVExtendPropey') }),
], 'ChipFM6182RGBVExtendPropey');
//# sourceMappingURL=ChipFM6182RGBVExtendPropey.js.map
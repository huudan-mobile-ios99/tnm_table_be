import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipCFD455AExtendProperty } from './ChipCFD455AExtendProperty';
export const ChipCFD455ARGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipCFD455AExtendProperty,
        GreenProperty: ChipCFD455AExtendProperty,
        BlueProperty: ChipCFD455AExtendProperty,
        VRedProperty: ChipCFD455AExtendProperty,
        EnGCLKMutiRate: common.Bool,
        GclkDoubleLine: common.Bool,
        SubField: common.UInt8,
        GrayDepth: common.UInt8,
        IsAdvancedMode: common.Bool,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
    }),
], 'ChipCFD455ARGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCFD455ARGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCFD455A.decompiled.cs:3745
 */
export const ChipCFD455ARGBVExtendProperty = t.intersection([
    ChipCFD455ARGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCFD455ARGBVExtendProperty') }),
], 'ChipCFD455ARGBVExtendProperty');
//# sourceMappingURL=ChipCFD455ARGBVExtendProperty.js.map
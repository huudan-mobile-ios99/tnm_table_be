import * as t from 'io-ts';
import { ChipDP3246ExtendProperty } from './ChipDP3246ExtendProperty';
export declare const ChipDP3246RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    ClkDataTransMode: t.Type<number, number, unknown>;
    BlackScreenEnergySaving: t.Type<boolean, boolean, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3246RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3246.decompiled.cs:6596
 */
export declare const ChipDP3246RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ErrorCurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3246ExtendProperty">;
    }>]>;
    ClkDataTransMode: t.Type<number, number, unknown>;
    BlackScreenEnergySaving: t.Type<boolean, boolean, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3246RGBVExtendProperty">;
}>]>;
export interface ChipDP3246RGBVExtendProperty extends t.TypeOf<typeof ChipDP3246RGBVExtendProperty> {
    RedProperty?: ChipDP3246ExtendProperty;
    GreenProperty?: ChipDP3246ExtendProperty;
    BlueProperty?: ChipDP3246ExtendProperty;
    VRedProperty?: ChipDP3246ExtendProperty;
}

import * as t from 'io-ts';
import { ScanTypeEnum } from './ScanType';
export declare const ChipICN2065ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ScanType: t.Type<ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
    RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshUniformity: t.Type<number, number, unknown>;
    TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingToAdjust: t.Type<number, number, unknown>;
    CrossCouplingToAdjust: t.Type<number, number, unknown>;
    SlowlyOpening: t.Type<number, number, unknown>;
    DclkNumPerScanRegPart: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    Group_Num: t.Type<number, number, unknown>;
    GclkNum: t.Type<number, number, unknown>;
    RegValue: t.ArrayC<t.Type<number, number, unknown>>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThreeRegValue: t.Type<number, number, unknown>;
    FourRegValue: t.Type<number, number, unknown>;
    FiveRegValue: t.Type<number, number, unknown>;
    SixRegValue: t.Type<number, number, unknown>;
    SevenRegValue: t.Type<number, number, unknown>;
    EightRegValue: t.Type<number, number, unknown>;
    NineRegValue: t.Type<number, number, unknown>;
    TenRegValue: t.Type<number, number, unknown>;
    ElevenRegValue: t.Type<number, number, unknown>;
    TwelveRegValue: t.Type<number, number, unknown>;
    ThirteenRegValue: t.Type<number, number, unknown>;
    ForteenRegValue: t.Type<number, number, unknown>;
    FifteenRegValue: t.Type<number, number, unknown>;
    SixteenRegValue: t.Type<number, number, unknown>;
    SeveteenRegValue: t.Type<number, number, unknown>;
    EighteenRegValue: t.Type<number, number, unknown>;
    NineteenRegValue: t.Type<number, number, unknown>;
    TwentyRegValue: t.Type<number, number, unknown>;
    TwentyOneRegValue: t.Type<number, number, unknown>;
    TwentyTwoRegValue: t.Type<number, number, unknown>;
    TwentyThreeRegValue: t.Type<number, number, unknown>;
    TwentyFourRegValue: t.Type<number, number, unknown>;
    TwentyFiveRegValue: t.Type<number, number, unknown>;
    TwentySixRegValue: t.Type<number, number, unknown>;
    TwentySevenRegValue: t.Type<number, number, unknown>;
    TwentyEightRegValue: t.Type<number, number, unknown>;
    TwentyNineRegValue: t.Type<number, number, unknown>;
    ThirtyRegValue: t.Type<number, number, unknown>;
    ThirtyOneRegValue: t.Type<number, number, unknown>;
    ThirtyTwoRegValue: t.Type<number, number, unknown>;
    ThirtyThreeRegValue: t.Type<number, number, unknown>;
    ThirtyFourRegValue: t.Type<number, number, unknown>;
    ThirtyFiveRegValue: t.Type<number, number, unknown>;
    ThirtySixRegValue: t.Type<number, number, unknown>;
    ThirtySevenRegValue: t.Type<number, number, unknown>;
    ThirtyEightRegValue: t.Type<number, number, unknown>;
    ThirtyNineRegValue: t.Type<number, number, unknown>;
    FortyRegValue: t.Type<number, number, unknown>;
    FortyOneRegValue: t.Type<number, number, unknown>;
    FortyTwoRegValue: t.Type<number, number, unknown>;
    FortyThreeRegValue: t.Type<number, number, unknown>;
    FortyFourRegValue: t.Type<number, number, unknown>;
    FortyFiveRegValue: t.Type<number, number, unknown>;
    FortySixRegValue: t.Type<number, number, unknown>;
    FortySevenRegValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    DisplayMode: t.Type<number, number, unknown>;
    FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
    FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
    CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
    CrossCouplingToAdjustN: t.Type<number, number, unknown>;
    KneeVoltage: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICN2065ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:36483
 */
export declare const ChipICN2065ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    ScanType: t.Type<ScanTypeEnum, "Unknown" | "Scan_static" | "Scan_2" | "Scan_3" | "Scan_4" | "Scan_5" | "Scan_6" | "Scan_7" | "Scan_8" | "Scan_9" | "Scan_10" | "Scan_11" | "Scan_12" | "Scan_13" | "Scan_14" | "Scan_15" | "Scan_16" | "Scan_17" | "Scan_18" | "Scan_19" | "Scan_20" | "Scan_21" | "Scan_22" | "Scan_23" | "Scan_24" | "Scan_25" | "Scan_26" | "Scan_27" | "Scan_28" | "Scan_29" | "Scan_30" | "Scan_31" | "Scan_32" | "Scan_33" | "Scan_34" | "Scan_35" | "Scan_36" | "Scan_37" | "Scan_38" | "Scan_39" | "Scan_40" | "Scan_41" | "Scan_42" | "Scan_43" | "Scan_44" | "Scan_45" | "Scan_46" | "Scan_47" | "Scan_48" | "Scan_49" | "Scan_50" | "Scan_51" | "Scan_52" | "Scan_53" | "Scan_54" | "Scan_55" | "Scan_56" | "Scan_57" | "Scan_58" | "Scan_59" | "Scan_60" | "Scan_61" | "Scan_62" | "Scan_63" | "Scan_64" | "Scan_65" | "Scan_66" | "Scan_67" | "Scan_68" | "Scan_69" | "Scan_70" | "Scan_71" | "Scan_72" | "Scan_73" | "Scan_74" | "Scan_75" | "Scan_76" | "Scan_77" | "Scan_78" | "Scan_79" | "Scan_80" | "Scan_81" | "Scan_82" | "Scan_83" | "Scan_84" | "Scan_85" | "Scan_86" | "Scan_87" | "Scan_88" | "Scan_89" | "Scan_90" | "Scan_91" | "Scan_92" | "Scan_93" | "Scan_94" | "Scan_95" | "Scan_96" | "Scan_97" | "Scan_98" | "Scan_99" | "Scan_100" | "Scan_101" | "Scan_102" | "Scan_103" | "Scan_104" | "Scan_105" | "Scan_106" | "Scan_107" | "Scan_108" | "Scan_109" | "Scan_110" | "Scan_111" | "Scan_112" | "Scan_113" | "Scan_114" | "Scan_115" | "Scan_116" | "Scan_117" | "Scan_118" | "Scan_119" | "Scan_120" | "Scan_121" | "Scan_122" | "Scan_123" | "Scan_124" | "Scan_125" | "Scan_126" | "Scan_127" | "Scan_128", unknown>;
    RefreshTheNumberOfClusters: t.Type<number, number, unknown>;
    SubFields: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshUniformity: t.Type<number, number, unknown>;
    TheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    TheFirstLineSlantsDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingToAdjust: t.Type<number, number, unknown>;
    CrossCouplingToAdjust: t.Type<number, number, unknown>;
    SlowlyOpening: t.Type<number, number, unknown>;
    DclkNumPerScanRegPart: t.Type<number, number, unknown>;
    Gain: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    Group_Num: t.Type<number, number, unknown>;
    GclkNum: t.Type<number, number, unknown>;
    RegValue: t.ArrayC<t.Type<number, number, unknown>>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThreeRegValue: t.Type<number, number, unknown>;
    FourRegValue: t.Type<number, number, unknown>;
    FiveRegValue: t.Type<number, number, unknown>;
    SixRegValue: t.Type<number, number, unknown>;
    SevenRegValue: t.Type<number, number, unknown>;
    EightRegValue: t.Type<number, number, unknown>;
    NineRegValue: t.Type<number, number, unknown>;
    TenRegValue: t.Type<number, number, unknown>;
    ElevenRegValue: t.Type<number, number, unknown>;
    TwelveRegValue: t.Type<number, number, unknown>;
    ThirteenRegValue: t.Type<number, number, unknown>;
    ForteenRegValue: t.Type<number, number, unknown>;
    FifteenRegValue: t.Type<number, number, unknown>;
    SixteenRegValue: t.Type<number, number, unknown>;
    SeveteenRegValue: t.Type<number, number, unknown>;
    EighteenRegValue: t.Type<number, number, unknown>;
    NineteenRegValue: t.Type<number, number, unknown>;
    TwentyRegValue: t.Type<number, number, unknown>;
    TwentyOneRegValue: t.Type<number, number, unknown>;
    TwentyTwoRegValue: t.Type<number, number, unknown>;
    TwentyThreeRegValue: t.Type<number, number, unknown>;
    TwentyFourRegValue: t.Type<number, number, unknown>;
    TwentyFiveRegValue: t.Type<number, number, unknown>;
    TwentySixRegValue: t.Type<number, number, unknown>;
    TwentySevenRegValue: t.Type<number, number, unknown>;
    TwentyEightRegValue: t.Type<number, number, unknown>;
    TwentyNineRegValue: t.Type<number, number, unknown>;
    ThirtyRegValue: t.Type<number, number, unknown>;
    ThirtyOneRegValue: t.Type<number, number, unknown>;
    ThirtyTwoRegValue: t.Type<number, number, unknown>;
    ThirtyThreeRegValue: t.Type<number, number, unknown>;
    ThirtyFourRegValue: t.Type<number, number, unknown>;
    ThirtyFiveRegValue: t.Type<number, number, unknown>;
    ThirtySixRegValue: t.Type<number, number, unknown>;
    ThirtySevenRegValue: t.Type<number, number, unknown>;
    ThirtyEightRegValue: t.Type<number, number, unknown>;
    ThirtyNineRegValue: t.Type<number, number, unknown>;
    FortyRegValue: t.Type<number, number, unknown>;
    FortyOneRegValue: t.Type<number, number, unknown>;
    FortyTwoRegValue: t.Type<number, number, unknown>;
    FortyThreeRegValue: t.Type<number, number, unknown>;
    FortyFourRegValue: t.Type<number, number, unknown>;
    FortyFiveRegValue: t.Type<number, number, unknown>;
    FortySixRegValue: t.Type<number, number, unknown>;
    FortySevenRegValue: t.Type<number, number, unknown>;
}>, t.PartialC<{
    DisplayMode: t.Type<number, number, unknown>;
    FineTuningTheFirstSweepDarkCompensationEnable: t.Type<boolean, boolean, unknown>;
    FineTuningTheFirstSweepDarkCompensation: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    EnableCouplingToAdjust: t.Type<boolean, boolean, unknown>;
    CouplingEnhancedMode: t.Type<boolean, boolean, unknown>;
    CrossCouplingToAdjustN: t.Type<number, number, unknown>;
    KneeVoltage: t.Type<number, number, unknown>;
    EnergySavingMode: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2065ExtendProperty">;
}>]>;
export interface ChipICN2065ExtendProperty extends t.TypeOf<typeof ChipICN2065ExtendProperty> {
    ScanType: ScanTypeEnum;
}

import * as t from 'io-ts';
export declare const ChipMBI5759GRGBExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RLowGrayCompsentionOne: t.Type<number, number, unknown>;
    GLowGrayCompsentionOne: t.Type<number, number, unknown>;
    BLowGrayCompsentionOne: t.Type<number, number, unknown>;
    RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5759GRGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5759.decompiled.cs:1003
 */
export declare const ChipMBI5759GRGBExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    Global1_Register1: t.Type<number, number, unknown>;
    Global1_Register2: t.Type<number, number, unknown>;
    Global1_Register3: t.Type<number, number, unknown>;
    Global2_Register1: t.Type<number, number, unknown>;
    Global2_Register2: t.Type<number, number, unknown>;
    Global2_Register3: t.Type<number, number, unknown>;
    Global3_Register1: t.Type<number, number, unknown>;
    Global3_Register2: t.Type<number, number, unknown>;
    Global3_Register3: t.Type<number, number, unknown>;
    R1_Register1: t.Type<number, number, unknown>;
    R1_Register2: t.Type<number, number, unknown>;
    R1_Register3: t.Type<number, number, unknown>;
    R2_Register1: t.Type<number, number, unknown>;
    R2_Register2: t.Type<number, number, unknown>;
    R2_Register3: t.Type<number, number, unknown>;
    G1_Register1: t.Type<number, number, unknown>;
    G1_Register2: t.Type<number, number, unknown>;
    G1_Register3: t.Type<number, number, unknown>;
    G2_Register1: t.Type<number, number, unknown>;
    G2_Register2: t.Type<number, number, unknown>;
    G2_Register3: t.Type<number, number, unknown>;
    B1_Register1: t.Type<number, number, unknown>;
    B1_Register2: t.Type<number, number, unknown>;
    B1_Register3: t.Type<number, number, unknown>;
    B2_Register1: t.Type<number, number, unknown>;
    B2_Register2: t.Type<number, number, unknown>;
    B2_Register3: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RLowGrayCompsentionOne: t.Type<number, number, unknown>;
    GLowGrayCompsentionOne: t.Type<number, number, unknown>;
    BLowGrayCompsentionOne: t.Type<number, number, unknown>;
    RLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    GLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    BLowGrayCompsentionTwo: t.Type<number, number, unknown>;
    RAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    GAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    BAdvancedLowGrayCompsention: t.Type<number, number, unknown>;
    RedGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5759GRGBExtendProperty">;
}>]>;
export interface ChipMBI5759GRGBExtendProperty extends t.TypeOf<typeof ChipMBI5759GRGBExtendProperty> {
}

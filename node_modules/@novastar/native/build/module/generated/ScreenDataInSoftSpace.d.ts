import * as t from 'io-ts';
import { DviSelectModeEnum } from './DviSelectMode';
import { LEDDisplyTypeEnum } from './LEDDisplyType';
import { VirtualModeTypeEnum } from './VirtualModeType';
/**
 * @category Codecs
 * @desc Codec for interface {@link ScreenDataInSoftSpace}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.CommonInfoAccessor.decompiled.cs:1019
 */
export declare const ScreenDataInSoftSpace: t.IntersectionC<[t.TypeC<{
    UUID: t.StringC;
    DviSelect: t.Type<DviSelectModeEnum, "HDMI" | "DVI" | "SDI" | "DP" | "Dual_DVI" | "HDBaseT" | "LVDS", unknown>;
    OnePortLoadInfo: t.ArrayC<t.PartialC<{
        Port: t.Type<number, number, unknown>;
        LineType: t.Type<import("./ScanBoardConnectType").ScanBoardConnectTypeEnum, "LeftTop_Horizontal" | "LeftBottom_Horizontal" | "RightTop_Horizontal" | "RightBottom_Horizontal" | "LeftTop_Vertical" | "LeftBottom_Vertical" | "RightTop_Vertical" | "RightBottom_Vertical", unknown>;
        StartCabCol: t.Type<number, number, unknown>;
        StartCabRow: t.Type<number, number, unknown>;
        EndCabCol: t.Type<number, number, unknown>;
        EndCabRow: t.Type<number, number, unknown>;
    }>>;
    CabinetInDevice: t.ArrayC<t.PartialC<{
        DevID: t.Type<number, number, unknown>;
        NetPort: t.Type<number, number, unknown>;
        ConnectID: t.Type<number, number, unknown>;
        XPos: t.Type<number, number, unknown>;
        YPos: t.Type<number, number, unknown>;
        Width: t.Type<number, number, unknown>;
        Height: t.Type<number, number, unknown>;
        GroupID: t.Type<number, number, unknown>;
        RowIndexInScreen: t.Type<number, number, unknown>;
        ColIndexInScreen: t.Type<number, number, unknown>;
        DviIndex: t.Type<number, number, unknown>;
    }>>;
}>, t.PartialC<{
    ScrType: t.Type<LEDDisplyTypeEnum, "SimpleSingleType" | "StandardType" | "ComplexType", unknown>;
    VirMode: t.Type<VirtualModeTypeEnum, "Unknown" | "Disable" | "Led4Mode1" | "Led4Mode2" | "Led3" | "Led31", unknown>;
    ScrX: t.Type<number, number, unknown>;
    ScrY: t.Type<number, number, unknown>;
    CabinetCol: t.Type<number, number, unknown>;
    CabinetRow: t.Type<number, number, unknown>;
    PortCols: t.Type<number, number, unknown>;
    PortRows: t.Type<number, number, unknown>;
    DeviceID: t.Type<number, number, unknown>;
    CabinetWidth: t.Type<number, number, unknown>;
    CabinetHeight: t.Type<number, number, unknown>;
    ScreenIndex: t.Type<number, number, unknown>;
    DVIlist: t.RecordC<t.Type<number, number, unknown>, t.Type<{
        x: number;
        y: number;
    }, `${bigint}, ${bigint}`, unknown>>;
}>]>;
export interface ScreenDataInSoftSpace extends t.TypeOf<typeof ScreenDataInSoftSpace> {
    ScrType?: LEDDisplyTypeEnum;
    DviSelect: DviSelectModeEnum;
    VirMode?: VirtualModeTypeEnum;
}

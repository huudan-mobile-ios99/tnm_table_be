import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipSCL8080ExtendProperty } from './ChipSCL8080ExtendProperty';
export const ChipSCL8080RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipSCL8080ExtendProperty,
        GreenProperty: ChipSCL8080ExtendProperty,
        BlueProperty: ChipSCL8080ExtendProperty,
        VRedProperty: ChipSCL8080ExtendProperty,
        ScanType: common.UInt8,
        ChipLibVersion: common.UInt8,
        IsAdvancedMode: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        IsUseNewModule: common.Bool,
    }),
], 'ChipSCL8080RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSCL8080RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSCL8080.decompiled.cs:412
 */
export const ChipSCL8080RGBVExtendProperty = t.intersection([
    ChipSCL8080RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSCL8080RGBVExtendProperty') }),
], 'ChipSCL8080RGBVExtendProperty');
//# sourceMappingURL=ChipSCL8080RGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipRZRGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsOpenChannelCheck: common.Bool_false,
    }),
    t.partial({
        RedFirstReg1: common.UInt16,
        GreenFirstReg1: common.UInt16,
        BlueFirstReg1: common.UInt16,
        VRedFirstReg1: common.UInt16,
        RedFirstReg2: common.UInt16,
        GreenFirstReg2: common.UInt16,
        BlueFirstReg2: common.UInt16,
        VRedFirstReg2: common.UInt16,
        RedFirstReg3: common.UInt16,
        GreenFirstReg3: common.UInt16,
        BlueFirstReg3: common.UInt16,
        VRedFirstReg3: common.UInt16,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        IsAdvancedMode: common.Bool,
        RedGian: common.UInt16,
        GreenGian: common.UInt16,
        BlueGian: common.UInt16,
        BitLevel: common.UInt16,
        OpenGain: common.Bool,
        RZ_T1L: common.UInt16,
        RZ_T0L: common.UInt16,
        RZ_T: common.UInt16,
    }),
], 'ChipRZRGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipRZRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipRZ.decompiled.cs:886
 */
export const ChipRZRGBVExtendProperty = t.intersection([
    ChipRZRGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipRZRGBVExtendProperty') }),
], 'ChipRZRGBVExtendProperty');
//# sourceMappingURL=ChipRZRGBVExtendProperty.js.map
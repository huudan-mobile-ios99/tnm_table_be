import * as t from 'io-ts';
export declare const ChipSM16158ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    OpenDetection: t.Type<boolean, boolean, unknown>;
    REnableOpenInspection: t.Type<boolean, boolean, unknown>;
    GEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    BEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RDimInterval: t.Type<number, number, unknown>;
    GDimInterval: t.Type<number, number, unknown>;
    BDimInterval: t.Type<number, number, unknown>;
    RDimCompensation: t.Type<number, number, unknown>;
    GDimCompensation: t.Type<number, number, unknown>;
    BDimCompensation: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16158ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:45009
 */
export declare const ChipSM16158ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RLowAshImprovement: t.Type<number, number, unknown>;
    GLowAshImprovement: t.Type<number, number, unknown>;
    BLowAshImprovement: t.Type<number, number, unknown>;
    OpenDetection: t.Type<boolean, boolean, unknown>;
    REnableOpenInspection: t.Type<boolean, boolean, unknown>;
    GEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    BEnableOpenInspection: t.Type<boolean, boolean, unknown>;
    RLowAshPitsImprove: t.Type<number, number, unknown>;
    GLowAshPitsImprove: t.Type<number, number, unknown>;
    BLowAshPitsImprove: t.Type<number, number, unknown>;
    RDimInterval: t.Type<number, number, unknown>;
    GDimInterval: t.Type<number, number, unknown>;
    BDimInterval: t.Type<number, number, unknown>;
    RDimCompensation: t.Type<number, number, unknown>;
    GDimCompensation: t.Type<number, number, unknown>;
    BDimCompensation: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16158ExtendProperty">;
}>]>;
export interface ChipSM16158ExtendProperty extends t.TypeOf<typeof ChipSM16158ExtendProperty> {
}

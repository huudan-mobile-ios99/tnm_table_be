import * as t from 'io-ts';
export declare const ChipSM16237ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RUnderEliminateGhostOne: t.Type<number, number, unknown>;
    GUnderEliminateGhostOne: t.Type<number, number, unknown>;
    BUnderEliminateGhostOne: t.Type<number, number, unknown>;
    RUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    BUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GOffsetCompsation: t.Type<number, number, unknown>;
    BOffsetCompsation: t.Type<number, number, unknown>;
    GFirstCompsation: t.Type<number, number, unknown>;
    BFirstCompsation: t.Type<number, number, unknown>;
    SwapErrorPoint: t.Type<number, number, unknown>;
    RSwapErrorPoint: t.Type<number, number, unknown>;
    GSwapErrorPoint: t.Type<number, number, unknown>;
    BSwapErrorPoint: t.Type<number, number, unknown>;
}>, t.PartialC<{
    ROffsetCompsation: t.Type<number, number, unknown>;
    RFirstCompsation: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16237ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:44285
 */
export declare const ChipSM16237ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RUnderEliminateGhostOne: t.Type<number, number, unknown>;
    GUnderEliminateGhostOne: t.Type<number, number, unknown>;
    BUnderEliminateGhostOne: t.Type<number, number, unknown>;
    RUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    BUnderEliminateGhostTwo: t.Type<number, number, unknown>;
    GOffsetCompsation: t.Type<number, number, unknown>;
    BOffsetCompsation: t.Type<number, number, unknown>;
    GFirstCompsation: t.Type<number, number, unknown>;
    BFirstCompsation: t.Type<number, number, unknown>;
    SwapErrorPoint: t.Type<number, number, unknown>;
    RSwapErrorPoint: t.Type<number, number, unknown>;
    GSwapErrorPoint: t.Type<number, number, unknown>;
    BSwapErrorPoint: t.Type<number, number, unknown>;
}>, t.PartialC<{
    ROffsetCompsation: t.Type<number, number, unknown>;
    RFirstCompsation: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16237ExtendProperty">;
}>]>;
export interface ChipSM16237ExtendProperty extends t.TypeOf<typeof ChipSM16237ExtendProperty> {
}

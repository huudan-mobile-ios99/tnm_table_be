import * as t from 'io-ts';
export declare const ChipHX8864ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    LowGreyOrderOptModel: t.Type<number, number, unknown>;
    LowGreyOrderOpt2: t.Type<number, number, unknown>;
    CouplingStartTime: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    FirstLineCompensationTime: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    FirstLineCompensationLevel: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    LowGrayColorCompensation: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingReguEnable: t.Type<boolean, boolean, unknown>;
    CouplingEnhan: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipHX8864ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHX8864.decompiled.cs:7537
 */
export declare const ChipHX8864ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    FifthRegValue: t.Type<number, number, unknown>;
    SixthRegValue: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    LowGreyOrderOptModel: t.Type<number, number, unknown>;
    LowGreyOrderOpt2: t.Type<number, number, unknown>;
    CouplingStartTime: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    ErrorCurrentGain: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    FirstLineCompensationTime: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    FirstLineCompensationLevel: t.Type<number, number, unknown>;
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    LowGrayColorCompensation: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2Enable: t.Type<boolean, boolean, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingReguEnable: t.Type<boolean, boolean, unknown>;
    CouplingEnhan: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX8864ExtendProperty">;
}>]>;
export interface ChipHX8864ExtendProperty extends t.TypeOf<typeof ChipHX8864ExtendProperty> {
}

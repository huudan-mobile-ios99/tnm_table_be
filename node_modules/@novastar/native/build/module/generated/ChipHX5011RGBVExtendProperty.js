import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipHX5011RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsOpenChannelCheck: common.Bool_false,
    }),
    t.partial({
        RedFirstReg1: common.UInt16,
        GreenFirstReg1: common.UInt16,
        BlueFirstReg1: common.UInt16,
        VRedFirstReg1: common.UInt16,
        RedFirstReg2: common.UInt16,
        GreenFirstReg2: common.UInt16,
        BlueFirstReg2: common.UInt16,
        VRedFirstReg2: common.UInt16,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        IsAdvancedMode: common.Bool,
        RefreshRate: common.UInt8,
        WorkPattern: common.Bool,
    }),
], 'ChipHX5011RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipHX5011RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHX5011.decompiled.cs:859
 */
export const ChipHX5011RGBVExtendProperty = t.intersection([
    ChipHX5011RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipHX5011RGBVExtendProperty') }),
], 'ChipHX5011RGBVExtendProperty');
//# sourceMappingURL=ChipHX5011RGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipMBI5269ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_21,
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        DarkBlockCompensationOneEn: common.Bool,
        DarkBlockCompensationOne: common.UInt8,
        DarkBlockCompensationTwo: common.UInt8,
        DarkBlockCompensationThree: common.UInt8,
        FirstSweepEliminationEn: common.Bool,
        FirstSweepElimination: common.UInt8,
        UnderEliminateGhost: common.UInt8,
        GrayHorizontalStripesEliminateEn: common.Bool,
        LowAshColorCastCompensationMode: common.UInt8,
        LowAshColorCastCompensation: common.UInt8,
        AdvancedRLowAshColorCastCompensation1: common.UInt8,
        AdvancedRLowAshColorCastCompensation3: common.UInt8,
        LowAshUniformityImproved1: common.UInt8,
        LowAshUniformityImproved2: common.UInt8,
        DislodgeBadPointsGrade: common.UInt8,
        CurrentGain: common.UInt8,
    }),
], 'ChipMBI5269ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5269ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5269.decompiled.cs:5671
 */
export const ChipMBI5269ExtendProperty = t.intersection([
    ChipMBI5269ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipMBI5269ExtendProperty') }),
], 'ChipMBI5269ExtendProperty');
//# sourceMappingURL=ChipMBI5269ExtendProperty.js.map
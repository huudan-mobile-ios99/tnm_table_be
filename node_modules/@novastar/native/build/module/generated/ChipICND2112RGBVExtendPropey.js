import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipICND2112ExtendProperty } from './ChipICND2112ExtendProperty';
export const ChipICND2112RGBVExtendPropeyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipICND2112ExtendProperty,
        GreenProperty: ChipICND2112ExtendProperty,
        BlueProperty: ChipICND2112ExtendProperty,
        VRedProperty: ChipICND2112ExtendProperty,
        IsAdvancedMode: common.Bool,
        MaxUnitChipPerScan: common.Int32,
    }),
], 'ChipICND2112RGBVExtendPropeyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2112RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2112.decompiled.cs:169
 */
export const ChipICND2112RGBVExtendPropey = t.intersection([
    ChipICND2112RGBVExtendPropeyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2112RGBVExtendPropey') }),
], 'ChipICND2112RGBVExtendPropey');
//# sourceMappingURL=ChipICND2112RGBVExtendPropey.js.map
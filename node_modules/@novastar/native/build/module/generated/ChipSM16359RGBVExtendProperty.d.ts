import * as t from 'io-ts';
import { ChipSM16359ExtendProperty } from './ChipSM16359ExtendProperty';
export declare const ChipSM16359RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16359RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:51301
 */
export declare const ChipSM16359RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        IsShadowsEnable: t.Type<boolean, boolean, unknown>;
        RegValueConfigFirst: t.Type<number, number, unknown>;
        BlankingMode: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshCompensationTwo: t.Type<number, number, unknown>;
        LowAshCompensationOne: t.Type<number, number, unknown>;
        IsOpenTest: t.Type<boolean, boolean, unknown>;
        OpenTestVoltageGrade: t.Type<number, number, unknown>;
        IsEnergySaving: t.Type<boolean, boolean, unknown>;
        ShadowVoltageOne: t.Type<number, number, unknown>;
        ShadowVoltageTwo: t.Type<number, number, unknown>;
        RegValueConfigForth: t.Type<number, number, unknown>;
        IsAdvancedMode: t.Type<boolean, boolean, unknown>;
        PWMModle: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSM16359ExtendProperty">;
    }>]>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSM16359RGBVExtendProperty">;
}>]>;
export interface ChipSM16359RGBVExtendProperty extends t.TypeOf<typeof ChipSM16359RGBVExtendProperty> {
    RedProperty?: ChipSM16359ExtendProperty;
    GreenProperty?: ChipSM16359ExtendProperty;
    BlueProperty?: ChipSM16359ExtendProperty;
    VRedProperty?: ChipSM16359ExtendProperty;
}

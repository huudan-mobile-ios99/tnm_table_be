import * as t from 'io-ts';
import { ChipFM6182ExtendProperty } from './ChipFM6182ExtendProperty';
export declare const ChipFM6182RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6182RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:42907
 */
export declare const ChipFM6182RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentLowCompsention: t.Type<number, number, unknown>;
        LowCompsention: t.Type<number, number, unknown>;
        FirstCompsentionOne: t.Type<number, number, unknown>;
        ErrorDetection: t.Type<number, number, unknown>;
        GhostElimination: t.Type<number, number, unknown>;
        DetectionEable: t.Type<number, number, unknown>;
        FirstCompsentionTwo: t.Type<number, number, unknown>;
        CurrentPoint: t.Type<number, number, unknown>;
        OpenUpTime: t.Type<number, number, unknown>;
        PDMOpenTime: t.Type<number, number, unknown>;
        ParityTimeSet: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipFM6182ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6182RGBVExtendPropey">;
}>]>;
export interface ChipFM6182RGBVExtendPropey extends t.TypeOf<typeof ChipFM6182RGBVExtendPropey> {
    RedProperty?: ChipFM6182ExtendProperty;
    GreenProperty?: ChipFM6182ExtendProperty;
    BlueProperty?: ChipFM6182ExtendProperty;
    VRedProperty?: ChipFM6182ExtendProperty;
}

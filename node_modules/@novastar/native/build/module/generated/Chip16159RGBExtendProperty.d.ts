import * as t from 'io-ts';
import { Chip16159ExtendProperty } from './Chip16159ExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip16159RGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:48942
 */
export declare const Chip16159RGBExtendProperty: t.IntersectionC<[t.TypeC<{
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        EliminateAfterLowGrade: t.Type<number, number, unknown>;
        DimCompensation: t.Type<number, number, unknown>;
        LowAshImprovement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LowAshImprovement1: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip16159ExtendProperty">;
    }>]>;
    IsOpenTest: t.Type<boolean, boolean, unknown>;
    OpenTestGrade: t.Type<number, number, unknown>;
}>]>;
export interface Chip16159RGBExtendProperty extends t.TypeOf<typeof Chip16159RGBExtendProperty> {
    RedProperty?: Chip16159ExtendProperty;
    GreenProperty?: Chip16159ExtendProperty;
    BlueProperty?: Chip16159ExtendProperty;
    VRedProperty?: Chip16159ExtendProperty;
}

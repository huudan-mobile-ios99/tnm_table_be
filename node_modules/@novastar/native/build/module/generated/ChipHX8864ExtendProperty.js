import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipHX8864ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        FirstRegValue: common.UInt16,
        SecondRegValue: common.UInt16,
        ThirdRegValue: common.UInt16,
        FourthRegValue: common.UInt16,
        FifthRegValue: common.UInt16,
        SixthRegValue: common.UInt16,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        LowGreyOrderOptModel: common.UInt8,
        LowGreyOrderOpt2: common.UInt8,
        CouplingStartTime: common.UInt8,
        CurrentGain: common.UInt16,
        ErrorCurrentGain: common.UInt16,
        InflectionPointVoltage: common.UInt8,
        FirstLineCompensationTime: common.UInt8,
        ShadowEliminationTime: common.UInt8,
        FirstLineCompensationLevel: common.UInt8,
        ShadowEliminationLevel: common.UInt8,
        LowGrayColorCompensation: common.UInt8,
        CouplingOptimization1: common.UInt8,
        CouplingOptimization2Enable: common.Bool,
        CouplingOptimization2: common.UInt8,
        CouplingReguEnable: common.Bool,
        CouplingEnhan: common.UInt8,
    }),
], 'ChipHX8864ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipHX8864ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHX8864.decompiled.cs:7537
 */
export const ChipHX8864ExtendProperty = t.intersection([
    ChipHX8864ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipHX8864ExtendProperty') }),
], 'ChipHX8864ExtendProperty');
//# sourceMappingURL=ChipHX8864ExtendProperty.js.map
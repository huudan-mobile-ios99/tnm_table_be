import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ScanType } from './ScanType';
export const Chip16169sExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        FailureLEDEliminationGainLevel: common.UInt8_32,
    }),
    t.partial({
        GrayHorizontalStripesEliminateLow: common.Bool,
        LowGayCompensation: common.UInt8,
        FailureLEDElimination: common.Bool,
        OpenTestGrade: common.UInt8,
        ShadowVoltage: common.UInt8,
        IsClearGhostEnable: common.Bool,
        SubFields: common.UInt8,
        ScanType,
        GrayDepth: common.UInt8,
        LowGayCompensationEnhance: common.Bool,
        Gain: common.UInt8,
    }),
], 'Chip16169sExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link Chip16169sExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:51618
 */
export const Chip16169sExtendProperty = t.intersection([
    Chip16169sExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('Chip16169sExtendProperty') }),
], 'Chip16169sExtendProperty');
//# sourceMappingURL=Chip16169sExtendProperty.js.map
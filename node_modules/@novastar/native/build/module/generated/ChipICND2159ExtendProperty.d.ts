import * as t from 'io-ts';
export declare const ChipICND2159ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2159ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2159.decompiled.cs:6499
 */
export declare const ChipICND2159ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstRegValue: t.Type<number, number, unknown>;
    SecondRegValue: t.Type<number, number, unknown>;
    ThirdRegValue: t.Type<number, number, unknown>;
    FourthRegValue: t.Type<number, number, unknown>;
    LowAshPitsImprove: t.Type<number, number, unknown>;
    IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
    IsElimateShadow: t.Type<boolean, boolean, unknown>;
    LowGrayAdjustGrade: t.Type<number, number, unknown>;
    IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
    LowGrayCompensateGrade: t.Type<number, number, unknown>;
    IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
    FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
}>]>;
export interface ChipICND2159ExtendProperty extends t.TypeOf<typeof ChipICND2159ExtendProperty> {
}

import * as t from 'io-ts';
import { LEDDisplyTypeEnum } from './LEDDisplyType';
import { ScreenAdjustParams } from './ScreenAdjustParams';
import { VirtualModeTypeEnum } from './VirtualModeType';
/**
 * @category Codecs
 * @desc Codec for interface {@link StandardLEDDisplayInfo}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:54486
 */
export declare const StandardLEDDisplayInfo: t.IntersectionC<[t.TypeC<{
    ScanBoardCols: t.Type<number, number, unknown>;
    ScanBoardRows: t.Type<number, number, unknown>;
    ScannerRegionList: t.ArrayC<t.IntersectionC<[t.TypeC<{
        DviSelect: t.Type<import("./DviSelectMode").DviSelectModeEnum, "HDMI" | "DVI" | "SDI" | "DP" | "Dual_DVI" | "HDBaseT" | "LVDS", unknown>;
        DVIIndex: t.Type<number, number, unknown>;
        Width: t.Type<number, number, unknown>;
        Height: t.Type<number, number, unknown>;
        TagInfoColor: t.StringC;
    }>, t.PartialC<{
        XInPort: t.Type<number, number, unknown>;
        YInPort: t.Type<number, number, unknown>;
        SenderIndex: t.Type<number, number, unknown>;
        PortIndex: t.Type<number, number, unknown>;
        ConnectIndex: t.Type<number, number, unknown>;
        X: t.Type<number, number, unknown>;
        Y: t.Type<number, number, unknown>;
        IsHasMrvID: t.Type<boolean, boolean, unknown>;
        MrvID: t.StringC;
        FreeRoutConnect: t.Type<number, number, unknown>;
        MrvIDObject: t.UnknownRecordC;
        CabinetCorrectLocationSize: t.PartialC<{
            IsValid: t.Type<boolean, boolean, unknown>;
            StartCol: t.Type<number, number, unknown>;
            StartRow: t.Type<number, number, unknown>;
            Width: t.Type<number, number, unknown>;
            Height: t.Type<number, number, unknown>;
        }>;
        RowIndexInScreen: t.Type<number, number, unknown>;
        ColIndexInScreen: t.Type<number, number, unknown>;
        TagInfo: t.Type<boolean, boolean, unknown>;
    }>]>>;
}>, t.PartialC<{
    X: t.Type<number, number, unknown>;
    Y: t.Type<number, number, unknown>;
    DVIOffest: t.RecordC<t.Type<number, number, unknown>, t.Type<{
        x: number;
        y: number;
    }, `${bigint}, ${bigint}`, unknown>>;
    IsOpen18Bit: t.Type<boolean, boolean, unknown>;
    IsOpenClearview: t.Type<boolean, boolean, unknown>;
    Type: t.Type<LEDDisplyTypeEnum, "SimpleSingleType" | "StandardType" | "ComplexType", unknown>;
    VirtualMode: t.Type<VirtualModeTypeEnum, "Unknown" | "Disable" | "Led4Mode1" | "Led4Mode2" | "Led3" | "Led31", unknown>;
    ScannerCount: t.Type<number, number, unknown>;
    ScrAdjustParams: t.IntersectionC<[t.TypeC<{
        ScreenXScale: t.Type<number, number, unknown>;
        ScreenYScale: t.Type<number, number, unknown>;
        VirtualMap: t.Type<number, number, unknown>;
        ScreenName: t.StringC;
    }>, t.PartialC<{
        ScreenXZoomType: t.Type<import("./ZoomType").ZoomTypeEnum, "None" | "Enlarge" | "Reduce", unknown>;
        ScreenYZoomType: t.Type<import("./ZoomType").ZoomTypeEnum, "None" | "Enlarge" | "Reduce", unknown>;
        ThreeD: t.Type<number, number, unknown>;
    }>]>;
}>]>;
export interface StandardLEDDisplayInfo extends t.TypeOf<typeof StandardLEDDisplayInfo> {
    Type?: LEDDisplyTypeEnum;
    VirtualMode?: VirtualModeTypeEnum;
    ScrAdjustParams?: ScreenAdjustParams;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipCS2033ExtendProperty } from './ChipCS2033ExtendProperty';
export const ChipCS2033RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipCS2033ExtendProperty,
        GreenProperty: ChipCS2033ExtendProperty,
        BlueProperty: ChipCS2033ExtendProperty,
        VRedProperty: ChipCS2033ExtendProperty,
        EnGCLKMutiRate: common.Bool,
        SubField: common.UInt8,
        GrayDepth: common.UInt8,
        IsAdvancedMode: common.Bool,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
    }),
], 'ChipCS2033RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2033RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2033.decompiled.cs:3632
 */
export const ChipCS2033RGBVExtendProperty = t.intersection([
    ChipCS2033RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCS2033RGBVExtendProperty') }),
], 'ChipCS2033RGBVExtendProperty');
//# sourceMappingURL=ChipCS2033RGBVExtendProperty.js.map
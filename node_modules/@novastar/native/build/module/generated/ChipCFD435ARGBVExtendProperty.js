import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipCFD435AExtendProperty } from './ChipCFD435AExtendProperty';
export const ChipCFD435ARGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipCFD435AExtendProperty,
        GreenProperty: ChipCFD435AExtendProperty,
        BlueProperty: ChipCFD435AExtendProperty,
        VRedProperty: ChipCFD435AExtendProperty,
        EnGCLKMutiRate: common.Bool,
        SubField: common.UInt8,
        GrayDepth: common.UInt8,
        IsAdvancedMode: common.Bool,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
    }),
], 'ChipCFD435ARGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCFD435ARGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCFD435A.decompiled.cs:6479
 */
export const ChipCFD435ARGBVExtendProperty = t.intersection([
    ChipCFD435ARGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCFD435ARGBVExtendProperty') }),
], 'ChipCFD435ARGBVExtendProperty');
//# sourceMappingURL=ChipCFD435ARGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipICND2159ExtendProperty } from './ChipICND2159ExtendProperty';
export const ChipICND2159RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipICND2159ExtendProperty,
        GreenProperty: ChipICND2159ExtendProperty,
        BlueProperty: ChipICND2159ExtendProperty,
        VRedProperty: ChipICND2159ExtendProperty,
        IsUseNewModule: common.Bool,
        PartNumRef: common.UInt8,
        IsAdvancedMode: common.Bool,
        IsRemoveBad: common.Bool,
        IsRemoveBadEnhancedMode: common.Bool,
        EnhancedModeGrade: common.UInt8,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
    }),
], 'ChipICND2159RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2159RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2159.decompiled.cs:6691
 */
export const ChipICND2159RGBVExtendProperty = t.intersection([
    ChipICND2159RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2159RGBVExtendProperty') }),
], 'ChipICND2159RGBVExtendProperty');
//# sourceMappingURL=ChipICND2159RGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipTLC5948AExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RepeatDisplayMode: common.Bool_true,
        PWMDisplayMode: common.Int32_1,
    }),
    t.partial({
        IsAdvancedMode: common.Bool,
        OpenCheckVoltageRed: common.Int32,
        OpenCheckVoltageGreen: common.Int32,
        OpenCheckVoltageBlue: common.Int32,
        ShortCheckVoltageRed: common.Int32,
        ShortCheckVoltageGreen: common.Int32,
        ShortCheckVoltageBlue: common.Int32,
        HiddenCheck: common.Int32,
        CheckLostGain: common.Int32,
        GlobalBrightRed: common.Int32,
        GlobalBrightGreen: common.Int32,
        GlobalBrightBlue: common.Int32,
        RedRegValueConfigFirst: common.UInt16,
        GreenRegValueConfigFirst: common.UInt16,
        BlueRegValueConfigFirst: common.UInt16,
        VRedRegValueConfigFirst: common.UInt16,
        RedRegValueConfigSecond: common.UInt16,
        GreenRegValueConfigSecond: common.UInt16,
        BlueRegValueConfigSecond: common.UInt16,
        VRedRegValueConfigSecond: common.UInt16,
    }),
], 'ChipTLC5948AExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC5948AExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:43609
 */
export const ChipTLC5948AExtendProperty = t.intersection([
    ChipTLC5948AExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipTLC5948AExtendProperty') }),
], 'ChipTLC5948AExtendProperty');
//# sourceMappingURL=ChipTLC5948AExtendProperty.js.map
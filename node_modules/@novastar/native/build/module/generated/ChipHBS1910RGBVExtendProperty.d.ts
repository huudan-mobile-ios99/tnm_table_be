import * as t from 'io-ts';
import { ChipHBS1910ExtendProperty } from './ChipHBS1910ExtendProperty';
export declare const ChipHBS1910RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipHBS1910RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHBS1910.decompiled.cs:2600
 */
export declare const ChipHBS1910RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegFirst: t.Type<number, number, unknown>;
        RegSecond: t.Type<number, number, unknown>;
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        Gain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipHBS1910ExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHBS1910RGBVExtendProperty">;
}>]>;
export interface ChipHBS1910RGBVExtendProperty extends t.TypeOf<typeof ChipHBS1910RGBVExtendProperty> {
    RedProperty?: ChipHBS1910ExtendProperty;
    GreenProperty?: ChipHBS1910ExtendProperty;
    BlueProperty?: ChipHBS1910ExtendProperty;
    VRedProperty?: ChipHBS1910ExtendProperty;
}

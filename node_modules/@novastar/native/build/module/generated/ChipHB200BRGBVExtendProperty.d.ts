import * as t from 'io-ts';
export declare const ChipHB200BRGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    RedFirstReg4: t.Type<number, number, unknown>;
    GreenFirstReg4: t.Type<number, number, unknown>;
    BlueFirstReg4: t.Type<number, number, unknown>;
    VRedFirstReg4: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    HB200B_T1H: t.Type<number, number, unknown>;
    HB200B_T0H: t.Type<number, number, unknown>;
    HB200B_T: t.Type<number, number, unknown>;
    ChannelOpenDetectionEn: t.Type<boolean, boolean, unknown>;
    ChannelOpenDetection: t.Type<number, number, unknown>;
    WorkingMode: t.Type<number, number, unknown>;
    AntiInterferenceEn: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipHB200BRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHB200B.decompiled.cs:868
 */
export declare const ChipHB200BRGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    RedFirstReg3: t.Type<number, number, unknown>;
    GreenFirstReg3: t.Type<number, number, unknown>;
    BlueFirstReg3: t.Type<number, number, unknown>;
    VRedFirstReg3: t.Type<number, number, unknown>;
    RedFirstReg4: t.Type<number, number, unknown>;
    GreenFirstReg4: t.Type<number, number, unknown>;
    BlueFirstReg4: t.Type<number, number, unknown>;
    VRedFirstReg4: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    RedGian: t.Type<number, number, unknown>;
    GreenGian: t.Type<number, number, unknown>;
    BlueGian: t.Type<number, number, unknown>;
    HB200B_T1H: t.Type<number, number, unknown>;
    HB200B_T0H: t.Type<number, number, unknown>;
    HB200B_T: t.Type<number, number, unknown>;
    ChannelOpenDetectionEn: t.Type<boolean, boolean, unknown>;
    ChannelOpenDetection: t.Type<number, number, unknown>;
    WorkingMode: t.Type<number, number, unknown>;
    AntiInterferenceEn: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHB200BRGBVExtendProperty">;
}>]>;
export interface ChipHB200BRGBVExtendProperty extends t.TypeOf<typeof ChipHB200BRGBVExtendProperty> {
}

import * as t from 'io-ts';
import { Chip9748ExtendProperty } from './Chip9748ExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip9748RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:40424
 */
export declare const Chip9748RGBVExtendPropey: t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        LastGhostAbatement2: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        CurrentSet1: t.Type<number, number, unknown>;
        CurrentSet2: t.Type<number, number, unknown>;
        CurrentSet3: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        LowGrayscaleCompensation: t.Type<number, number, unknown>;
        FirstScanCompensation: t.Type<number, number, unknown>;
        CompensationMode: t.Type<number, number, unknown>;
        NextGhostAbatement: t.Type<number, number, unknown>;
        Adjustment: t.Type<number, number, unknown>;
        LastGhostAbatement1: t.Type<number, number, unknown>;
        FailureLEDElimination: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"Chip9748ExtendProperty">;
    }>]>;
    GrayscaleSelect: t.Type<number, number, unknown>;
    DummyGclkEn: t.Type<boolean, boolean, unknown>;
    RedGain: t.Type<number, number, unknown>;
    BlueGain: t.Type<number, number, unknown>;
    GreenGain: t.Type<number, number, unknown>;
    RedRegValueConfigThird: t.Type<number, number, unknown>;
    GreenRegValueConfigThird: t.Type<number, number, unknown>;
    BlueRegValueConfigThird: t.Type<number, number, unknown>;
    VRedRegValueConfigThird: t.Type<number, number, unknown>;
    RedRegValueConfigSpecial: t.Type<number, number, unknown>;
    GreenRegValueConfigSpecial: t.Type<number, number, unknown>;
    BlueRegValueConfigSpecial: t.Type<number, number, unknown>;
    VRedRegValueConfigSpecial: t.Type<number, number, unknown>;
}>;
export interface Chip9748RGBVExtendPropey extends t.TypeOf<typeof Chip9748RGBVExtendPropey> {
    RedProperty?: Chip9748ExtendProperty;
    GreenProperty?: Chip9748ExtendProperty;
    BlueProperty?: Chip9748ExtendProperty;
    VRedProperty?: Chip9748ExtendProperty;
}

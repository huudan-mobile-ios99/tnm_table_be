import * as t from 'io-ts';
import { FirstLineCompensationTypeEnum } from './FirstLineCompensationType';
export declare const Chip5152ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
    LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
    FirstLineCompensation: t.Type<FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
    EliminationGhost: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip5152ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:28116
 */
export declare const Chip5152ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    LowGrayCompensate1En: t.Type<boolean, boolean, unknown>;
    LowGrayCompensate2En: t.Type<boolean, boolean, unknown>;
    FirstLineCompensation: t.Type<FirstLineCompensationTypeEnum, "Closed" | "Effect1" | "Effect2" | "Effect3" | "Effect4" | "Effect5" | "Effect6" | "Effect7", unknown>;
    EliminationGhost: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5152ExtendProperty">;
}>]>;
export interface Chip5152ExtendProperty extends t.TypeOf<typeof Chip5152ExtendProperty> {
    FirstLineCompensation?: FirstLineCompensationTypeEnum;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipTLC5958ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        GlobalBrightness: common.UInt8_4,
        RedGain: common.UInt16_256,
        GreenGain: common.UInt16_256,
        BlueGain: common.UInt16_256,
        SetTD0: common.UInt8_1,
        CheckVoltageSetting: common.UInt8_1,
    }),
    t.partial({
        RedLowAshEnhancedControl: common.UInt8,
        GreenLowAshEnhancedControl: common.UInt8,
        BlueLowAshEnhancedControl: common.UInt8,
        TimingControl: common.Bool,
        ImproveTheLowAsh: common.UInt8,
        PWMModelSelecte: common.Bool,
        RedInhibitoryControlEMI: common.Bool,
        GreenInhibitoryControlEMI: common.Bool,
        BlueInhibitoryControlEMI: common.Bool,
        ChargingMode: common.Bool,
        EdgeSetGCLK: common.Bool,
        PowerSavingModeSettings: common.Bool,
    }),
], 'ChipTLC5958ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC5958ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:46152
 */
export const ChipTLC5958ExtendProperty = t.intersection([
    ChipTLC5958ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipTLC5958ExtendProperty') }),
], 'ChipTLC5958ExtendProperty');
//# sourceMappingURL=ChipTLC5958ExtendProperty.js.map
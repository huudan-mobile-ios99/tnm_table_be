import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipDP3230RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsOpenChannelCheck: common.Bool_false,
    }),
    t.partial({
        RedFirstReg1: common.UInt16,
        GreenFirstReg1: common.UInt16,
        BlueFirstReg1: common.UInt16,
        VRedFirstReg1: common.UInt16,
        RedFirstReg2: common.UInt16,
        GreenFirstReg2: common.UInt16,
        BlueFirstReg2: common.UInt16,
        VRedFirstReg2: common.UInt16,
        IsUseNewModule: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        IsAdvancedMode: common.Bool,
        VsCorner: common.UInt8,
        GlckSet: common.UInt8,
        DisshdEn: common.Bool,
        PwmAdd: common.Bool,
        PwmOpt: common.Bool,
        PowerSavePd: common.Bool,
        RZ_T1H: common.UInt16,
        RZ_T0H: common.UInt16,
        RZ_DCLK: common.UInt16,
    }),
], 'ChipDP3230RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3230RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3230.decompiled.cs:885
 */
export const ChipDP3230RGBVExtendProperty = t.intersection([
    ChipDP3230RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipDP3230RGBVExtendProperty') }),
], 'ChipDP3230RGBVExtendProperty');
//# sourceMappingURL=ChipDP3230RGBVExtendProperty.js.map
import * as t from 'io-ts';
export declare const ChipCNS7253ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    OPEN_DET: t.Type<boolean, boolean, unknown>;
    SCAN_LINE: t.Type<number, number, unknown>;
    PWM_OPT: t.Type<number, number, unknown>;
    GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
    PWM_GROUP: t.Type<number, number, unknown>;
    PWM_REV: t.Type<boolean, boolean, unknown>;
    PartNumPerRefValue: t.Type<number, number, unknown>;
    ADJ: t.Type<number, number, unknown>;
    IGAIN: t.Type<number, number, unknown>;
    ADJ_Enable: t.Type<boolean, boolean, unknown>;
    KeenPointVoltage: t.Type<number, number, unknown>;
    FirstLineOffsetCompensation: t.Type<number, number, unknown>;
    PWM_ALL: t.Type<number, number, unknown>;
    PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
    FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
    OPEN_RST: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCNS7253ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCNS7253.decompiled.cs:87
 */
export declare const ChipCNS7253ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RegFirst: t.Type<number, number, unknown>;
    RegSecond: t.Type<number, number, unknown>;
    RegThird: t.Type<number, number, unknown>;
    RegFourth: t.Type<number, number, unknown>;
    OPEN_DET: t.Type<boolean, boolean, unknown>;
    SCAN_LINE: t.Type<number, number, unknown>;
    PWM_OPT: t.Type<number, number, unknown>;
    GCLK_DOUBLE: t.Type<boolean, boolean, unknown>;
    PWM_GROUP: t.Type<number, number, unknown>;
    PWM_REV: t.Type<boolean, boolean, unknown>;
    PartNumPerRefValue: t.Type<number, number, unknown>;
    ADJ: t.Type<number, number, unknown>;
    IGAIN: t.Type<number, number, unknown>;
    ADJ_Enable: t.Type<boolean, boolean, unknown>;
    KeenPointVoltage: t.Type<number, number, unknown>;
    FirstLineOffsetCompensation: t.Type<number, number, unknown>;
    PWM_ALL: t.Type<number, number, unknown>;
    PWM_ALL_Enable: t.Type<boolean, boolean, unknown>;
    FirstLineOffsetCompensation_Enable: t.Type<boolean, boolean, unknown>;
    OPEN_RST: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCNS7253ExtendProperty">;
}>]>;
export interface ChipCNS7253ExtendProperty extends t.TypeOf<typeof ChipCNS7253ExtendProperty> {
}

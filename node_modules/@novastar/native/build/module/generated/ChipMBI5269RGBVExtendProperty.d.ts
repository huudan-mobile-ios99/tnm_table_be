import * as t from 'io-ts';
import { ChipMBI5269ExtendProperty } from './ChipMBI5269ExtendProperty';
export declare const ChipMBI5269RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    HighAshouplingLevel: t.Type<number, number, unknown>;
    HighAshouplingFront: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    P: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5269RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5269.decompiled.cs:5919
 */
export declare const ChipMBI5269RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensationMode: t.Type<number, number, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5269ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    HighAshouplingLevel: t.Type<number, number, unknown>;
    HighAshouplingFront: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    P: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5269RGBVExtendProperty">;
}>]>;
export interface ChipMBI5269RGBVExtendProperty extends t.TypeOf<typeof ChipMBI5269RGBVExtendProperty> {
    RedProperty?: ChipMBI5269ExtendProperty;
    GreenProperty?: ChipMBI5269ExtendProperty;
    BlueProperty?: ChipMBI5269ExtendProperty;
    VRedProperty?: ChipMBI5269ExtendProperty;
}

import * as t from 'io-ts';
export declare const ChipMY9366ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RIsClearGhost: t.Type<boolean, boolean, unknown>;
    GIsClearGhost: t.Type<boolean, boolean, unknown>;
    BIsClearGhost: t.Type<boolean, boolean, unknown>;
    VRIsClearGhost: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RFirstScancompensation: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    BFirstScancompensation: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    RSmallAdjust: t.Type<number, number, unknown>;
    GSmallAdjust: t.Type<number, number, unknown>;
    BSmallAdjust: t.Type<number, number, unknown>;
    VRSmallAdjust: t.Type<number, number, unknown>;
    RCurrentCompensation: t.Type<boolean, boolean, unknown>;
    GCurrentCompensation: t.Type<boolean, boolean, unknown>;
    BCurrentCompensation: t.Type<boolean, boolean, unknown>;
    VRCurrentCompensation: t.Type<boolean, boolean, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMY9366ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:48073
 */
export declare const ChipMY9366ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RIsClearGhost: t.Type<boolean, boolean, unknown>;
    GIsClearGhost: t.Type<boolean, boolean, unknown>;
    BIsClearGhost: t.Type<boolean, boolean, unknown>;
    VRIsClearGhost: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RFirstScancompensation: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    BFirstScancompensation: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    RSmallAdjust: t.Type<number, number, unknown>;
    GSmallAdjust: t.Type<number, number, unknown>;
    BSmallAdjust: t.Type<number, number, unknown>;
    VRSmallAdjust: t.Type<number, number, unknown>;
    RCurrentCompensation: t.Type<boolean, boolean, unknown>;
    GCurrentCompensation: t.Type<boolean, boolean, unknown>;
    BCurrentCompensation: t.Type<boolean, boolean, unknown>;
    VRCurrentCompensation: t.Type<boolean, boolean, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMY9366ExtendProperty">;
}>]>;
export interface ChipMY9366ExtendProperty extends t.TypeOf<typeof ChipMY9366ExtendProperty> {
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipMY9366ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RIsClearGhost: common.Bool_true,
        GIsClearGhost: common.Bool_true,
        BIsClearGhost: common.Bool_true,
        VRIsClearGhost: common.Bool_true,
    }),
    t.partial({
        RFirstScancompensation: common.UInt8,
        GFirstScancompensation: common.UInt8,
        BFirstScancompensation: common.UInt8,
        VRFirstScancompensation: common.UInt8,
        RSmallAdjust: common.UInt8,
        GSmallAdjust: common.UInt8,
        BSmallAdjust: common.UInt8,
        VRSmallAdjust: common.UInt8,
        RCurrentCompensation: common.Bool,
        GCurrentCompensation: common.Bool,
        BCurrentCompensation: common.Bool,
        VRCurrentCompensation: common.Bool,
        RLowGrayValue: common.UInt8,
        GLowGrayValue: common.UInt8,
        BLowGrayValue: common.UInt8,
        VRLowGrayValue: common.UInt8,
    }),
], 'ChipMY9366ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipMY9366ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:48073
 */
export const ChipMY9366ExtendProperty = t.intersection([
    ChipMY9366ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipMY9366ExtendProperty') }),
], 'ChipMY9366ExtendProperty');
//# sourceMappingURL=ChipMY9366ExtendProperty.js.map
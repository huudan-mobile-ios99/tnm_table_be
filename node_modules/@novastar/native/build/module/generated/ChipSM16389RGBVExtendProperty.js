import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipSM16389ExtendProperty } from './ChipSM16389ExtendProperty';
export const ChipSM16389RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_34,
    }),
    t.partial({
        RedProperty: ChipSM16389ExtendProperty,
        GreenProperty: ChipSM16389ExtendProperty,
        BlueProperty: ChipSM16389ExtendProperty,
        VRedProperty: ChipSM16389ExtendProperty,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        IsAdvancedMode: common.Bool,
        TestGain: common.UInt8,
        IsErrOpen: common.Bool,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
        LittlePeriodCount: common.UInt8,
        RefreshMagnificationP1: common.UInt8,
        RefreshMagnificationP2: common.UInt8,
        RefreshMagnificationP3: common.UInt8,
        LineScanGrayScale: common.Int32,
    }),
], 'ChipSM16389RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16389RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16389.decompiled.cs:1321
 */
export const ChipSM16389RGBVExtendProperty = t.intersection([
    ChipSM16389RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSM16389RGBVExtendProperty') }),
], 'ChipSM16389RGBVExtendProperty');
//# sourceMappingURL=ChipSM16389RGBVExtendProperty.js.map
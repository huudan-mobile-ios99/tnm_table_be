import * as t from 'io-ts';
import { ChipMBI5268ExtendProperty } from './ChipMBI5268ExtendProperty';
import { PointDetectParameter } from './PointDetectParameter';
export declare const ChipMBI5268RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsGrayEnhncedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("./DetectPointType").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("./ThresholdType").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("./RegisterGroupType").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5268RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5268.decompiled.cs:8740
 */
export declare const ChipMBI5268RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        REG_LENGTH: t.Type<number, number, unknown>;
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        DarkBlockCompensationOneEn: t.Type<boolean, boolean, unknown>;
        DarkBlockCompensationOne: t.Type<number, number, unknown>;
        DarkBlockCompensationTwo: t.Type<number, number, unknown>;
        DarkBlockCompensationThree: t.Type<number, number, unknown>;
        FirstSweepEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstSweepElimination: t.Type<number, number, unknown>;
        UnderEliminateGhost: t.Type<number, number, unknown>;
        GrayHorizontalStripesEliminateEn: t.Type<boolean, boolean, unknown>;
        LowAshColorCastCompensation: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation1: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation2: t.Type<number, number, unknown>;
        AdvancedRLowAshColorCastCompensation3: t.Type<number, number, unknown>;
        GradientCompensationEnable: t.Type<boolean, boolean, unknown>;
        LowAshUniformityImproved1: t.Type<number, number, unknown>;
        LowAshUniformityImproved2: t.Type<number, number, unknown>;
        DislodgeBadPointsGrade: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        VrextVoltageEnable: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipMBI5268ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    FailureLEDElimination: t.Type<boolean, boolean, unknown>;
    GclkAddedNumer: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    CompsentionTime: t.Type<number, number, unknown>;
    GradientTransitionOptimizationTime: t.Type<number, number, unknown>;
    M: t.Type<number, number, unknown>;
    N: t.Type<number, number, unknown>;
    Div: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsGrayEnhncedMode: t.Type<boolean, boolean, unknown>;
    DefaultRegisterType: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    PointDetectParameter: t.PartialC<{
        DetectType: t.Type<import("./DetectPointType").DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
        IsUseThreshold: t.Type<boolean, boolean, unknown>;
        Threshold: t.Type<import("./ThresholdType").ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
        ThresholdGradeCount: t.Type<number, number, unknown>;
        IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
        ConfigGroupType: t.Type<import("./RegisterGroupType").RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
        TheTallyMode: t.Type<number, number, unknown>;
        DetectTypeValue: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipMBI5268RGBVExtendProperty">;
}>]>;
export interface ChipMBI5268RGBVExtendProperty extends t.TypeOf<typeof ChipMBI5268RGBVExtendProperty> {
    RedProperty?: ChipMBI5268ExtendProperty;
    GreenProperty?: ChipMBI5268ExtendProperty;
    BlueProperty?: ChipMBI5268ExtendProperty;
    VRedProperty?: ChipMBI5268ExtendProperty;
    PointDetectParameter?: PointDetectParameter;
}

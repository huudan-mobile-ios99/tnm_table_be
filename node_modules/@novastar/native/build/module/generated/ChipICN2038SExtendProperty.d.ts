import * as t from 'io-ts';
export declare const ChipICN2038SExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RWhiteBalance: t.Type<number, number, unknown>;
    GWhiteBalance: t.Type<number, number, unknown>;
    BWhiteBalance: t.Type<number, number, unknown>;
    HandUpdata: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsDeadPix: t.Type<boolean, boolean, unknown>;
    RGainPoint: t.Type<number, number, unknown>;
    GGainPoint: t.Type<number, number, unknown>;
    BGainPoint: t.Type<number, number, unknown>;
    RConstantCurrent: t.Type<number, number, unknown>;
    GConstantCurrent: t.Type<number, number, unknown>;
    BConstantCurrent: t.Type<number, number, unknown>;
    ROESignalSelect: t.Type<number, number, unknown>;
    GOESignalSelect: t.Type<number, number, unknown>;
    BOESignalSelect: t.Type<number, number, unknown>;
    REnableSignalSelect: t.Type<boolean, boolean, unknown>;
    GEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    BEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    RDelayTime: t.Type<number, number, unknown>;
    GDelayTime: t.Type<number, number, unknown>;
    BDelayTime: t.Type<number, number, unknown>;
    RBlankingSignalSelect: t.Type<number, number, unknown>;
    GBlankingSignalSelect: t.Type<number, number, unknown>;
    BBlankingSignalSelect: t.Type<number, number, unknown>;
    RFallingTimeSelect: t.Type<number, number, unknown>;
    GFallingTimeSelect: t.Type<number, number, unknown>;
    BFallingTimeSelect: t.Type<number, number, unknown>;
    RLATCHSelect: t.Type<number, number, unknown>;
    GLATCHSelect: t.Type<number, number, unknown>;
    BLATCHSelect: t.Type<number, number, unknown>;
    RAMSelect: t.Type<number, number, unknown>;
    GAMSelect: t.Type<number, number, unknown>;
    BAMSelect: t.Type<number, number, unknown>;
    RAMSignalSelect: t.Type<boolean, boolean, unknown>;
    GAMSignalSelect: t.Type<boolean, boolean, unknown>;
    BAMSignalSelect: t.Type<boolean, boolean, unknown>;
    RCurrentRangSelect: t.Type<number, number, unknown>;
    GCurrentRangSelect: t.Type<number, number, unknown>;
    BCurrentRangSelect: t.Type<number, number, unknown>;
    RCLKtoSDOSelect: t.Type<number, number, unknown>;
    GCLKtoSDOSelect: t.Type<number, number, unknown>;
    BCLKtoSDOSelect: t.Type<number, number, unknown>;
    ROEWidthSelect: t.Type<number, number, unknown>;
    GOEWidthSelect: t.Type<number, number, unknown>;
    BOEWidthSelect: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    BlankingMode: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICN2038SExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:29185
 */
export declare const ChipICN2038SExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    RWhiteBalance: t.Type<number, number, unknown>;
    GWhiteBalance: t.Type<number, number, unknown>;
    BWhiteBalance: t.Type<number, number, unknown>;
    HandUpdata: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsDeadPix: t.Type<boolean, boolean, unknown>;
    RGainPoint: t.Type<number, number, unknown>;
    GGainPoint: t.Type<number, number, unknown>;
    BGainPoint: t.Type<number, number, unknown>;
    RConstantCurrent: t.Type<number, number, unknown>;
    GConstantCurrent: t.Type<number, number, unknown>;
    BConstantCurrent: t.Type<number, number, unknown>;
    ROESignalSelect: t.Type<number, number, unknown>;
    GOESignalSelect: t.Type<number, number, unknown>;
    BOESignalSelect: t.Type<number, number, unknown>;
    REnableSignalSelect: t.Type<boolean, boolean, unknown>;
    GEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    BEnableSignalSelect: t.Type<boolean, boolean, unknown>;
    RDelayTime: t.Type<number, number, unknown>;
    GDelayTime: t.Type<number, number, unknown>;
    BDelayTime: t.Type<number, number, unknown>;
    RBlankingSignalSelect: t.Type<number, number, unknown>;
    GBlankingSignalSelect: t.Type<number, number, unknown>;
    BBlankingSignalSelect: t.Type<number, number, unknown>;
    RFallingTimeSelect: t.Type<number, number, unknown>;
    GFallingTimeSelect: t.Type<number, number, unknown>;
    BFallingTimeSelect: t.Type<number, number, unknown>;
    RLATCHSelect: t.Type<number, number, unknown>;
    GLATCHSelect: t.Type<number, number, unknown>;
    BLATCHSelect: t.Type<number, number, unknown>;
    RAMSelect: t.Type<number, number, unknown>;
    GAMSelect: t.Type<number, number, unknown>;
    BAMSelect: t.Type<number, number, unknown>;
    RAMSignalSelect: t.Type<boolean, boolean, unknown>;
    GAMSignalSelect: t.Type<boolean, boolean, unknown>;
    BAMSignalSelect: t.Type<boolean, boolean, unknown>;
    RCurrentRangSelect: t.Type<number, number, unknown>;
    GCurrentRangSelect: t.Type<number, number, unknown>;
    BCurrentRangSelect: t.Type<number, number, unknown>;
    RCLKtoSDOSelect: t.Type<number, number, unknown>;
    GCLKtoSDOSelect: t.Type<number, number, unknown>;
    BCLKtoSDOSelect: t.Type<number, number, unknown>;
    ROEWidthSelect: t.Type<number, number, unknown>;
    GOEWidthSelect: t.Type<number, number, unknown>;
    BOEWidthSelect: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
    RedRegValueConfigSecond: t.Type<number, number, unknown>;
    GreenRegValueConfigSecond: t.Type<number, number, unknown>;
    BlueRegValueConfigSecond: t.Type<number, number, unknown>;
    VRedRegValueConfigSecond: t.Type<number, number, unknown>;
    BlankingMode: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICN2038SExtendProperty">;
}>]>;
export interface ChipICN2038SExtendProperty extends t.TypeOf<typeof ChipICN2038SExtendProperty> {
}

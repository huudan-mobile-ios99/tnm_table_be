import * as t from 'io-ts';
import { ChipICND2159ExtendProperty } from './ChipICND2159ExtendProperty';
export declare const ChipICND2159RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PartNumRef: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsRemoveBad: t.Type<boolean, boolean, unknown>;
    IsRemoveBadEnhancedMode: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2159RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2159.decompiled.cs:6691
 */
export declare const ChipICND2159RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        FirstRegValue: t.Type<number, number, unknown>;
        SecondRegValue: t.Type<number, number, unknown>;
        ThirdRegValue: t.Type<number, number, unknown>;
        FourthRegValue: t.Type<number, number, unknown>;
        LowAshPitsImprove: t.Type<number, number, unknown>;
        IsAberrationOptimize: t.Type<boolean, boolean, unknown>;
        IsElimateShadow: t.Type<boolean, boolean, unknown>;
        LowGrayAdjustGrade: t.Type<number, number, unknown>;
        IsLowGrayAdjust: t.Type<boolean, boolean, unknown>;
        LowGrayCompensateGrade: t.Type<number, number, unknown>;
        IsLowGrayCompensate: t.Type<boolean, boolean, unknown>;
        FirstLineSlantsDarkOpt: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipICND2159ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    PartNumRef: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsRemoveBad: t.Type<boolean, boolean, unknown>;
    IsRemoveBadEnhancedMode: t.Type<boolean, boolean, unknown>;
    EnhancedModeGrade: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2159RGBVExtendProperty">;
}>]>;
export interface ChipICND2159RGBVExtendProperty extends t.TypeOf<typeof ChipICND2159RGBVExtendProperty> {
    RedProperty?: ChipICND2159ExtendProperty;
    GreenProperty?: ChipICND2159ExtendProperty;
    BlueProperty?: ChipICND2159ExtendProperty;
    VRedProperty?: ChipICND2159ExtendProperty;
}

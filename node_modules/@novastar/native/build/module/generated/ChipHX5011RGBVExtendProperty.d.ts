import * as t from 'io-ts';
export declare const ChipHX5011RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    WorkPattern: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipHX5011RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipHX5011.decompiled.cs:859
 */
export declare const ChipHX5011RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    RefreshRate: t.Type<number, number, unknown>;
    WorkPattern: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipHX5011RGBVExtendProperty">;
}>]>;
export interface ChipHX5011RGBVExtendProperty extends t.TypeOf<typeof ChipHX5011RGBVExtendProperty> {
}

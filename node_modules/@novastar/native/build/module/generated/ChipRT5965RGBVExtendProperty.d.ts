import * as t from 'io-ts';
import { ChipRT5965ExtendProperty } from './ChipRT5965ExtendProperty';
export declare const ChipRT5965RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    BitMode: t.Type<boolean, boolean, unknown>;
    OpenCircuitDetectionEn: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipRT5965RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipRT5965.decompiled.cs:1202
 */
export declare const ChipRT5965RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        FirstReg: t.Type<number, number, unknown>;
        SecondReg: t.Type<number, number, unknown>;
        ThirdReg: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
        CouplingEliminationLevel: t.Type<number, number, unknown>;
        CouplingEliminationEn: t.Type<boolean, boolean, unknown>;
        FirstScanDarkEliminationLevel: t.Type<number, number, unknown>;
        LowCompsentionOne: t.Type<number, number, unknown>;
        LowCompsentionTwo: t.Type<number, number, unknown>;
        GhostEliminationLevel: t.Type<number, number, unknown>;
        ShadowEhancedModeEn: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        OpenCircuitDetectionLevel: t.Type<number, number, unknown>;
        PowerSavingModeEn: t.Type<boolean, boolean, unknown>;
        ChannelPowerSavingModeEn: t.Type<boolean, boolean, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipRT5965ExtendProperty">;
    }>]>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    ScanCount: t.Type<number, number, unknown>;
    SubField: t.Type<number, number, unknown>;
    BitMode: t.Type<boolean, boolean, unknown>;
    OpenCircuitDetectionEn: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipRT5965RGBVExtendProperty">;
}>]>;
export interface ChipRT5965RGBVExtendProperty extends t.TypeOf<typeof ChipRT5965RGBVExtendProperty> {
    RedProperty?: ChipRT5965ExtendProperty;
    GreenProperty?: ChipRT5965ExtendProperty;
    BlueProperty?: ChipRT5965ExtendProperty;
    VRedProperty?: ChipRT5965ExtendProperty;
}

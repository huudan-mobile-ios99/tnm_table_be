import * as t from 'io-ts';
import { DetectPointTypeEnum } from './DetectPointType';
import { RegisterGroupTypeEnum } from './RegisterGroupType';
import { ThresholdTypeEnum } from './ThresholdType';
/**
 * @category Codecs
 * @desc Codec for interface {@link PointDetectParameter}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:741
 */
export declare const PointDetectParameter: t.PartialC<{
    DetectType: t.Type<DetectPointTypeEnum, "None" | "EarlyDeath" | "OpenCircuit" | "ShortCircuit" | "BothDivision" | "BothNoDivision" | "FourTypesCircuit" | "FiveTypesAllIn", unknown>;
    IsUseThreshold: t.Type<boolean, boolean, unknown>;
    Threshold: t.Type<ThresholdTypeEnum, "None" | "Grade1" | "Grade2" | "Grade3" | "Grade4" | "Grade5" | "Grade6" | "Grade7" | "Grade8", unknown>;
    ThresholdGradeCount: t.Type<number, number, unknown>;
    IsNeedConfigRegister: t.Type<boolean, boolean, unknown>;
    ConfigGroupType: t.Type<RegisterGroupTypeEnum, "FirstGroup" | "SecondGroup" | "ThirdGroup" | "FourthGroup" | "OldChipDefaultGroup" | "SpecialGroup", unknown>;
    TheTallyMode: t.Type<number, number, unknown>;
    DetectTypeValue: t.Type<number, number, unknown>;
}>;
export interface PointDetectParameter extends t.TypeOf<typeof PointDetectParameter> {
    DetectType?: DetectPointTypeEnum;
    Threshold?: ThresholdTypeEnum;
    ConfigGroupType?: RegisterGroupTypeEnum;
}

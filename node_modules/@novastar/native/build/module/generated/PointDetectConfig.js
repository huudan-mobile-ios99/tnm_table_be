import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipType } from './ChipType';
import { DetectPointType } from './DetectPointType';
import { ThresholdType } from './ThresholdType';
/**
 * @category Codecs
 * @desc Codec for interface {@link PointDetectConfig}
 * @see Automatically generated from ../decompiled/Nova.GigabitController.ProgramInnerData.decompiled.cs:497
 */
export const PointDetectConfig = t.intersection([
    t.type({
        ScreenSN: common.string_empty,
        ComPort: common.string_empty,
        ScreenIndex: common.Int32_0,
        ScreenChipType: common.withDefault(ChipType, 'Unknown'),
        DetectType: common.withDefault(DetectPointType, 'None'),
        DetectThreshold: common.withDefault(ThresholdType, 'None'),
        IsUseGain: common.Bool_true,
        DetectRedGainStep: common.Int32_32,
        DetectGreenGainStep: common.Int32_32,
        DetectBlueGainStep: common.Int32_32,
        IsSynchronousGain: common.Bool_true,
        IsUsedResistor: common.Bool_false,
        RedResistor: common.Int32_300,
        GreenResistor: common.Int32_300,
        BlueResistor: common.Int32_300,
    }),
    t.partial({}),
], 'PointDetectConfig');
//# sourceMappingURL=PointDetectConfig.js.map
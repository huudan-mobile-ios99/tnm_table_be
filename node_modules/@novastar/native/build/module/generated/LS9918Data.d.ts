import * as t from 'io-ts';
import * as common from '../lib/common';
/**
 * @category Codecs
 * @desc Codec for interface {@link LS9918Data}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:52158
 */
export declare const LS9918Data: t.IntersectionC<[t.TypeC<{
    BitsNum: t.Type<number, number, unknown>;
    SubFrameNum: t.Type<number, number, unknown>;
    FriedFreuquance: t.Type<number, number, unknown>;
    ShiftClockList: t.ArrayC<t.Type<number, number, unknown>>;
    StarRefreshRateList: t.ArrayC<t.Type<number, number, unknown>>;
    MaxRefreshRateList: t.ArrayC<t.Type<number, number, unknown>>;
    HighNumberList: t.ArrayC<t.Type<number, number, unknown>>;
    ModeList: t.ArrayC<t.StringC>;
}>, t.PartialC<{
    PmData: common.BufferFromBase64;
    DmFirstData: common.BufferFromBase64;
    DmSecondData: common.BufferFromBase64;
    DmThridData: common.BufferFromBase64;
    LS9918OEData: common.BufferFromBase64;
    Factor: t.Type<number, number, unknown>;
    FrequenceDivsion: t.Type<number, number, unknown>;
    SystemClock: t.Type<number, number, unknown>;
    ShiftClock: t.Type<number, number, unknown>;
    StarRefreshRate: t.Type<number, number, unknown>;
    MaxRefreshRate: t.Type<number, number, unknown>;
    HighNumber: t.Type<number, number, unknown>;
    BrightnessEfficiency: t.Type<number, number, unknown>;
    ShiftLenth: t.Type<number, number, unknown>;
    ScanType: t.Type<number, number, unknown>;
    GammaStartValue: t.Type<number, number, unknown>;
    GammaMaxValue: t.Type<number, number, unknown>;
    GammaShift: t.Type<number, number, unknown>;
    GameTable: common.BufferFromBase64;
    ContrastValue: t.Type<number, number, unknown>;
    MaxBrightness: t.Type<number, number, unknown>;
    RedJump: t.Type<number, number, unknown>;
    GreenJump: t.Type<number, number, unknown>;
    BlueJump: t.Type<number, number, unknown>;
    CompensateValue: t.Type<number, number, unknown>;
    MinWidth: t.Type<number, number, unknown>;
    ClockPhase: t.Type<number, number, unknown>;
    ShadowZone: t.Type<number, number, unknown>;
    RowShadow: t.Type<number, number, unknown>;
    LineCharge: t.Type<number, number, unknown>;
    ShadowThree: t.Type<number, number, unknown>;
    ModeValue: t.Type<number, number, unknown>;
    IsLineShadowOK: t.Type<boolean, boolean, unknown>;
    IsRowSwitch: t.Type<boolean, boolean, unknown>;
    SelectRowSwitch: t.Type<number, number, unknown>;
    Select32Port: t.Type<number, number, unknown>;
    FirstLine: t.Type<number, number, unknown>;
    RDataPhase: t.Type<number, number, unknown>;
    GDataPhase: t.Type<number, number, unknown>;
    BDataPhase: t.Type<number, number, unknown>;
}>]>;
export interface LS9918Data extends t.TypeOf<typeof LS9918Data> {
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipTLC59581ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        GlobalBrightness: common.UInt8_4,
        RedGain: common.UInt16_256,
        GreenGain: common.UInt16_256,
        BlueGain: common.UInt16_256,
        SetTD0: common.UInt8_1,
        GamaValue: common.UInt8_255,
        RedNegVoltageCtrl: common.UInt8_3,
        GreenNegVoltageCtrl: common.UInt8_3,
        BlueNegVoltageCtrl: common.UInt8_3,
    }),
    t.partial({
        RedInhibitoryControlEMI: common.Bool,
        GreenInhibitoryControlEMI: common.Bool,
        BlueInhibitoryControlEMI: common.Bool,
        PrechargeModeControl: common.UInt8,
        CaterpillarElimination: common.UInt8,
        EdgeSetGCLK: common.UInt8,
        PWMModelSelecte: common.Bool,
        RedInterference: common.UInt8,
        GreenInterference: common.UInt8,
        BlueInterference: common.UInt8,
        HardwarePar: common.UInt8,
        PowerSavingModeSettings: common.Bool,
        RedLowGrayscaleUniformity: common.UInt8,
        GreenLowGrayscaleUniformity: common.UInt8,
        BlueLowGrayscaleUniformity: common.UInt8,
        HighLightInterference: common.Bool,
    }),
], 'ChipTLC59581ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC59581ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:46466
 */
export const ChipTLC59581ExtendProperty = t.intersection([
    ChipTLC59581ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipTLC59581ExtendProperty') }),
], 'ChipTLC59581ExtendProperty');
//# sourceMappingURL=ChipTLC59581ExtendProperty.js.map
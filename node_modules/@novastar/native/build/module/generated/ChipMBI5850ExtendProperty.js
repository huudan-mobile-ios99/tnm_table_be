import * as t from 'io-ts';
import * as common from '../lib/common';
/**
 * @category Codecs
 * @desc Codec for interface {@link ChipMBI5850ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5850.decompiled.cs:702
 */
export const ChipMBI5850ExtendProperty = t.intersection([
    t.type({
        REG_NUMBER: common.withDefault(common.Int32, 24),
        MBI5850REG: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        GrayScale: common.UInt16,
        EnDoubleRefresh: common.Bool,
        BlankUnitNumPerScan: common.UInt16,
        ExcessiveTime: common.UInt16,
        RowChangePoint: common.UInt16,
        M: common.UInt16,
        N: common.UInt16,
        DVI: common.UInt16,
        ShowsTheGhostGear_R: common.UInt16,
        ShowsTheGhostGear_G: common.UInt16,
        ShowsTheGhostGear_B: common.UInt16,
        ShowsTheGeargradualGhost_R: common.UInt16,
        ShowsTheGeargradualGhost_G: common.UInt16,
        ShowsTheGeargradualGhost_B: common.UInt16,
        HiddenGhostGear_1_R: common.UInt16,
        HiddenGhostGear_1_G: common.UInt16,
        HiddenGhostGear_1_B: common.UInt16,
        HiddenGhostGear_2_R: common.UInt16,
        HiddenGhostGear_2_G: common.UInt16,
        HiddenGhostGear_2_B: common.UInt16,
        HiddenGhostGear_3_R: common.UInt16,
        HiddenGhostGear_3_G: common.UInt16,
        HiddenGhostGear_3_B: common.UInt16,
        LowAshCompensation_R: common.UInt16,
        LowAshCompensation_G: common.UInt16,
        LowAshCompensation_B: common.UInt16,
        FailureLEDElimination: common.Bool,
        DislodgeBadPointsGrade_R: common.UInt8,
        DislodgeBadPointsGrade_G: common.UInt8,
        DislodgeBadPointsGrade_B: common.UInt8,
        Gain_R: common.UInt16,
        Gain_G: common.UInt16,
        Gain_B: common.UInt16,
    }),
], 'ChipMBI5850ExtendProperty');
//# sourceMappingURL=ChipMBI5850ExtendProperty.js.map
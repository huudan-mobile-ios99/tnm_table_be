import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipSM16380ExtendProperty } from './ChipSM16380ExtendProperty';
export const ChipSM16380RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsAdvancedMode: common.Bool_true,
    }),
    t.partial({
        RedExtendProperty: ChipSM16380ExtendProperty,
        GreenExtendProperty: ChipSM16380ExtendProperty,
        BlueExtendProperty: ChipSM16380ExtendProperty,
        VRedExtendProperty: ChipSM16380ExtendProperty,
        IsUseNewModule: common.Bool,
        ScanCount: common.UInt8,
        MutiRate: common.UInt8,
        FailureEliminationEn: common.Bool,
        CurrentGainGrade: common.UInt8,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
    }),
], 'ChipSM16380RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16380RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16380.decompiled.cs:1196
 */
export const ChipSM16380RGBVExtendProperty = t.intersection([
    ChipSM16380RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSM16380RGBVExtendProperty') }),
], 'ChipSM16380RGBVExtendProperty');
//# sourceMappingURL=ChipSM16380RGBVExtendProperty.js.map
import * as t from 'io-ts';
export declare const ChipDP3230RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    VsCorner: t.Type<number, number, unknown>;
    GlckSet: t.Type<number, number, unknown>;
    DisshdEn: t.Type<boolean, boolean, unknown>;
    PwmAdd: t.Type<boolean, boolean, unknown>;
    PwmOpt: t.Type<boolean, boolean, unknown>;
    PowerSavePd: t.Type<boolean, boolean, unknown>;
    RZ_T1H: t.Type<number, number, unknown>;
    RZ_T0H: t.Type<number, number, unknown>;
    RZ_DCLK: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3230RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3230.decompiled.cs:885
 */
export declare const ChipDP3230RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    IsOpenChannelCheck: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    RedFirstReg1: t.Type<number, number, unknown>;
    GreenFirstReg1: t.Type<number, number, unknown>;
    BlueFirstReg1: t.Type<number, number, unknown>;
    VRedFirstReg1: t.Type<number, number, unknown>;
    RedFirstReg2: t.Type<number, number, unknown>;
    GreenFirstReg2: t.Type<number, number, unknown>;
    BlueFirstReg2: t.Type<number, number, unknown>;
    VRedFirstReg2: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    VsCorner: t.Type<number, number, unknown>;
    GlckSet: t.Type<number, number, unknown>;
    DisshdEn: t.Type<boolean, boolean, unknown>;
    PwmAdd: t.Type<boolean, boolean, unknown>;
    PwmOpt: t.Type<boolean, boolean, unknown>;
    PowerSavePd: t.Type<boolean, boolean, unknown>;
    RZ_T1H: t.Type<number, number, unknown>;
    RZ_T0H: t.Type<number, number, unknown>;
    RZ_DCLK: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3230RGBVExtendProperty">;
}>]>;
export interface ChipDP3230RGBVExtendProperty extends t.TypeOf<typeof ChipDP3230RGBVExtendProperty> {
}

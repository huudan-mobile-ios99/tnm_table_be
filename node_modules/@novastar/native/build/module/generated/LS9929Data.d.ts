import * as t from 'io-ts';
import * as common from '../lib/common';
/**
 * @category Codecs
 * @desc Codec for interface {@link LS9929Data}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:5021
 */
export declare const LS9929Data: t.IntersectionC<[t.TypeC<{
    BitsNum: t.Type<number, number, unknown>;
    SubFrameNum: t.Type<number, number, unknown>;
    FriedFreuquance: t.Type<number, number, unknown>;
    ShiftClockList: t.ArrayC<t.Type<number, number, unknown>>;
    StarRefreshRateList: t.ArrayC<t.Type<number, number, unknown>>;
    MaxRefreshRateList: t.ArrayC<t.Type<number, number, unknown>>;
    HighNumberList: t.ArrayC<t.Type<number, number, unknown>>;
    GammaValue: t.Type<number, number, unknown>;
    ModeList: t.ArrayC<t.StringC>;
    DutyRationList: t.ArrayC<t.Type<number, number, unknown>>;
    BankPresetList: t.ArrayC<t.StringC>;
    BankPresetStr: t.StringC;
    LineDutyCycleList: t.ArrayC<t.Type<number, number, unknown>>;
    Value3DMax: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RGBSQ: t.Type<number, number, unknown>;
    PmData: common.BufferFromBase64;
    DmFirstData: common.BufferFromBase64;
    DmSecondData: common.BufferFromBase64;
    DmThridData: common.BufferFromBase64;
    LS9929OEData: common.BufferFromBase64;
    Factor: t.Type<number, number, unknown>;
    FrequenceDivsion: t.Type<number, number, unknown>;
    SystemClock: t.Type<number, number, unknown>;
    ShiftClock: t.Type<number, number, unknown>;
    StarRefreshRate: t.Type<number, number, unknown>;
    MaxRefreshRate: t.Type<number, number, unknown>;
    HighNumber: t.Type<number, number, unknown>;
    PositiveScan: t.Type<number, number, unknown>;
    NegetiveScan: t.Type<number, number, unknown>;
    BrightnessEfficiency: t.Type<number, number, unknown>;
    ShiftLenth: t.Type<number, number, unknown>;
    ScanType: t.Type<number, number, unknown>;
    GammaStartValue: t.Type<number, number, unknown>;
    GammaMaxValue: t.Type<number, number, unknown>;
    GammaShift: t.Type<number, number, unknown>;
    GameTable: common.BufferFromBase64;
    ContrastValue: t.Type<number, number, unknown>;
    MaxBrightness: t.Type<number, number, unknown>;
    IsSimplyfy: t.Type<boolean, boolean, unknown>;
    RedJumpOne: t.Type<number, number, unknown>;
    RedJumpTwo: t.Type<number, number, unknown>;
    RedJumpThree: t.Type<number, number, unknown>;
    RedJumpFour: t.Type<number, number, unknown>;
    GreenJumpOne: t.Type<number, number, unknown>;
    GreenJumpTwo: t.Type<number, number, unknown>;
    GreenJumpThree: t.Type<number, number, unknown>;
    GreenJumpFour: t.Type<number, number, unknown>;
    BlueJumpOne: t.Type<number, number, unknown>;
    BlueJumpTwo: t.Type<number, number, unknown>;
    BlueJumpThree: t.Type<number, number, unknown>;
    BlueJumpFour: t.Type<number, number, unknown>;
    CompensateValue: t.Type<number, number, unknown>;
    MinWidth: t.Type<number, number, unknown>;
    OEHiLevel: t.Type<number, number, unknown>;
    OELoLevel: t.Type<number, number, unknown>;
    ClockPhase: t.Type<number, number, unknown>;
    ShadowZone: t.Type<number, number, unknown>;
    ShadowZeroVal0: t.Type<number, number, unknown>;
    ShadowZeroVal1: t.Type<number, number, unknown>;
    ShadowZeroVal2: t.Type<number, number, unknown>;
    RowShadow: t.Type<number, number, unknown>;
    LineCharge: t.Type<number, number, unknown>;
    ShadowThree: t.Type<number, number, unknown>;
    ErrorBegin: t.Type<number, number, unknown>;
    IsNewPcbVersion: t.Type<boolean, boolean, unknown>;
    ModeValue: t.Type<number, number, unknown>;
    IsLineShadowOK: t.Type<boolean, boolean, unknown>;
    IsRowSwitch: t.Type<boolean, boolean, unknown>;
    SelectRowSwitch: t.Type<number, number, unknown>;
    Select32Port: t.Type<number, number, unknown>;
    FirstLineRed: t.Type<number, number, unknown>;
    FirstLineGreen: t.Type<number, number, unknown>;
    FirstLineBlue: t.Type<number, number, unknown>;
    CurrentRed: t.Type<number, number, unknown>;
    CurrentGreen: t.Type<number, number, unknown>;
    CurrentBlue: t.Type<number, number, unknown>;
    RDataPhase: t.Type<number, number, unknown>;
    GDataPhase: t.Type<number, number, unknown>;
    BDataPhase: t.Type<number, number, unknown>;
    HighFrequenceStatus: t.Type<number, number, unknown>;
    Mode9739: t.Type<number, number, unknown>;
    PassThroughMode: t.Type<number, number, unknown>;
    FixValue: t.Type<number, number, unknown>;
    ROScale: t.Type<number, number, unknown>;
    ColEliminateUpPointOne: t.Type<number, number, unknown>;
    ColEliminateUpPointTwo: t.Type<number, number, unknown>;
    ColEliminateUpPointThree: t.Type<number, number, unknown>;
    ColUpVoltageOne: t.Type<number, number, unknown>;
    ColUpVoltageTwo: t.Type<number, number, unknown>;
    ColUpVoltageThree: t.Type<number, number, unknown>;
    CurrentThresholdVoltateOne: t.Type<number, number, unknown>;
    CurrentThresholdVoltateTwo: t.Type<number, number, unknown>;
    CurrentThresholdVoltateThree: t.Type<number, number, unknown>;
    ColUpDriveOne: t.Type<number, number, unknown>;
    ColUpDriveTwo: t.Type<number, number, unknown>;
    ColUpDriveThree: t.Type<number, number, unknown>;
    ModePinControlOne: t.Type<number, number, unknown>;
    ModePinControlTwo: t.Type<number, number, unknown>;
    ModePinControlThree: t.Type<number, number, unknown>;
    RowEliminateModeOne: t.Type<number, number, unknown>;
    RowEliminateModeTwo: t.Type<number, number, unknown>;
    RowEliminateModeThree: t.Type<number, number, unknown>;
    RowDownVoltagePointOne: t.Type<number, number, unknown>;
    RowDownVoltagePointTwo: t.Type<number, number, unknown>;
    RowDownVoltagePointThree: t.Type<number, number, unknown>;
    RowDownVoltageClampPointOne: t.Type<number, number, unknown>;
    RowDownVoltageClampPointTwo: t.Type<number, number, unknown>;
    RowDownVoltageClampPointThree: t.Type<number, number, unknown>;
    StartColorOne: t.Type<number, number, unknown>;
    StartColorTwo: t.Type<number, number, unknown>;
    StartColorThree: t.Type<number, number, unknown>;
    StartColorFour: t.Type<number, number, unknown>;
    StartScanOne: t.Type<number, number, unknown>;
    StartScanTwo: t.Type<number, number, unknown>;
    StartScanThree: t.Type<number, number, unknown>;
    StartScanFour: t.Type<number, number, unknown>;
    DutyRation: t.Type<number, number, unknown>;
    RowMergeMode: t.Type<number, number, unknown>;
    BankPreset: t.Type<number, number, unknown>;
    RowBankVoltageRed: t.Type<number, number, unknown>;
    RowBankVoltageGreen: t.Type<number, number, unknown>;
    RowBankVoltageBlue: t.Type<number, number, unknown>;
    BackMode: t.Type<number, number, unknown>;
    LineClockPhase: t.Type<number, number, unknown>;
    LineDutyCycle: t.Type<number, number, unknown>;
    LineOutPutDalay: t.Type<number, number, unknown>;
    TotalNumber: t.Type<number, number, unknown>;
    RowJiangPing: t.Type<number, number, unknown>;
    CurFlashIndex: t.Type<number, number, unknown>;
    CurFlashTotal: t.Type<number, number, unknown>;
    CurLeakageIndex: t.Type<number, number, unknown>;
    CurLeakageTotal: t.Type<number, number, unknown>;
    CurGrayIndex: t.Type<number, number, unknown>;
    CurGrayTotal: t.Type<number, number, unknown>;
    Value3D: t.Type<number, number, unknown>;
}>]>;
export interface LS9929Data extends t.TypeOf<typeof LS9929Data> {
}

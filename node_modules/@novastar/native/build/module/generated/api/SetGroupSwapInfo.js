import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetGroupSwapInfo(addr, portAddr, scanBoardAddr, bBroadcast, groupSwapInfo) {
    if (groupSwapInfo.length !== AddressMapping.GroupSwapInfoOccupancy)
        throw new TypeError(`Invalid buffer size: ${groupSwapInfo.length}`);
    const req = new Request(groupSwapInfo, bBroadcast, 'SetGroupSwapInfo');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.GroupSwapInfoAddr;
    return req;
}
Session.prototype.SetGroupSwapInfo = async function SetGroupSwapInfo(addr, portAddr, scanBoardAddr, bBroadcast, groupSwapInfo) {
    const req = createSetGroupSwapInfo(addr, portAddr, scanBoardAddr, bBroadcast, groupSwapInfo);
    await this.connection.send(req);
};
Session.prototype.trySetGroupSwapInfo = async function trySetGroupSwapInfo(addr, portAddr, scanBoardAddr, groupSwapInfo) {
    const req = createSetGroupSwapInfo(addr, portAddr, scanBoardAddr, false, groupSwapInfo);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetGroupSwapInfo.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, bBroadcast, LowAshCompensationOne5253Value) {
    const req = new Request([LowAshCompensationOne5253Value], bBroadcast, 'SetLowAshCompensationOne5253Value');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.LowAshCompensationOne5253Addr;
    return req;
}
Session.prototype.SetLowAshCompensationOne5253Value =
    async function SetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, bBroadcast, LowAshCompensationOne5253Value) {
        const req = createSetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, bBroadcast, LowAshCompensationOne5253Value);
        await this.connection.send(req);
    };
Session.prototype.trySetLowAshCompensationOne5253Value =
    async function trySetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, LowAshCompensationOne5253Value) {
        const req = createSetLowAshCompensationOne5253Value(addr, portAddr, scanBoardAddr, false, LowAshCompensationOne5253Value);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetLowAshCompensationOne5253Value.js.map
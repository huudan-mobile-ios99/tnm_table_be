import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createDistribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, bBroadcast, distribute_FPGADescription) {
    if (distribute_FPGADescription.length !== AddressMapping.Distribute_FPGADescriptionnOccupancy)
        throw new TypeError(`Invalid buffer size: ${distribute_FPGADescription.length}`);
    const req = new Request(distribute_FPGADescription, bBroadcast, 'Distribute_SetFuncCardFPGADescription');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = AddressMapping.Distribute_FPGADescriptionAddr;
    return req;
}
Session.prototype.Distribute_SetFuncCardFPGADescription =
    async function Distribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, bBroadcast, distribute_FPGADescription) {
        const req = createDistribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, bBroadcast, distribute_FPGADescription);
        await this.connection.send(req);
    };
Session.prototype.tryDistribute_SetFuncCardFPGADescription =
    async function tryDistribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, distribute_FPGADescription) {
        const req = createDistribute_SetFuncCardFPGADescription(addr, portAddr, distributeAddr, false, distribute_FPGADescription);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=Distribute_SetFuncCardFPGADescription.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, bBroadcast, customGammaConfigInfo) {
    const $data = encodeUIntLE(customGammaConfigInfo, AddressMapping.GammaConfigInfoOccupancy);
    const req = new Request($data, bBroadcast, 'SetCustomGammaConfigInfo');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.CustomGammaConfigInfoAddr;
    return req;
}
Session.prototype.SetCustomGammaConfigInfo = async function SetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, bBroadcast, customGammaConfigInfo) {
    const req = createSetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, bBroadcast, customGammaConfigInfo);
    await this.connection.send(req);
};
Session.prototype.trySetCustomGammaConfigInfo = async function trySetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, customGammaConfigInfo) {
    const req = createSetCustomGammaConfigInfo(addr, portAddr, scanBoardAddr, false, customGammaConfigInfo);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetCustomGammaConfigInfo.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig) {
    if (screenConfig.length !== AddressMapping.Sender_ScreenConfigFlagOccupancy)
        throw new TypeError(`Invalid buffer size: ${screenConfig.length}`);
    const req = new Request(screenConfig, bBroadcast, 'SetSender_ScreenConfigFlagSpace');
    req.destination = addr;
    req.address = AddressMapping.Sender_ScreenConfigFlagAddr;
    return req;
}
Session.prototype.SetSender_ScreenConfigFlagSpace = async function SetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig) {
    const req = createSetSender_ScreenConfigFlagSpace(addr, bBroadcast, screenConfig);
    await this.connection.send(req);
};
Session.prototype.trySetSender_ScreenConfigFlagSpace =
    async function trySetSender_ScreenConfigFlagSpace(addr, screenConfig) {
        const req = createSetSender_ScreenConfigFlagSpace(addr, false, screenConfig);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetSender_ScreenConfigFlagSpace.js.map
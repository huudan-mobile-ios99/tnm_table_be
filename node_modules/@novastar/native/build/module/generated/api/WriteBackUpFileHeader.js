import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteBackUpFileHeader(addr, bBroadcast, writeData) {
    if (writeData.length !== AddressMapping.BackUpFileHeaderAddrOccupancy)
        throw new TypeError(`Invalid buffer size: ${writeData.length}`);
    const req = new Request(writeData, bBroadcast, 'WriteBackUpFileHeader');
    req.destination = addr;
    req.address = AddressMapping.BackUpFileHeaderAddr;
    return req;
}
Session.prototype.WriteBackUpFileHeader = async function WriteBackUpFileHeader(addr, bBroadcast, writeData) {
    const req = createWriteBackUpFileHeader(addr, bBroadcast, writeData);
    await this.connection.send(req);
};
Session.prototype.tryWriteBackUpFileHeader = async function tryWriteBackUpFileHeader(addr, writeData) {
    const req = createWriteBackUpFileHeader(addr, false, writeData);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteBackUpFileHeader.js.map
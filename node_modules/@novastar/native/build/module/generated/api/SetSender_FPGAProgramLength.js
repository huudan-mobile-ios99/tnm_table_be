import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramLength) {
    const $data = encodeUIntLE(sender_FPGAProgramLength, AddressMapping.Sender_FPGAProgramLengthOccupancy);
    const req = new Request($data, bBroadcast, 'SetSender_FPGAProgramLength');
    req.destination = addr;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Sender_FPGAProgramLengthAddr;
    return req;
}
Session.prototype.SetSender_FPGAProgramLength = async function SetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramLength) {
    const req = createSetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramLength);
    await this.connection.send(req);
};
Session.prototype.trySetSender_FPGAProgramLength = async function trySetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, sender_FPGAProgramLength) {
    const req = createSetSender_FPGAProgramLength(addr, portAddr, scanBoardAddr, false, sender_FPGAProgramLength);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_FPGAProgramLength.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetEthernetPortScannerY(addr, bBroadcast, ethernetPortScannerY, portIndex, scannerIndex) {
    const $data = encodeUIntLE(ethernetPortScannerY, AddressMapping.EthernetPortScannerYOccupancy);
    const req = new Request($data, bBroadcast, 'SetEthernetPortScannerY');
    req.destination = addr;
    req.address =
        AddressMapping.EthernetPortOccupancy * portIndex +
            AddressMapping.EthernetPortScannerYAddr +
            AddressMapping.EthernetPortScannerYOccupancy +
            (AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
Session.prototype.SetEthernetPortScannerY = async function SetEthernetPortScannerY(addr, bBroadcast, ethernetPortScannerY, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerY(addr, bBroadcast, ethernetPortScannerY, portIndex, scannerIndex);
    await this.connection.send(req);
};
Session.prototype.trySetEthernetPortScannerY = async function trySetEthernetPortScannerY(addr, ethernetPortScannerY, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerY(addr, false, ethernetPortScannerY, portIndex, scannerIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetEthernetPortScannerY.js.map
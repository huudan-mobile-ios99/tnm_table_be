import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
    const req = new Request(AddressMapping.DistributeEthernetPortScannerYOccupancy, 'ReadDistributeEthernetPortScannerY');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address =
        AddressMapping.DistributeEthernetPortOccupancy * portIndex +
            AddressMapping.DistributeEthernetPortScannerYAddr +
            AddressMapping.DistributeEthernetPortScannerYOccupancy +
            (AddressMapping.DistributeEthernetPortScannerXOccupancy +
                AddressMapping.DistributeEthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
Session.prototype.ReadDistributeEthernetPortScannerY =
    async function ReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return decodeUIntLE(await this.connection.send(req));
    };
Session.prototype.tryReadDistributeEthernetPortScannerY =
    async function tryReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerY(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeEthernetPortScannerY.js.map
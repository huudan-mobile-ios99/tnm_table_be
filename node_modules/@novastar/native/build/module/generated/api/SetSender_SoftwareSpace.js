import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_SoftwareSpace(addr, bBroadcast, sender_SoftwareSpace, dataLength, addrOffset) {
    if (sender_SoftwareSpace.length !== dataLength)
        throw new TypeError(`Invalid buffer size: ${sender_SoftwareSpace.length}`);
    const req = new Request(sender_SoftwareSpace, bBroadcast, 'SetSender_SoftwareSpace');
    req.destination = addr;
    req.address = AddressMapping.Sender_SoftwareSpaceAddr + addrOffset;
    return req;
}
Session.prototype.SetSender_SoftwareSpace = async function SetSender_SoftwareSpace(addr, bBroadcast, sender_SoftwareSpace, dataLength, addrOffset) {
    const req = createSetSender_SoftwareSpace(addr, bBroadcast, sender_SoftwareSpace, dataLength, addrOffset);
    await this.connection.send(req);
};
Session.prototype.trySetSender_SoftwareSpace = async function trySetSender_SoftwareSpace(addr, sender_SoftwareSpace, dataLength, addrOffset) {
    const req = createSetSender_SoftwareSpace(addr, false, sender_SoftwareSpace, dataLength, addrOffset);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_SoftwareSpace.js.map
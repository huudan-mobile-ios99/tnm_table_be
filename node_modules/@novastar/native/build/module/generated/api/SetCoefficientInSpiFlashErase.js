import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientInSpiFlashErase) {
    const $data = encodeUIntLE(coefficientInSpiFlashErase, AddressMapping.CoefficientInSpiFlashEraseOccupancy);
    const req = new Request($data, bBroadcast, 'SetCoefficientInSpiFlashErase');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.CoefficientInSpiFlashEraseAddr;
    return req;
}
Session.prototype.SetCoefficientInSpiFlashErase = async function SetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientInSpiFlashErase) {
    const req = createSetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, bBroadcast, coefficientInSpiFlashErase);
    await this.connection.send(req);
};
Session.prototype.trySetCoefficientInSpiFlashErase =
    async function trySetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, coefficientInSpiFlashErase) {
        const req = createSetCoefficientInSpiFlashErase(addr, portAddr, scanBoardAddr, false, coefficientInSpiFlashErase);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetCoefficientInSpiFlashErase.js.map
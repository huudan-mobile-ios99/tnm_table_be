import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    if (data.length !== AddressMapping.SecondGroupRegistorRGBGainOccupancy)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new Request(data, bBroadcast, 'WriteSecGroupRegistorRGBGain');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.SecondGroupRegistorGainAddr;
    return req;
}
Session.prototype.WriteSecGroupRegistorRGBGain = async function WriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, bBroadcast, data) {
    const req = createWriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, bBroadcast, data);
    await this.connection.send(req);
};
Session.prototype.tryWriteSecGroupRegistorRGBGain = async function tryWriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, data) {
    const req = createWriteSecGroupRegistorRGBGain(addr, portAddr, scanBoardAddr, false, data);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteSecGroupRegistorRGBGain.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createRecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash) {
    const $data = encodeUIntLE(coefficientStore2SpiFlash, AddressMapping.CoefficientStore2SpiFlashOccupancy);
    const req = new Request($data, bBroadcast, 'RecoveryCoefficientStore2SpiFlash');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.RecoveryCoefficientStore2SpiFlashAddr;
    return req;
}
Session.prototype.RecoveryCoefficientStore2SpiFlash =
    async function RecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash) {
        const req = createRecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientStore2SpiFlash);
        await this.connection.send(req);
    };
Session.prototype.tryRecoveryCoefficientStore2SpiFlash =
    async function tryRecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, coefficientStore2SpiFlash) {
        const req = createRecoveryCoefficientStore2SpiFlash(addr, portAddr, scanBoardAddr, false, coefficientStore2SpiFlash);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=RecoveryCoefficientStore2SpiFlash.js.map
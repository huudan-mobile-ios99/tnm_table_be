import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, bBroadcast, outPutMode) {
    const $data = encodeUIntLE(outPutMode, AddressMapping.SymmetricalOutputModeOccupancy);
    const req = new Request($data, bBroadcast, 'SetSymmetricalOutputMode');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.SymmetricalOutputModeAddr;
    return req;
}
Session.prototype.SetSymmetricalOutputMode = async function SetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, bBroadcast, outPutMode) {
    const req = createSetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, bBroadcast, outPutMode);
    await this.connection.send(req);
};
Session.prototype.trySetSymmetricalOutputMode = async function trySetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, outPutMode) {
    const req = createSetSymmetricalOutputMode(addr, portAddr, scanBoardAddr, false, outPutMode);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSymmetricalOutputMode.js.map
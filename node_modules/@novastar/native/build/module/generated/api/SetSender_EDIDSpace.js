import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_EDIDSpace(addr, portAddr, scanBoardAddr, bBroadcast, Passward) {
    if (Passward.length !== AddressMapping.Sender_EDIDSpaceOccupancy)
        throw new TypeError(`Invalid buffer size: ${Passward.length}`);
    const req = new Request(Passward, bBroadcast, 'SetSender_EDIDSpace');
    req.destination = addr;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Sender_EDIDSpaceAddr;
    return req;
}
Session.prototype.SetSender_EDIDSpace = async function SetSender_EDIDSpace(addr, portAddr, scanBoardAddr, bBroadcast, Passward) {
    const req = createSetSender_EDIDSpace(addr, portAddr, scanBoardAddr, bBroadcast, Passward);
    await this.connection.send(req);
};
Session.prototype.trySetSender_EDIDSpace = async function trySetSender_EDIDSpace(addr, portAddr, scanBoardAddr, Passward) {
    const req = createSetSender_EDIDSpace(addr, portAddr, scanBoardAddr, false, Passward);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_EDIDSpace.js.map
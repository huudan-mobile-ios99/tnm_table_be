import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetCorrectionOnROELine(addr, portAddr, scanBoardAddr, bBroadcast, correctionInfo) {
    if (correctionInfo.length !== AddressMapping.CorrectionOnOccupancy)
        throw new TypeError(`Invalid buffer size: ${correctionInfo.length}`);
    const req = new Request(correctionInfo, bBroadcast, 'SetCorrectionOnROELine');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.CorrectionOnAddr;
    return req;
}
Session.prototype.SetCorrectionOnROELine = async function SetCorrectionOnROELine(addr, portAddr, scanBoardAddr, bBroadcast, correctionInfo) {
    const req = createSetCorrectionOnROELine(addr, portAddr, scanBoardAddr, bBroadcast, correctionInfo);
    await this.connection.send(req);
};
Session.prototype.trySetCorrectionOnROELine = async function trySetCorrectionOnROELine(addr, portAddr, scanBoardAddr, correctionInfo) {
    const req = createSetCorrectionOnROELine(addr, portAddr, scanBoardAddr, false, correctionInfo);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetCorrectionOnROELine.js.map
import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadEthernetPortScannerX(addr, portIndex, scannerIndex) {
    const req = new Request(AddressMapping.EthernetPortScannerXOccupancy, 'ReadEthernetPortScannerX');
    req.destination = addr;
    req.address =
        AddressMapping.EthernetPortOccupancy * portIndex +
            AddressMapping.EthernetPortScannerXAddr +
            (AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy) *
                scannerIndex +
            AddressMapping.EthernetPortScannerXOccupancy;
    return req;
}
Session.prototype.ReadEthernetPortScannerX = async function ReadEthernetPortScannerX(addr, portIndex, scannerIndex) {
    const req = createReadEthernetPortScannerX(addr, portIndex, scannerIndex);
    return decodeUIntLE(await this.connection.send(req));
};
Session.prototype.tryReadEthernetPortScannerX = async function tryReadEthernetPortScannerX(addr, portIndex, scannerIndex) {
    const req = createReadEthernetPortScannerX(addr, portIndex, scannerIndex);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadEthernetPortScannerX.js.map
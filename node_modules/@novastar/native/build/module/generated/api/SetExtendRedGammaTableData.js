import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, bBroadcast, data, is22Bit) {
    const req = new Request(data, bBroadcast, 'SetExtendRedGammaTableData');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ExtendRedGammaTableAddr;
    if (is22Bit) {
        req.address = AddressMapping.ExtendRedGammaTableAddr_22bit;
    }
    return req;
}
Session.prototype.SetExtendRedGammaTableData = async function SetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, bBroadcast, data, is22Bit) {
    const req = createSetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, bBroadcast, data, is22Bit);
    await this.connection.send(req);
};
Session.prototype.trySetExtendRedGammaTableData = async function trySetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, data, is22Bit) {
    const req = createSetExtendRedGammaTableData(addr, portAddr, scanBoardAddr, false, data, is22Bit);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetExtendRedGammaTableData.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetDriverType(addr, portAddr, scanBoardAddr, bBroadcast, driverType) {
    const $data = encodeUIntLE(driverType, AddressMapping.DriverTypeOccupancy);
    const req = new Request($data, bBroadcast, 'SetDriverType');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.DriverTypeAddr;
    return req;
}
Session.prototype.SetDriverType = async function SetDriverType(addr, portAddr, scanBoardAddr, bBroadcast, driverType) {
    const req = createSetDriverType(addr, portAddr, scanBoardAddr, bBroadcast, driverType);
    await this.connection.send(req);
};
Session.prototype.trySetDriverType = async function trySetDriverType(addr, portAddr, scanBoardAddr, driverType) {
    const req = createSetDriverType(addr, portAddr, scanBoardAddr, false, driverType);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetDriverType.js.map
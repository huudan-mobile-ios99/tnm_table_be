import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetDriverFucntion(addr, portAddr, scanBoardAddr, bBroadcast, driverFunc) {
    const $data = encodeUIntLE(driverFunc, AddressMapping.DriverFucntionOccupancy);
    const req = new Request($data, bBroadcast, 'SetDriverFucntion');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.DriverFucntionAddr;
    return req;
}
Session.prototype.SetDriverFucntion = async function SetDriverFucntion(addr, portAddr, scanBoardAddr, bBroadcast, driverFunc) {
    const req = createSetDriverFucntion(addr, portAddr, scanBoardAddr, bBroadcast, driverFunc);
    await this.connection.send(req);
};
Session.prototype.trySetDriverFucntion = async function trySetDriverFucntion(addr, portAddr, scanBoardAddr, driverFunc) {
    const req = createSetDriverFucntion(addr, portAddr, scanBoardAddr, false, driverFunc);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetDriverFucntion.js.map
import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr) {
    const req = new Request(AddressMapping.DisConnectRelayTemperatureOccupancy, 'ReadDisConnectRelayTemperature');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.DisConnectRelayTemperatureAddr;
    return req;
}
Session.prototype.ReadDisConnectRelayTemperature = async function ReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr) {
    const req = createReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr);
    return decodeUIntLE(await this.connection.send(req));
};
Session.prototype.tryReadDisConnectRelayTemperature =
    async function tryReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr) {
        const req = createReadDisConnectRelayTemperature(addr, portAddr, scanBoardAddr);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDisConnectRelayTemperature.js.map
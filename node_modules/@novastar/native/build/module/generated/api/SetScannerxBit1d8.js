import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScannerxBit1d8(addr, portAddr, scanBoardAddr, bBroadcast, da) {
    const req = new Request(da, bBroadcast, 'SetScannerxBit1d8');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerxbitTwinkleOptiAddr;
    return req;
}
Session.prototype.SetScannerxBit1d8 = async function SetScannerxBit1d8(addr, portAddr, scanBoardAddr, bBroadcast, da) {
    const req = createSetScannerxBit1d8(addr, portAddr, scanBoardAddr, bBroadcast, da);
    await this.connection.send(req);
};
Session.prototype.trySetScannerxBit1d8 = async function trySetScannerxBit1d8(addr, portAddr, scanBoardAddr, da) {
    const req = createSetScannerxBit1d8(addr, portAddr, scanBoardAddr, false, da);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScannerxBit1d8.js.map
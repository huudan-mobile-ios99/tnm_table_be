import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetPortEnable(addr, bBroadcast, portEnable, index) {
    const $data = encodeUIntLE(portEnable, AddressMapping.PortEnableOccupancy);
    const req = new Request($data, bBroadcast, 'SetPortEnable');
    req.destination = addr;
    req.address = 0;
    if (index >= AddressMapping.New32PortOccupancy) {
        req.address =
            AddressMapping.PortEnableNext32Addr +
                AddressMapping.PortOccupancy * (index - AddressMapping.New32PortOccupancy);
    }
    else if (index >= AddressMapping.New16PortOccupancy) {
        req.address =
            AddressMapping.PortEnableNext16Addr +
                AddressMapping.PortOccupancy * (index - AddressMapping.New16PortOccupancy);
    }
    else if (index >= AddressMapping.NewPortOccupancy) {
        req.address =
            AddressMapping.PortEnableNextAddr +
                AddressMapping.PortOccupancy * (index - AddressMapping.NewPortOccupancy);
    }
    else {
        req.address = AddressMapping.PortEnableAddr + AddressMapping.PortOccupancy * index;
    }
    return req;
}
Session.prototype.SetPortEnable = async function SetPortEnable(addr, bBroadcast, portEnable, index) {
    const req = createSetPortEnable(addr, bBroadcast, portEnable, index);
    await this.connection.send(req);
};
Session.prototype.trySetPortEnable = async function trySetPortEnable(addr, portEnable, index) {
    const req = createSetPortEnable(addr, false, portEnable, index);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetPortEnable.js.map
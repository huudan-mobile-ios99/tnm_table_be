import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_EnableSyncAndTotalData(addr, bBoradcast, data) {
    if (data.length !== AddressMapping.Sender_EnableSyncAndTotalDataOccupancy)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new Request(data, bBoradcast, 'SetSender_EnableSyncAndTotalData');
    req.destination = addr;
    req.address = AddressMapping.Sender_EnableSyncAndTotalDataAddr;
    return req;
}
Session.prototype.SetSender_EnableSyncAndTotalData =
    async function SetSender_EnableSyncAndTotalData(addr, bBoradcast, data) {
        const req = createSetSender_EnableSyncAndTotalData(addr, bBoradcast, data);
        await this.connection.send(req);
    };
Session.prototype.trySetSender_EnableSyncAndTotalData =
    async function trySetSender_EnableSyncAndTotalData(addr, data) {
        const req = createSetSender_EnableSyncAndTotalData(addr, false, data);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetSender_EnableSyncAndTotalData.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_EncryptKey(addr, bBroadcast, key) {
    if (key.length !== AddressMapping.Sender_EncryptKeyOccupancy)
        throw new TypeError(`Invalid buffer size: ${key.length}`);
    const req = new Request(key, bBroadcast, 'SetSender_EncryptKey');
    req.destination = addr;
    req.address = AddressMapping.Sender_EncryptKeyAddr;
    return req;
}
Session.prototype.SetSender_EncryptKey = async function SetSender_EncryptKey(addr, bBroadcast, key) {
    const req = createSetSender_EncryptKey(addr, bBroadcast, key);
    await this.connection.send(req);
};
Session.prototype.trySetSender_EncryptKey = async function trySetSender_EncryptKey(addr, key) {
    const req = createSetSender_EncryptKey(addr, false, key);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_EncryptKey.js.map
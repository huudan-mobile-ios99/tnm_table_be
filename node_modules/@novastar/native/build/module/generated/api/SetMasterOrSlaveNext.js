import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetMasterOrSlaveNext(addr, bBroadcast, masterOrSlaveBytes) {
    if (masterOrSlaveBytes.length !== AddressMapping.MasterOrSlaveOccupancy)
        throw new TypeError(`Invalid buffer size: ${masterOrSlaveBytes.length}`);
    const req = new Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlaveNext');
    req.destination = addr;
    req.address = AddressMapping.MasterOrSlaveNewAddr;
    return req;
}
Session.prototype.SetMasterOrSlaveNext = async function SetMasterOrSlaveNext(addr, bBroadcast, masterOrSlaveBytes) {
    const req = createSetMasterOrSlaveNext(addr, bBroadcast, masterOrSlaveBytes);
    await this.connection.send(req);
};
Session.prototype.trySetMasterOrSlaveNext = async function trySetMasterOrSlaveNext(addr, masterOrSlaveBytes) {
    const req = createSetMasterOrSlaveNext(addr, false, masterOrSlaveBytes);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetMasterOrSlaveNext.js.map
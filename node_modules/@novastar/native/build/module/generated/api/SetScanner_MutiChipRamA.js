import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    if (mutiChipRamA.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
    const req = new Request(mutiChipRamA, bBroadcast, 'SetScanner_MutiChipRamA');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_MutiChipRamAAddr;
    return req;
}
Session.prototype.SetScanner_MutiChipRamA = async function SetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    const req = createSetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_MutiChipRamA = async function trySetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, mutiChipRamA) {
    const req = createSetScanner_MutiChipRamA(addr, portAddr, scanBoardAddr, false, mutiChipRamA);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_MutiChipRamA.js.map
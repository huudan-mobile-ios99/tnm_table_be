import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientReloadFromSpiFlash) {
    const $data = encodeUIntLE(coefficientReloadFromSpiFlash, AddressMapping.CoefficientReloadFromSpiFlashOccupancy);
    const req = new Request($data, bBroadcast, 'SetCoefficientReloadFromSpiFlash');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.CoefficientReloadFromSpiFlashAddr;
    return req;
}
Session.prototype.SetCoefficientReloadFromSpiFlash =
    async function SetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientReloadFromSpiFlash) {
        const req = createSetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, coefficientReloadFromSpiFlash);
        await this.connection.send(req);
    };
Session.prototype.trySetCoefficientReloadFromSpiFlash =
    async function trySetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, coefficientReloadFromSpiFlash) {
        const req = createSetCoefficientReloadFromSpiFlash(addr, portAddr, scanBoardAddr, false, coefficientReloadFromSpiFlash);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetCoefficientReloadFromSpiFlash.js.map
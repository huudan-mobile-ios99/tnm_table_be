import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramEdition) {
    const $data = encodeUIntLE(scanner_FPGAProgramEdition, AddressMapping.Scanner_FPGAProgramEditionOccupancy);
    const req = new Request($data, bBroadcast, 'SetScanner_FPGAProgramEdition');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_FPGAProgramEditionAddr;
    return req;
}
Session.prototype.SetScanner_FPGAProgramEdition = async function SetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramEdition) {
    const req = createSetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, scanner_FPGAProgramEdition);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_FPGAProgramEdition =
    async function trySetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, scanner_FPGAProgramEdition) {
        const req = createSetScanner_FPGAProgramEdition(addr, portAddr, scanBoardAddr, false, scanner_FPGAProgramEdition);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetScanner_FPGAProgramEdition.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createFuncCard_SetFuncCardFPGADescription(addr, bBroadcast, funcCard_FPGADescription) {
    if (funcCard_FPGADescription.length !== AddressMapping.FuncCard_FPGADescriptionnOccupancy)
        throw new TypeError(`Invalid buffer size: ${funcCard_FPGADescription.length}`);
    const req = new Request(funcCard_FPGADescription, bBroadcast, 'FuncCard_SetFuncCardFPGADescription');
    req.destination = addr;
    req.address = AddressMapping.FuncCard_FPGADescriptionAddr;
    return req;
}
Session.prototype.FuncCard_SetFuncCardFPGADescription =
    async function FuncCard_SetFuncCardFPGADescription(addr, bBroadcast, funcCard_FPGADescription) {
        const req = createFuncCard_SetFuncCardFPGADescription(addr, bBroadcast, funcCard_FPGADescription);
        await this.connection.send(req);
    };
Session.prototype.tryFuncCard_SetFuncCardFPGADescription =
    async function tryFuncCard_SetFuncCardFPGADescription(addr, funcCard_FPGADescription) {
        const req = createFuncCard_SetFuncCardFPGADescription(addr, false, funcCard_FPGADescription);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=FuncCard_SetFuncCardFPGADescription.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
    const req = new Request(AddressMapping.DistributeEthernetPortScannerXOccupancy +
        AddressMapping.DistributeEthernetPortScannerYOccupancy, 'ReadDistributeEthernetPortScannerXY');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address =
        AddressMapping.DistributeEthernetPortOccupancy * portIndex +
            AddressMapping.DistributeEthernetPortScannerXAddr +
            (AddressMapping.DistributeEthernetPortScannerXOccupancy +
                AddressMapping.DistributeEthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
Session.prototype.ReadDistributeEthernetPortScannerXY =
    async function ReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return (await this.connection.send(req)).data;
    };
Session.prototype.tryReadDistributeEthernetPortScannerXY =
    async function tryReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerXY(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeEthernetPortScannerXY.js.map
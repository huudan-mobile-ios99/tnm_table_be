import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_RedundantStateSpace(addr, bBroadcast, redundantState) {
    if (redundantState.length !== AddressMapping.Sender_RedundantStateSpaceOccupancy)
        throw new TypeError(`Invalid buffer size: ${redundantState.length}`);
    const req = new Request(redundantState, bBroadcast, 'SetSender_RedundantStateSpace');
    req.destination = addr;
    req.address = AddressMapping.Sender_RedundantStateSpaceAddr;
    return req;
}
Session.prototype.SetSender_RedundantStateSpace = async function SetSender_RedundantStateSpace(addr, bBroadcast, redundantState) {
    const req = createSetSender_RedundantStateSpace(addr, bBroadcast, redundantState);
    await this.connection.send(req);
};
Session.prototype.trySetSender_RedundantStateSpace =
    async function trySetSender_RedundantStateSpace(addr, redundantState) {
        const req = createSetSender_RedundantStateSpace(addr, false, redundantState);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetSender_RedundantStateSpace.js.map
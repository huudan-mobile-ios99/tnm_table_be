import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetGamma(addr, portAddr, scanBoardAddr, bBroadcast, gamma) {
    const $data = encodeUIntLE(gamma, AddressMapping.GammaOccupancy);
    const req = new Request($data, bBroadcast, 'SetGamma');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.GammaAddr;
    return req;
}
Session.prototype.SetGamma = async function SetGamma(addr, portAddr, scanBoardAddr, bBroadcast, gamma) {
    const req = createSetGamma(addr, portAddr, scanBoardAddr, bBroadcast, gamma);
    await this.connection.send(req);
};
Session.prototype.trySetGamma = async function trySetGamma(addr, portAddr, scanBoardAddr, gamma) {
    const req = createSetGamma(addr, portAddr, scanBoardAddr, false, gamma);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetGamma.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteScannerResetEn(addr, portAddr, scanBoardAddr, bBroadcast, isOpen, length) {
    const $data = encodeUIntLE(!isOpen ? 4 : 5, AddressMapping.ResetEnPointOccupancy);
    const req = new Request($data, bBroadcast, 'WriteScannerResetEn');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerResetEnAddr;
    return req;
}
Session.prototype.WriteScannerResetEn = async function WriteScannerResetEn(addr, portAddr, scanBoardAddr, bBroadcast, isOpen, length) {
    const req = createWriteScannerResetEn(addr, portAddr, scanBoardAddr, bBroadcast, isOpen, length);
    await this.connection.send(req);
};
Session.prototype.tryWriteScannerResetEn = async function tryWriteScannerResetEn(addr, portAddr, scanBoardAddr, isOpen, length) {
    const req = createWriteScannerResetEn(addr, portAddr, scanBoardAddr, false, isOpen, length);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteScannerResetEn.js.map
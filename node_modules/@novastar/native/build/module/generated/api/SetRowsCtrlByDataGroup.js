import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup) {
    if (countCtrlByDataGroup.length !==
        AddressMapping.RowsCtrlByDataGroupOccupancy * AddressMapping.RowsCtrlByDataGroupNum)
        throw new TypeError(`Invalid buffer size: ${countCtrlByDataGroup.length}`);
    const req = new Request(countCtrlByDataGroup, bBroadcast, 'SetRowsCtrlByDataGroup');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.RowsCtrlByDataGroupAddr;
    return req;
}
Session.prototype.SetRowsCtrlByDataGroup = async function SetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup) {
    const req = createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, countCtrlByDataGroup);
    await this.connection.send(req);
};
Session.prototype.trySetRowsCtrlByDataGroup = async function trySetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, countCtrlByDataGroup) {
    const req = createSetRowsCtrlByDataGroup(addr, portAddr, scanBoardAddr, false, countCtrlByDataGroup);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetRowsCtrlByDataGroup.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createDistribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, bBroadcast, mcuDescription) {
    if (mcuDescription.length !== AddressMapping.Distribute_MCUDescriptionOccupancy)
        throw new TypeError(`Invalid buffer size: ${mcuDescription.length}`);
    const req = new Request(mcuDescription, bBroadcast, 'Distribute_SetDistributeMCUDescription');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = AddressMapping.Distribute_MCUDescriptionAddr;
    return req;
}
Session.prototype.Distribute_SetDistributeMCUDescription =
    async function Distribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, bBroadcast, mcuDescription) {
        const req = createDistribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, bBroadcast, mcuDescription);
        await this.connection.send(req);
    };
Session.prototype.tryDistribute_SetDistributeMCUDescription =
    async function tryDistribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, mcuDescription) {
        const req = createDistribute_SetDistributeMCUDescription(addr, portAddr, distributeAddr, false, mcuDescription);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=Distribute_SetDistributeMCUDescription.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetConfigFileID(addr, portAddr, scanBoardAddr, bBroadcast, configFileID) {
    const $data = encodeUIntLE(configFileID, AddressMapping.ScannerConfigFileIDOccupancy);
    const req = new Request($data, bBroadcast, 'SetConfigFileID');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerConfigFileIDAddr;
    return req;
}
Session.prototype.SetConfigFileID = async function SetConfigFileID(addr, portAddr, scanBoardAddr, bBroadcast, configFileID) {
    const req = createSetConfigFileID(addr, portAddr, scanBoardAddr, bBroadcast, configFileID);
    await this.connection.send(req);
};
Session.prototype.trySetConfigFileID = async function trySetConfigFileID(addr, portAddr, scanBoardAddr, configFileID) {
    const req = createSetConfigFileID(addr, portAddr, scanBoardAddr, false, configFileID);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetConfigFileID.js.map
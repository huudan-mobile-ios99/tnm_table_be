import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createFuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, bBroadcast, powerCtrlMode, powerIndex) {
    const $data = encodeUIntLE(powerCtrlMode, AddressMapping.FuncCard_PowerPortCtrlOccupancy);
    const req = new Request($data, bBroadcast, 'FuncCard_SetPowerPortCtrl_1');
    req.destination = addr;
    req.deviceType = 2;
    req.port = portAddr;
    req.rcvIndex = funcCardAddr;
    req.address =
        AddressMapping.FuncCard_PowerPortCtrlAddr +
            powerIndex * AddressMapping.FuncCard_PowerPortCtrlOccupancy;
    return req;
}
Session.prototype.FuncCard_SetPowerPortCtrl_1 = async function FuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, bBroadcast, powerCtrlMode, powerIndex) {
    const req = createFuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, bBroadcast, powerCtrlMode, powerIndex);
    await this.connection.send(req);
};
Session.prototype.tryFuncCard_SetPowerPortCtrl_1 = async function tryFuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, powerCtrlMode, powerIndex) {
    const req = createFuncCard_SetPowerPortCtrl_1(addr, portAddr, funcCardAddr, false, powerCtrlMode, powerIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=FuncCard_SetPowerPortCtrl_1.js.map
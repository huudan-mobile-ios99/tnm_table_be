import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan) {
    const req = new Request(AddressMapping.Scanner_FanSpeedOfMonitorCardOccupancy * readCountOfFan, 'ReadFanSpeedOfMonitorCard');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address =
        AddressMapping.Scanner_FanSpeedOfMonitorCardAddr +
            AddressMapping.Scanner_FanSpeedOfMonitorCardOccupancy * beginIdnexOfFan;
    return req;
}
Session.prototype.ReadFanSpeedOfMonitorCard = async function ReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan) {
    const req = createReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan);
    return (await this.connection.send(req)).data;
};
Session.prototype.tryReadFanSpeedOfMonitorCard = async function tryReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan) {
    const req = createReadFanSpeedOfMonitorCard(addr, portAddr, scanBoardAddr, readCountOfFan, beginIdnexOfFan);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadFanSpeedOfMonitorCard.js.map
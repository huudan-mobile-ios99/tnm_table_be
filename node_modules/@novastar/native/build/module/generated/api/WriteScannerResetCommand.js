import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteScannerResetCommand(addr, portAddr, scanBoardAddr, bBroadcast, resetType) {
    const req = new Request([resetType], bBroadcast, 'WriteScannerResetCommand');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerResetAndSwitchAddr;
    return req;
}
Session.prototype.WriteScannerResetCommand = async function WriteScannerResetCommand(addr, portAddr, scanBoardAddr, bBroadcast, resetType) {
    const req = createWriteScannerResetCommand(addr, portAddr, scanBoardAddr, bBroadcast, resetType);
    await this.connection.send(req);
};
Session.prototype.tryWriteScannerResetCommand = async function tryWriteScannerResetCommand(addr, portAddr, scanBoardAddr, resetType) {
    const req = createWriteScannerResetCommand(addr, portAddr, scanBoardAddr, false, resetType);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteScannerResetCommand.js.map
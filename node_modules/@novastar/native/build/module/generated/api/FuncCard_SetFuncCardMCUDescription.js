import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createFuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription) {
    if (funcCard_MCUDescription.length !== AddressMapping.FuncCard_MCUDescriptionOccupancy)
        throw new TypeError(`Invalid buffer size: ${funcCard_MCUDescription.length}`);
    const req = new Request(funcCard_MCUDescription, bBroadcast, 'FuncCard_SetFuncCardMCUDescription');
    req.destination = addr;
    req.address = AddressMapping.FuncCard_MCUDescriptionAddr;
    return req;
}
Session.prototype.FuncCard_SetFuncCardMCUDescription =
    async function FuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription) {
        const req = createFuncCard_SetFuncCardMCUDescription(addr, bBroadcast, funcCard_MCUDescription);
        await this.connection.send(req);
    };
Session.prototype.tryFuncCard_SetFuncCardMCUDescription =
    async function tryFuncCard_SetFuncCardMCUDescription(addr, funcCard_MCUDescription) {
        const req = createFuncCard_SetFuncCardMCUDescription(addr, false, funcCard_MCUDescription);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=FuncCard_SetFuncCardMCUDescription.js.map
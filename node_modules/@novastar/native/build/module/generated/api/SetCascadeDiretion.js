import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetCascadeDiretion(addr, portAddr, scanBoardAddr, bBroadcast, cascadeDiretion) {
    const $data = encodeUIntLE(cascadeDiretion, AddressMapping.CascadeDiretionOccupancy);
    const req = new Request($data, bBroadcast, 'SetCascadeDiretion');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.CascadeDiretionAddr;
    return req;
}
Session.prototype.SetCascadeDiretion = async function SetCascadeDiretion(addr, portAddr, scanBoardAddr, bBroadcast, cascadeDiretion) {
    const req = createSetCascadeDiretion(addr, portAddr, scanBoardAddr, bBroadcast, cascadeDiretion);
    await this.connection.send(req);
};
Session.prototype.trySetCascadeDiretion = async function trySetCascadeDiretion(addr, portAddr, scanBoardAddr, cascadeDiretion) {
    const req = createSetCascadeDiretion(addr, portAddr, scanBoardAddr, false, cascadeDiretion);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetCascadeDiretion.js.map
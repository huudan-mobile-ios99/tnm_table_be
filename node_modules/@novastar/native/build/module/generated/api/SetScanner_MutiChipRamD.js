import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamD) {
    if (mutiChipRamD.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamD.length}`);
    const req = new Request(mutiChipRamD, bBroadcast, 'SetScanner_MutiChipRamD');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_MutiChipRamDAddr;
    return req;
}
Session.prototype.SetScanner_MutiChipRamD = async function SetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamD) {
    const req = createSetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamD);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_MutiChipRamD = async function trySetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, mutiChipRamD) {
    const req = createSetScanner_MutiChipRamD(addr, portAddr, scanBoardAddr, false, mutiChipRamD);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_MutiChipRamD.js.map
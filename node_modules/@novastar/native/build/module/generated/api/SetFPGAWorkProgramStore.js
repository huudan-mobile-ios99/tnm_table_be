import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, FPGAWorkProgramStore) {
    const $data = encodeUIntLE(FPGAWorkProgramStore, AddressMapping.FPGAWorkProgramStoreOccupancy);
    const req = new Request($data, bBroadcast, 'SetFPGAWorkProgramStore');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.FPGAWorkProgramStoreAddr;
    return req;
}
Session.prototype.SetFPGAWorkProgramStore = async function SetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, FPGAWorkProgramStore) {
    const req = createSetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, bBroadcast, FPGAWorkProgramStore);
    await this.connection.send(req);
};
Session.prototype.trySetFPGAWorkProgramStore = async function trySetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, FPGAWorkProgramStore) {
    const req = createSetFPGAWorkProgramStore(addr, portAddr, scanBoardAddr, false, FPGAWorkProgramStore);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetFPGAWorkProgramStore.js.map
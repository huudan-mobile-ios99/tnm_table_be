import { Request, Session } from '@novastar/codec';
export default function createWriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, bBroadcast, data, length, registerAddr) {
    if (data.length !== length)
        throw new TypeError(`Invalid buffer size: ${data.length}`);
    const req = new Request(data, bBroadcast, 'WriteCorrectionDataToScan');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = registerAddr;
    return req;
}
Session.prototype.WriteCorrectionDataToScan = async function WriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, bBroadcast, data, length, registerAddr) {
    const req = createWriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, bBroadcast, data, length, registerAddr);
    await this.connection.send(req);
};
Session.prototype.tryWriteCorrectionDataToScan = async function tryWriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, data, length, registerAddr) {
    const req = createWriteCorrectionDataToScan(addr, portAddr, scanBoardAddr, false, data, length, registerAddr);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteCorrectionDataToScan.js.map
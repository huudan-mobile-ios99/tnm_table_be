import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, parameterReloadFromSpiFlash) {
    const $data = encodeUIntLE(parameterReloadFromSpiFlash, AddressMapping.ParameterReloadFromSpiFlashOccupancy);
    const req = new Request($data, bBroadcast, 'SetParameterReloadFromSpiFlash');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ParameterReloadFromSpiFlashAddr;
    return req;
}
Session.prototype.SetParameterReloadFromSpiFlash = async function SetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, parameterReloadFromSpiFlash) {
    const req = createSetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, bBroadcast, parameterReloadFromSpiFlash);
    await this.connection.send(req);
};
Session.prototype.trySetParameterReloadFromSpiFlash =
    async function trySetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, parameterReloadFromSpiFlash) {
        const req = createSetParameterReloadFromSpiFlash(addr, portAddr, scanBoardAddr, false, parameterReloadFromSpiFlash);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetParameterReloadFromSpiFlash.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetEthernetPortScannerX(addr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
    const $data = encodeUIntLE(ethernetPortScannerX, AddressMapping.EthernetPortScannerXOccupancy);
    const req = new Request($data, bBroadcast, 'SetEthernetPortScannerX');
    req.destination = addr;
    req.address =
        AddressMapping.EthernetPortOccupancy * portIndex +
            AddressMapping.EthernetPortScannerXAddr +
            (AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy) *
                scannerIndex +
            AddressMapping.EthernetPortScannerXOccupancy;
    return req;
}
Session.prototype.SetEthernetPortScannerX = async function SetEthernetPortScannerX(addr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerX(addr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex);
    await this.connection.send(req);
};
Session.prototype.trySetEthernetPortScannerX = async function trySetEthernetPortScannerX(addr, ethernetPortScannerX, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerX(addr, false, ethernetPortScannerX, portIndex, scannerIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetEthernetPortScannerX.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetPortEnable_1(addr, bBroadcast, portEnable, portIndex) {
    if (portEnable.length !== AddressMapping.MasterOrSlaveSetOccupancy)
        throw new TypeError(`Invalid buffer size: ${portEnable.length}`);
    const req = new Request(portEnable, bBroadcast, 'SetPortEnable_1');
    req.destination = addr;
    req.address = AddressMapping.PortEnableAddr;
    return req;
}
Session.prototype.SetPortEnable_1 = async function SetPortEnable_1(addr, bBroadcast, portEnable, portIndex) {
    const req = createSetPortEnable_1(addr, bBroadcast, portEnable, portIndex);
    await this.connection.send(req);
};
Session.prototype.trySetPortEnable_1 = async function trySetPortEnable_1(addr, portEnable, portIndex) {
    const req = createSetPortEnable_1(addr, false, portEnable, portIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetPortEnable_1.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, startPositionOfDataGroup) {
    if (startPositionOfDataGroup.length !==
        AddressMapping.StartPositionOfDataGroupOccupancy * AddressMapping.StartPositionOfDataGroupNum)
        throw new TypeError(`Invalid buffer size: ${startPositionOfDataGroup.length}`);
    const req = new Request(startPositionOfDataGroup, bBroadcast, 'SetStartPositionOfDataGroup');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.StartPositionOfDataGroupAddr;
    return req;
}
Session.prototype.SetStartPositionOfDataGroup = async function SetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, startPositionOfDataGroup) {
    const req = createSetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, bBroadcast, startPositionOfDataGroup);
    await this.connection.send(req);
};
Session.prototype.trySetStartPositionOfDataGroup = async function trySetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, startPositionOfDataGroup) {
    const req = createSetStartPositionOfDataGroup(addr, portAddr, scanBoardAddr, false, startPositionOfDataGroup);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetStartPositionOfDataGroup.js.map
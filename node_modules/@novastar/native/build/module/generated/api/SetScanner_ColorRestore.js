import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_ColorRestore(addr, portAddr, scanBoardAddr, bBroadcast, colorRestore) {
    if (colorRestore.length !== AddressMapping.ColorRestoreOccupancy)
        throw new TypeError(`Invalid buffer size: ${colorRestore.length}`);
    const req = new Request(colorRestore, bBroadcast, 'SetScanner_ColorRestore');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ColorRestoreAddr;
    return req;
}
Session.prototype.SetScanner_ColorRestore = async function SetScanner_ColorRestore(addr, portAddr, scanBoardAddr, bBroadcast, colorRestore) {
    const req = createSetScanner_ColorRestore(addr, portAddr, scanBoardAddr, bBroadcast, colorRestore);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_ColorRestore = async function trySetScanner_ColorRestore(addr, portAddr, scanBoardAddr, colorRestore) {
    const req = createSetScanner_ColorRestore(addr, portAddr, scanBoardAddr, false, colorRestore);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_ColorRestore.js.map
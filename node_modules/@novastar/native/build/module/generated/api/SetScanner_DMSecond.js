import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_DMSecond(addr, portAddr, scanBoardAddr, bBroadcast, DMSecond) {
    if (DMSecond.length !== 0)
        throw new TypeError(`Invalid buffer size: ${DMSecond.length}`);
    const req = new Request(DMSecond, bBroadcast, 'SetScanner_DMSecond');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_DmSecondAddr;
    return req;
}
Session.prototype.SetScanner_DMSecond = async function SetScanner_DMSecond(addr, portAddr, scanBoardAddr, bBroadcast, DMSecond) {
    const req = createSetScanner_DMSecond(addr, portAddr, scanBoardAddr, bBroadcast, DMSecond);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_DMSecond = async function trySetScanner_DMSecond(addr, portAddr, scanBoardAddr, DMSecond) {
    const req = createSetScanner_DMSecond(addr, portAddr, scanBoardAddr, false, DMSecond);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_DMSecond.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, bBroadcast, genLinearTable) {
    const $data = encodeUIntLE(genLinearTable, AddressMapping.GenLinearScanBoardRunLineTableOccupancy);
    const req = new Request($data, bBroadcast, 'SetGenLinearScanBoardRunLineTable');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.GenLinearScanBoardRunLineTableAddr;
    return req;
}
Session.prototype.SetGenLinearScanBoardRunLineTable =
    async function SetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, bBroadcast, genLinearTable) {
        const req = createSetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, bBroadcast, genLinearTable);
        await this.connection.send(req);
    };
Session.prototype.trySetGenLinearScanBoardRunLineTable =
    async function trySetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, genLinearTable) {
        const req = createSetGenLinearScanBoardRunLineTable(addr, portAddr, scanBoardAddr, false, genLinearTable);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetGenLinearScanBoardRunLineTable.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteScannerMouldeState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    if (mutiChipRamA.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
    const req = new Request(mutiChipRamA, bBroadcast, 'WriteScannerMouldeState');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.SUM6060WriteMouldeStateAddr;
    return req;
}
Session.prototype.WriteScannerMouldeState = async function WriteScannerMouldeState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    const req = createWriteScannerMouldeState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA);
    await this.connection.send(req);
};
Session.prototype.tryWriteScannerMouldeState = async function tryWriteScannerMouldeState(addr, portAddr, scanBoardAddr, mutiChipRamA) {
    const req = createWriteScannerMouldeState(addr, portAddr, scanBoardAddr, false, mutiChipRamA);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteScannerMouldeState.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createDistribute_SetDistributeFPGALength(addr, portAddr, distributAddr, bBroadcast, fpgaLength) {
    const $data = encodeUIntLE(fpgaLength, AddressMapping.Distribute_FPGALengthOccupancy);
    const req = new Request($data, bBroadcast, 'Distribute_SetDistributeFPGALength');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributAddr;
    req.address = AddressMapping.Distribute_FPGALengthAddr;
    return req;
}
Session.prototype.Distribute_SetDistributeFPGALength =
    async function Distribute_SetDistributeFPGALength(addr, portAddr, distributAddr, bBroadcast, fpgaLength) {
        const req = createDistribute_SetDistributeFPGALength(addr, portAddr, distributAddr, bBroadcast, fpgaLength);
        await this.connection.send(req);
    };
Session.prototype.tryDistribute_SetDistributeFPGALength =
    async function tryDistribute_SetDistributeFPGALength(addr, portAddr, distributAddr, fpgaLength) {
        const req = createDistribute_SetDistributeFPGALength(addr, portAddr, distributAddr, false, fpgaLength);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=Distribute_SetDistributeFPGALength.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetX) {
    const $data = encodeUIntLE(dviOffsetX, AddressMapping.TVCardDVI0OffsetXOccupancy);
    const req = new Request($data, bBroadcast, 'SetTVCardDVI0OffsetX');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.TVCardDVI0OffsetXAddr;
    return req;
}
Session.prototype.SetTVCardDVI0OffsetX = async function SetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetX) {
    const req = createSetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetX);
    await this.connection.send(req);
};
Session.prototype.trySetTVCardDVI0OffsetX = async function trySetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, dviOffsetX) {
    const req = createSetTVCardDVI0OffsetX(addr, portAddr, scanBoardAddr, false, dviOffsetX);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetTVCardDVI0OffsetX.js.map
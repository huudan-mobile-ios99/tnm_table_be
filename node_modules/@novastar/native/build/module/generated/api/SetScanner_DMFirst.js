import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_DMFirst(addr, portAddr, scanBoardAddr, bBroadcast, DMFirst) {
    if (DMFirst.length !== 0)
        throw new TypeError(`Invalid buffer size: ${DMFirst.length}`);
    const req = new Request(DMFirst, bBroadcast, 'SetScanner_DMFirst');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_DmFirstAddr;
    return req;
}
Session.prototype.SetScanner_DMFirst = async function SetScanner_DMFirst(addr, portAddr, scanBoardAddr, bBroadcast, DMFirst) {
    const req = createSetScanner_DMFirst(addr, portAddr, scanBoardAddr, bBroadcast, DMFirst);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_DMFirst = async function trySetScanner_DMFirst(addr, portAddr, scanBoardAddr, DMFirst) {
    const req = createSetScanner_DMFirst(addr, portAddr, scanBoardAddr, false, DMFirst);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_DMFirst.js.map
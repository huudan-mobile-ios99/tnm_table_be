import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamC) {
    if (mutiChipRamC.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamC.length}`);
    const req = new Request(mutiChipRamC, bBroadcast, 'SetScanner_MutiChipRamC');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_MutiChipRamCAddr;
    return req;
}
Session.prototype.SetScanner_MutiChipRamC = async function SetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamC) {
    const req = createSetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamC);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_MutiChipRamC = async function trySetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, mutiChipRamC) {
    const req = createSetScanner_MutiChipRamC(addr, portAddr, scanBoardAddr, false, mutiChipRamC);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_MutiChipRamC.js.map
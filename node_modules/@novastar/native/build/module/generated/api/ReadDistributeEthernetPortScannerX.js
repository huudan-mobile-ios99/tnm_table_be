import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
    const req = new Request(AddressMapping.DistributeEthernetPortScannerXOccupancy, 'ReadDistributeEthernetPortScannerX');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address =
        AddressMapping.DistributeEthernetPortOccupancy * portIndex +
            AddressMapping.DistributeEthernetPortScannerXAddr +
            (AddressMapping.DistributeEthernetPortScannerXOccupancy +
                AddressMapping.DistributeEthernetPortScannerYOccupancy) *
                scannerIndex +
            AddressMapping.DistributeEthernetPortScannerXOccupancy;
    return req;
}
Session.prototype.ReadDistributeEthernetPortScannerX =
    async function ReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return decodeUIntLE(await this.connection.send(req));
    };
Session.prototype.tryReadDistributeEthernetPortScannerX =
    async function tryReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex) {
        const req = createReadDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, portIndex, scannerIndex);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeEthernetPortScannerX.js.map
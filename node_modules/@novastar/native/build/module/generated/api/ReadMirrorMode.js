import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadMirrorMode(addr, isPreposition) {
    const req = new Request(AddressMapping.MirrorModeOccupancy, 'ReadMirrorMode');
    req.destination = addr;
    if (isPreposition) {
        req.address = AddressMapping.MirrorModeFirAddr;
    }
    else {
        req.address = AddressMapping.MirrorModeSecAddr;
    }
    return req;
}
Session.prototype.ReadMirrorMode = async function ReadMirrorMode(addr, isPreposition) {
    const req = createReadMirrorMode(addr, isPreposition);
    return decodeUIntLE(await this.connection.send(req));
};
Session.prototype.tryReadMirrorMode = async function tryReadMirrorMode(addr, isPreposition) {
    const req = createReadMirrorMode(addr, isPreposition);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadMirrorMode.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramRemarks) {
    if (scanner_McuProgramRemarks.length !== AddressMapping.Scanner_McuProgramInfoOccupancy)
        throw new TypeError(`Invalid buffer size: ${scanner_McuProgramRemarks.length}`);
    const req = new Request(scanner_McuProgramRemarks, bBroadcast, 'SetScanner_McuProgramInfo');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_McuProgramInfoAddr;
    return req;
}
Session.prototype.SetScanner_McuProgramInfo = async function SetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramRemarks) {
    const req = createSetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, bBroadcast, scanner_McuProgramRemarks);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_McuProgramInfo = async function trySetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, scanner_McuProgramRemarks) {
    const req = createSetScanner_McuProgramInfo(addr, portAddr, scanBoardAddr, false, scanner_McuProgramRemarks);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_McuProgramInfo.js.map
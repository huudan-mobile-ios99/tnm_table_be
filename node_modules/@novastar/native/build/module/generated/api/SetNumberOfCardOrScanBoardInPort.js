import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetNumberOfCardOrScanBoardInPort(addr, bBroadcast, number, portIndex, cardType) {
    const $data = encodeUIntLE(number, AddressMapping.NumberOfCardOrBoardInPortOccupancy);
    const req = new Request($data, bBroadcast, 'SetNumberOfCardOrScanBoardInPort');
    req.destination = addr;
    req.address = 0;
    if (portIndex < AddressMapping.New16PortOccupancy) {
        req.address =
            AddressMapping.NumberOfCardOrBoardInPortAddr +
                portIndex * AddressMapping.NumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.NumberOfCardOrBoardInPortOccupancy;
    }
    else {
        req.address =
            AddressMapping.NumberOfCardOrBoardInPort16Addr +
                portIndex * AddressMapping.NumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.NumberOfCardOrBoardInPortOccupancy;
    }
    return req;
}
Session.prototype.SetNumberOfCardOrScanBoardInPort =
    async function SetNumberOfCardOrScanBoardInPort(addr, bBroadcast, number, portIndex, cardType) {
        const req = createSetNumberOfCardOrScanBoardInPort(addr, bBroadcast, number, portIndex, cardType);
        await this.connection.send(req);
    };
Session.prototype.trySetNumberOfCardOrScanBoardInPort =
    async function trySetNumberOfCardOrScanBoardInPort(addr, number, portIndex, cardType) {
        const req = createSetNumberOfCardOrScanBoardInPort(addr, false, number, portIndex, cardType);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetNumberOfCardOrScanBoardInPort.js.map
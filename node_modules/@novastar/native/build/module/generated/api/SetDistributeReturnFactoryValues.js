import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, bBroadcast, returnFactoryValues) {
    const $data = encodeUIntLE(returnFactoryValues, AddressMapping.DistributeReturnFactoryOccupancy);
    const req = new Request($data, bBroadcast, 'SetDistributeReturnFactoryValues');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = AddressMapping.DistributeReturnFactoryValuesAddr;
    return req;
}
Session.prototype.SetDistributeReturnFactoryValues =
    async function SetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, bBroadcast, returnFactoryValues) {
        const req = createSetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, bBroadcast, returnFactoryValues);
        await this.connection.send(req);
    };
Session.prototype.trySetDistributeReturnFactoryValues =
    async function trySetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, returnFactoryValues) {
        const req = createSetDistributeReturnFactoryValues(addr, portAddr, distributeAddr, false, returnFactoryValues);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetDistributeReturnFactoryValues.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetTotalLightCdfRes(addr, portAddr, scanBoardAddr, bBroadcast, totalLightCdfRes) {
    const $data = encodeUIntLE(totalLightCdfRes, AddressMapping.TotalLightCdfResOccupancy);
    const req = new Request($data, bBroadcast, 'SetTotalLightCdfRes');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.TotalLightCdfResAddr;
    return req;
}
Session.prototype.SetTotalLightCdfRes = async function SetTotalLightCdfRes(addr, portAddr, scanBoardAddr, bBroadcast, totalLightCdfRes) {
    const req = createSetTotalLightCdfRes(addr, portAddr, scanBoardAddr, bBroadcast, totalLightCdfRes);
    await this.connection.send(req);
};
Session.prototype.trySetTotalLightCdfRes = async function trySetTotalLightCdfRes(addr, portAddr, scanBoardAddr, totalLightCdfRes) {
    const req = createSetTotalLightCdfRes(addr, portAddr, scanBoardAddr, false, totalLightCdfRes);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetTotalLightCdfRes.js.map
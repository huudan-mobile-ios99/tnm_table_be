import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramEdition) {
    const $data = encodeUIntLE(sender_FPGAProgramEdition, AddressMapping.Scanner_FPGAProgramEditionOccupancy);
    const req = new Request($data, bBroadcast, 'SetSender_FPGAProgramEdition');
    req.destination = addr;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Sender_FPGAProgramEditionAddr;
    return req;
}
Session.prototype.SetSender_FPGAProgramEdition = async function SetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramEdition) {
    const req = createSetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, bBroadcast, sender_FPGAProgramEdition);
    await this.connection.send(req);
};
Session.prototype.trySetSender_FPGAProgramEdition = async function trySetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, sender_FPGAProgramEdition) {
    const req = createSetSender_FPGAProgramEdition(addr, portAddr, scanBoardAddr, false, sender_FPGAProgramEdition);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_FPGAProgramEdition.js.map
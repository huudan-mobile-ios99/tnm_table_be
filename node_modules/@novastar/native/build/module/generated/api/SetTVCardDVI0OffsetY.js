import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY) {
    const $data = encodeUIntLE(dviOffsetY, AddressMapping.TVCardDVI0OffsetYOccupancy);
    const req = new Request($data, bBroadcast, 'SetTVCardDVI0OffsetY');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.TVCardDVI0OffsetYAddr;
    return req;
}
Session.prototype.SetTVCardDVI0OffsetY = async function SetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY) {
    const req = createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, bBroadcast, dviOffsetY);
    await this.connection.send(req);
};
Session.prototype.trySetTVCardDVI0OffsetY = async function trySetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, dviOffsetY) {
    const req = createSetTVCardDVI0OffsetY(addr, portAddr, scanBoardAddr, false, dviOffsetY);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetTVCardDVI0OffsetY.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetTotalLightCdfResault(addr, portAddr, scanBoardAddr, bBroadcast, TotalLightCdfResault) {
    const $data = encodeUIntLE(TotalLightCdfResault, AddressMapping.ScannerTotalLightCdfResaultOccupancy);
    const req = new Request($data, bBroadcast, 'SetTotalLightCdfResault');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerTotalLightCdfResaultddr;
    return req;
}
Session.prototype.SetTotalLightCdfResault = async function SetTotalLightCdfResault(addr, portAddr, scanBoardAddr, bBroadcast, TotalLightCdfResault) {
    const req = createSetTotalLightCdfResault(addr, portAddr, scanBoardAddr, bBroadcast, TotalLightCdfResault);
    await this.connection.send(req);
};
Session.prototype.trySetTotalLightCdfResault = async function trySetTotalLightCdfResault(addr, portAddr, scanBoardAddr, TotalLightCdfResault) {
    const req = createSetTotalLightCdfResault(addr, portAddr, scanBoardAddr, false, TotalLightCdfResault);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetTotalLightCdfResault.js.map
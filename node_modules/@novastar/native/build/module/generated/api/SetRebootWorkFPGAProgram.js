import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootWorkFPGAProgram) {
    const $data = encodeUIntLE(rebootWorkFPGAProgram, AddressMapping.RebootWorkFPGAProgramOccupancy);
    const req = new Request($data, bBroadcast, 'SetRebootWorkFPGAProgram');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.RebootWorkFPGAProgramAddr;
    return req;
}
Session.prototype.SetRebootWorkFPGAProgram = async function SetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootWorkFPGAProgram) {
    const req = createSetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootWorkFPGAProgram);
    await this.connection.send(req);
};
Session.prototype.trySetRebootWorkFPGAProgram = async function trySetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, rebootWorkFPGAProgram) {
    const req = createSetRebootWorkFPGAProgram(addr, portAddr, scanBoardAddr, false, rebootWorkFPGAProgram);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetRebootWorkFPGAProgram.js.map
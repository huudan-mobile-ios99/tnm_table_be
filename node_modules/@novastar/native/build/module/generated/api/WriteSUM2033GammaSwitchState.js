import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    if (mutiChipRamA.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
    const req = new Request(mutiChipRamA, bBroadcast, 'WriteSUM2033GammaSwitchState');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.SUM2033WriteGammaSwitchStateAddr;
    return req;
}
Session.prototype.WriteSUM2033GammaSwitchState = async function WriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    const req = createWriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA);
    await this.connection.send(req);
};
Session.prototype.tryWriteSUM2033GammaSwitchState = async function tryWriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, mutiChipRamA) {
    const req = createWriteSUM2033GammaSwitchState(addr, portAddr, scanBoardAddr, false, mutiChipRamA);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=WriteSUM2033GammaSwitchState.js.map
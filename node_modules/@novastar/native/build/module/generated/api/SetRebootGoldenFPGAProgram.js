import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootGoldenFPGAProgram) {
    const $data = encodeUIntLE(rebootGoldenFPGAProgram, AddressMapping.RebootGoldenFPGAProgramOccupancy);
    const req = new Request($data, bBroadcast, 'SetRebootGoldenFPGAProgram');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.RebootGoldenFPGAProgramAddr;
    return req;
}
Session.prototype.SetRebootGoldenFPGAProgram = async function SetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootGoldenFPGAProgram) {
    const req = createSetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, bBroadcast, rebootGoldenFPGAProgram);
    await this.connection.send(req);
};
Session.prototype.trySetRebootGoldenFPGAProgram = async function trySetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, rebootGoldenFPGAProgram) {
    const req = createSetRebootGoldenFPGAProgram(addr, portAddr, scanBoardAddr, false, rebootGoldenFPGAProgram);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetRebootGoldenFPGAProgram.js.map
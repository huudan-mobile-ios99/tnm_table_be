import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset) {
    const req = new Request(data, bBroadcast, 'FuncCard_SetFPGAData');
    req.destination = addr;
    req.deviceType = 2;
    req.port = portAddr;
    req.rcvIndex = funcCardAddr;
    req.address = AddressMapping.FuncCard_FPGALengthAddr + offset;
    return req;
}
Session.prototype.FuncCard_SetFPGAData = async function FuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset) {
    const req = createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, bBroadcast, data, offset);
    await this.connection.send(req);
};
Session.prototype.tryFuncCard_SetFPGAData = async function tryFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, data, offset) {
    const req = createFuncCard_SetFPGAData(addr, portAddr, funcCardAddr, false, data, offset);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=FuncCard_SetFPGAData.js.map
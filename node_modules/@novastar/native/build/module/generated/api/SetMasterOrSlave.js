import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetMasterOrSlave(addr, bBroadcast, masterOrSlaveBytes) {
    if (masterOrSlaveBytes.length !== AddressMapping.MasterOrSlaveOccupancy)
        throw new TypeError(`Invalid buffer size: ${masterOrSlaveBytes.length}`);
    const req = new Request(masterOrSlaveBytes, bBroadcast, 'SetMasterOrSlave');
    req.destination = addr;
    req.address = AddressMapping.MasterOrSlaveAddr;
    return req;
}
Session.prototype.SetMasterOrSlave = async function SetMasterOrSlave(addr, bBroadcast, masterOrSlaveBytes) {
    const req = createSetMasterOrSlave(addr, bBroadcast, masterOrSlaveBytes);
    await this.connection.send(req);
};
Session.prototype.trySetMasterOrSlave = async function trySetMasterOrSlave(addr, masterOrSlaveBytes) {
    const req = createSetMasterOrSlave(addr, false, masterOrSlaveBytes);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetMasterOrSlave.js.map
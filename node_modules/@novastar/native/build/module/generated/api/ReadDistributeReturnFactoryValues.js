import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr) {
    const req = new Request(AddressMapping.DistributeReturnFactoryOccupancy, 'ReadDistributeReturnFactoryValues');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = AddressMapping.DistributeReturnFactoryValuesAddr;
    return req;
}
Session.prototype.ReadDistributeReturnFactoryValues =
    async function ReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr) {
        const req = createReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr);
        return decodeUIntLE(await this.connection.send(req));
    };
Session.prototype.tryReadDistributeReturnFactoryValues =
    async function tryReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr) {
        const req = createReadDistributeReturnFactoryValues(addr, portAddr, distributeAddr);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeReturnFactoryValues.js.map
import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramRemarks) {
    if (sender_McuProgramRemarks.length !== AddressMapping.Sender_McuProgramRemarksOccupancy)
        throw new TypeError(`Invalid buffer size: ${sender_McuProgramRemarks.length}`);
    const req = new Request(sender_McuProgramRemarks, bBroadcast, 'SetSender_McuProgramRemarks');
    req.destination = addr;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Sender_McuProgramRemarksAddr;
    return req;
}
Session.prototype.SetSender_McuProgramRemarks = async function SetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramRemarks) {
    const req = createSetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, bBroadcast, sender_McuProgramRemarks);
    await this.connection.send(req);
};
Session.prototype.trySetSender_McuProgramRemarks = async function trySetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, sender_McuProgramRemarks) {
    const req = createSetSender_McuProgramRemarks(addr, portAddr, scanBoardAddr, false, sender_McuProgramRemarks);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetSender_McuProgramRemarks.js.map
import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
    const $data = encodeUIntLE(ethernetPortScannerX, AddressMapping.DistributeEthernetPortScannerXOccupancy);
    const req = new Request($data, bBroadcast, 'SetDistributeEthernetPortScannerX');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address =
        AddressMapping.DistributeEthernetPortOccupancy * portIndex +
            AddressMapping.DistributeEthernetPortScannerXAddr +
            (AddressMapping.DistributeEthernetPortScannerXOccupancy +
                AddressMapping.DistributeEthernetPortScannerYOccupancy) *
                scannerIndex +
            AddressMapping.DistributeEthernetPortScannerXOccupancy;
    return req;
}
Session.prototype.SetDistributeEthernetPortScannerX =
    async function SetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex) {
        const req = createSetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, bBroadcast, ethernetPortScannerX, portIndex, scannerIndex);
        await this.connection.send(req);
    };
Session.prototype.trySetDistributeEthernetPortScannerX =
    async function trySetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, ethernetPortScannerX, portIndex, scannerIndex) {
        const req = createSetDistributeEthernetPortScannerX(addr, portAddr, distributeAddr, false, ethernetPortScannerX, portIndex, scannerIndex);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=SetDistributeEthernetPortScannerX.js.map
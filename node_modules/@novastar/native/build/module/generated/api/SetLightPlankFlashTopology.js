import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, bBroadcast, LightPlankFlashTopologyBytes) {
    const req = new Request(LightPlankFlashTopologyBytes, bBroadcast, 'SetLightPlankFlashTopology');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.LightPlankFlashTopologyAddr;
    return req;
}
Session.prototype.SetLightPlankFlashTopology = async function SetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, bBroadcast, LightPlankFlashTopologyBytes) {
    const req = createSetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, bBroadcast, LightPlankFlashTopologyBytes);
    await this.connection.send(req);
};
Session.prototype.trySetLightPlankFlashTopology = async function trySetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, LightPlankFlashTopologyBytes) {
    const req = createSetLightPlankFlashTopology(addr, portAddr, scanBoardAddr, false, LightPlankFlashTopologyBytes);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetLightPlankFlashTopology.js.map
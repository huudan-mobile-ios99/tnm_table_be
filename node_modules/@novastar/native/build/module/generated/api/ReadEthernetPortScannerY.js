import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadEthernetPortScannerY(addr, portIndex, scannerIndex) {
    const req = new Request(AddressMapping.EthernetPortScannerYOccupancy, 'ReadEthernetPortScannerY');
    req.destination = addr;
    req.address =
        AddressMapping.EthernetPortOccupancy * portIndex +
            AddressMapping.EthernetPortScannerYAddr +
            AddressMapping.EthernetPortScannerYOccupancy +
            (AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
Session.prototype.ReadEthernetPortScannerY = async function ReadEthernetPortScannerY(addr, portIndex, scannerIndex) {
    const req = createReadEthernetPortScannerY(addr, portIndex, scannerIndex);
    return decodeUIntLE(await this.connection.send(req));
};
Session.prototype.tryReadEthernetPortScannerY = async function tryReadEthernetPortScannerY(addr, portIndex, scannerIndex) {
    const req = createReadEthernetPortScannerY(addr, portIndex, scannerIndex);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadEthernetPortScannerY.js.map
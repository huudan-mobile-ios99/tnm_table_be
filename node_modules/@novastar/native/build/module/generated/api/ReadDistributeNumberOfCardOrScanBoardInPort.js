import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
    const req = new Request(AddressMapping.DistributeNumberOfCardOrBoardInPortOccupancy, 'ReadDistributeNumberOfCardOrScanBoardInPort');
    req.destination = addr;
    req.deviceType = 3;
    req.port = portAddr;
    req.rcvIndex = distributeAddr;
    req.address = 0;
    if (portIndex > 3) {
        req.address =
            AddressMapping.DistributeNumberOfCardOrBoardInPortAddr +
                AddressMapping.DistributePortAddr +
                portIndex * AddressMapping.DistributeNumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.DistributeNumberOfCardOrBoardInPortOccupancy;
    }
    else {
        req.address =
            AddressMapping.DistributeNumberOfCardOrBoardInPortAddr +
                portIndex * AddressMapping.DistributeNumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.DistributeNumberOfCardOrBoardInPortOccupancy;
    }
    return req;
}
Session.prototype.ReadDistributeNumberOfCardOrScanBoardInPort =
    async function ReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
        const req = createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType);
        return decodeUIntLE(await this.connection.send(req));
    };
Session.prototype.tryReadDistributeNumberOfCardOrScanBoardInPort =
    async function tryReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType) {
        const req = createReadDistributeNumberOfCardOrScanBoardInPort(addr, portAddr, distributeAddr, portIndex, cardType);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadDistributeNumberOfCardOrScanBoardInPort.js.map
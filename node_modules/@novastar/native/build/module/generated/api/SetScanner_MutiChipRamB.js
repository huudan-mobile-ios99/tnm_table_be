import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamB) {
    if (mutiChipRamB.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamB.length}`);
    const req = new Request(mutiChipRamB, bBroadcast, 'SetScanner_MutiChipRamB');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.Scanner_MutiChipRamBAddr;
    return req;
}
Session.prototype.SetScanner_MutiChipRamB = async function SetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamB) {
    const req = createSetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamB);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_MutiChipRamB = async function trySetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, mutiChipRamB) {
    const req = createSetScanner_MutiChipRamB(addr, portAddr, scanBoardAddr, false, mutiChipRamB);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_MutiChipRamB.js.map
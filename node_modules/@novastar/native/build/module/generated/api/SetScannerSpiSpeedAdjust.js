import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed) {
    if (speed.length !== AddressMapping.ScannerSpiSpeedAdjustOccupancy)
        throw new TypeError(`Invalid buffer size: ${speed.length}`);
    const req = new Request(speed, bBroadcast, 'SetScannerSpiSpeedAdjust');
    req.destination = Sender;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ScannerSpiSpeedAdjustAddr;
    return req;
}
Session.prototype.SetScannerSpiSpeedAdjust = async function SetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed) {
    const req = createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, bBroadcast, speed);
    await this.connection.send(req);
};
Session.prototype.trySetScannerSpiSpeedAdjust = async function trySetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, speed) {
    const req = createSetScannerSpiSpeedAdjust(Sender, portAddr, scanBoardAddr, false, speed);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScannerSpiSpeedAdjust.js.map
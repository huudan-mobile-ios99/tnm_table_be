import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createWriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    if (mutiChipRamA.length !== 0)
        throw new TypeError(`Invalid buffer size: ${mutiChipRamA.length}`);
    const req = new Request(mutiChipRamA, bBroadcast, 'WriteScannerRT5958TinyAfterglow');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.ReadRT5958TinyAfterglowAddr;
    return req;
}
Session.prototype.WriteScannerRT5958TinyAfterglow = async function WriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA) {
    const req = createWriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, bBroadcast, mutiChipRamA);
    await this.connection.send(req);
};
Session.prototype.tryWriteScannerRT5958TinyAfterglow =
    async function tryWriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, mutiChipRamA) {
        const req = createWriteScannerRT5958TinyAfterglow(addr, portAddr, scanBoardAddr, false, mutiChipRamA);
        return (await this.connection.trySend(req))?.ack ?? null;
    };
//# sourceMappingURL=WriteScannerRT5958TinyAfterglow.js.map
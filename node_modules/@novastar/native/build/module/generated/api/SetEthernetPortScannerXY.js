import { encodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetEthernetPortScannerXY(addr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
    const $data = encodeUIntLE((ethernetPortScannerX << 16) + ethernetPortScannerY, AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy);
    const req = new Request($data, bBroadcast, 'SetEthernetPortScannerXY');
    req.destination = addr;
    req.address =
        AddressMapping.EthernetPortOccupancy * portIndex +
            AddressMapping.EthernetPortScannerXAddr +
            (AddressMapping.EthernetPortScannerXOccupancy + AddressMapping.EthernetPortScannerYOccupancy) *
                scannerIndex;
    return req;
}
Session.prototype.SetEthernetPortScannerXY = async function SetEthernetPortScannerXY(addr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerXY(addr, bBroadcast, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex);
    await this.connection.send(req);
};
Session.prototype.trySetEthernetPortScannerXY = async function trySetEthernetPortScannerXY(addr, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex) {
    const req = createSetEthernetPortScannerXY(addr, false, ethernetPortScannerX, ethernetPortScannerY, portIndex, scannerIndex);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetEthernetPortScannerXY.js.map
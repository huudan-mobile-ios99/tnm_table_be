import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadPortEnable(addr, index) {
    const req = new Request(AddressMapping.PortEnableOccupancy, 'ReadPortEnable');
    req.destination = addr;
    req.address = 0;
    if (index >= AddressMapping.New32PortOccupancy) {
        req.address =
            AddressMapping.PortEnableNext32Addr +
                AddressMapping.PortOccupancy * (index - AddressMapping.New32PortOccupancy);
    }
    else if (index >= AddressMapping.New16PortOccupancy) {
        req.address =
            AddressMapping.PortEnableNext16Addr +
                AddressMapping.PortOccupancy * (index - AddressMapping.New16PortOccupancy);
    }
    else if (index >= AddressMapping.NewPortOccupancy) {
        req.address =
            AddressMapping.PortEnableNextAddr +
                AddressMapping.PortOccupancy * (index - AddressMapping.NewPortOccupancy);
    }
    else {
        req.address = AddressMapping.PortEnableAddr + AddressMapping.PortOccupancy * index;
    }
    return req;
}
Session.prototype.ReadPortEnable = async function ReadPortEnable(addr, index) {
    const req = createReadPortEnable(addr, index);
    return decodeUIntLE(await this.connection.send(req));
};
Session.prototype.tryReadPortEnable = async function tryReadPortEnable(addr, index) {
    const req = createReadPortEnable(addr, index);
    return this.connection.trySend(req);
};
//# sourceMappingURL=ReadPortEnable.js.map
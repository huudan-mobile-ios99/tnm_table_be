import { decodeUIntLE, Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType) {
    const req = new Request(AddressMapping.NumberOfCardOrBoardInPortOccupancy, 'ReadNumberOfCardOrScanBoardInPort');
    req.destination = addr;
    req.address = 0;
    if (portIndex < AddressMapping.New16PortOccupancy) {
        req.address =
            AddressMapping.NumberOfCardOrBoardInPortAddr +
                portIndex * AddressMapping.NumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.NumberOfCardOrBoardInPortOccupancy;
    }
    else {
        req.address =
            AddressMapping.NumberOfCardOrBoardInPort16Addr +
                portIndex * AddressMapping.NumOfCardAndBoardInPortOccupancy +
                cardType * AddressMapping.NumberOfCardOrBoardInPortOccupancy;
    }
    return req;
}
Session.prototype.ReadNumberOfCardOrScanBoardInPort =
    async function ReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType) {
        const req = createReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType);
        return decodeUIntLE(await this.connection.send(req));
    };
Session.prototype.tryReadNumberOfCardOrScanBoardInPort =
    async function tryReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType) {
        const req = createReadNumberOfCardOrScanBoardInPort(addr, portIndex, cardType);
        return this.connection.trySend(req);
    };
//# sourceMappingURL=ReadNumberOfCardOrScanBoardInPort.js.map
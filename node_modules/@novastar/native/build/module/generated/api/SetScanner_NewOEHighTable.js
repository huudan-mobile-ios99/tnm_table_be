import { Request, Session } from '@novastar/codec';
import AddressMapping from '../AddressMapping';
export default function createSetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, bBroadcast, newOETable) {
    if (newOETable.length !== AddressMapping.NewOEHighTableOccupancy)
        throw new TypeError(`Invalid buffer size: ${newOETable.length}`);
    const req = new Request(newOETable, bBroadcast, 'SetScanner_NewOEHighTable');
    req.destination = addr;
    req.deviceType = 1;
    req.port = portAddr;
    req.rcvIndex = scanBoardAddr;
    req.address = AddressMapping.NewOEHighTableAddr;
    return req;
}
Session.prototype.SetScanner_NewOEHighTable = async function SetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, bBroadcast, newOETable) {
    const req = createSetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, bBroadcast, newOETable);
    await this.connection.send(req);
};
Session.prototype.trySetScanner_NewOEHighTable = async function trySetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, newOETable) {
    const req = createSetScanner_NewOEHighTable(addr, portAddr, scanBoardAddr, false, newOETable);
    return (await this.connection.trySend(req))?.ack ?? null;
};
//# sourceMappingURL=SetScanner_NewOEHighTable.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipGW6808ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        ConfigValue7: common.withDefault(common.Int32, 67),
        ConfigValue8: common.Int32_3,
        ConfigValue9: common.Int32_1,
        ConfigValue17: common.Int32_10,
        ConfigValue18: common.Int32_13,
        ConfigValue19: common.withDefault(common.Int32, 18),
        ConfigValue20: common.Int32_25,
        ConfigValue21: common.Int32_32,
        ConfigValue22: common.withDefault(common.Int32, 72),
        ConfigValue23: common.Int32_137,
        ConfigValue24: common.Int32_137,
        ConfigValue25: common.Int32_137,
        ConfigValue26: common.Int32_137,
        ConfigValue27: common.Int32_137,
        ConfigValue28: common.Int32_137,
        ConfigValue29: common.Int32_140,
        ConfigValue30: common.Int32_140,
        ConfigValue31: common.Int32_140,
        ConfigValue32: common.withDefault(common.Int32, 156),
        RedResistanceValue: common.withDefault(common.Int32, 2200),
        GreenResistanceValue: common.Int32_3300,
        BlueResistanceValue: common.Int32_3300,
    }),
    t.partial({
        IsAdvancedMode: common.Bool,
        ConfigArray: common.Base64,
        ConfigValue1: common.Int32,
        ConfigValue2: common.Int32,
        ConfigValue3: common.Int32,
        ConfigValue4: common.Int32,
        ConfigValue5: common.Int32,
        ConfigValue6: common.Int32,
        ConfigValue10: common.Int32,
        ConfigValue11: common.Int32,
        ConfigValue12: common.Int32,
        ConfigValue13: common.Int32,
        ConfigValue14: common.Int32,
        ConfigValue15: common.Int32,
        ConfigValue16: common.Int32,
    }),
], 'ChipGW6808ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipGW6808ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:46890
 */
export const ChipGW6808ExtendProperty = t.intersection([
    ChipGW6808ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipGW6808ExtendProperty') }),
], 'ChipGW6808ExtendProperty');
//# sourceMappingURL=ChipGW6808ExtendProperty.js.map
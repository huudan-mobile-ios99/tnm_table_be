import * as t from 'io-ts';
import { ChipDP3264ExtendProperty } from './ChipDP3264ExtendProperty';
export declare const ChipDP3264RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RefreshNum: t.Type<number, number, unknown>;
    MaxRefreshNum: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    RefreshNumPerVs: t.Type<number, number, unknown>;
    LineGclkNum: t.Type<number, number, unknown>;
    R: t.Type<number, number, unknown>;
    LowGrayDisplayEnhance: t.Type<boolean, boolean, unknown>;
    BlackScreenDynamicEnergySaving: t.Type<number, number, unknown>;
    HighGrayDataIndependentRefresh: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3264RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3264.decompiled.cs:7020
 */
export declare const ChipDP3264RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RefreshNum: t.Type<number, number, unknown>;
    MaxRefreshNum: t.Type<number, number, unknown>;
}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
    }>, t.PartialC<{
        IsUseNewModule: t.Type<boolean, boolean, unknown>;
        ChipLibVersion: t.Type<number, number, unknown>;
        ConstantCurrentOutputInflectionPointGrade: t.Type<number, number, unknown>;
        LowGreyPittingOptimization: t.Type<number, number, unknown>;
        GammaSmoothingLevel: t.Type<number, number, unknown>;
        ShadowEliminationLevelEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ShadowEliminationTime: t.Type<number, number, unknown>;
        ShadowEliminationMoment: t.Type<number, number, unknown>;
        CouplingOptimizationEnable: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationEnhance: t.Type<boolean, boolean, unknown>;
        CouplingOptimizationGrade: t.Type<number, number, unknown>;
        CouplingCoefficient: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipDP3264ExtendProperty">;
    }>]>;
    RefreshNumPerVs: t.Type<number, number, unknown>;
    LineGclkNum: t.Type<number, number, unknown>;
    R: t.Type<number, number, unknown>;
    LowGrayDisplayEnhance: t.Type<boolean, boolean, unknown>;
    BlackScreenDynamicEnergySaving: t.Type<number, number, unknown>;
    HighGrayDataIndependentRefresh: t.Type<number, number, unknown>;
    EnableToRemoveBadPoints: t.Type<boolean, boolean, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
    FourthDataLen: t.Type<number, number, unknown>;
    FourthStartIndex: t.Type<number, number, unknown>;
    FourthRegisterAddr: t.Type<number, number, unknown>;
    ErrRedGain: t.Type<number, number, unknown>;
    ErrGreenGain: t.Type<number, number, unknown>;
    ErrBlueGain: t.Type<number, number, unknown>;
    ErrVRedGain: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipDP3264RGBVExtendProperty">;
}>]>;
export interface ChipDP3264RGBVExtendProperty extends t.TypeOf<typeof ChipDP3264RGBVExtendProperty> {
    RedProperty?: ChipDP3264ExtendProperty;
    GreenProperty?: ChipDP3264ExtendProperty;
    BlueProperty?: ChipDP3264ExtendProperty;
    VRedProperty?: ChipDP3264ExtendProperty;
}

import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipCS2066ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        FirstRegValue: common.UInt16,
        SecondRegValue: common.UInt16,
        ThirdRegValue: common.UInt16,
        FourthRegValue: common.UInt16,
        FifthRegValue: common.UInt16,
        SixthRegValue: common.UInt16,
        SeventhRegValue: common.UInt16,
        RefreshRate: common.UInt8,
        ScanNumSetting: common.UInt8,
        CurrentGain: common.UInt8,
        LowAshEnhanceUniformity: common.UInt8,
        LineBlankStrength: common.UInt8,
        OutputResponse: common.UInt8,
        PerDriverCycleNumSetting: common.UInt8,
        LineBlankEnhanceModeEn: common.Bool,
        CoupledOutputShift: common.UInt8,
        OpenTestPointAdjust: common.UInt8,
        CouplingOptimizationEn: common.Bool,
        LowGrayCompsentionTimeSettingMode: common.UInt8,
        CouplingRangeAdjust: common.UInt8,
        PerDriverEnable: common.Bool,
        PWMGraySetting: common.UInt8,
        OpenProtectEnable: common.Bool,
        ScanMode: common.UInt8,
        LowGrayPulseWidthCompensation: common.UInt8,
        PLLFreqDivision: common.UInt8,
        PLLFreqDoubling: common.UInt8,
        CurrentGear: common.UInt8,
        LowGrayCompsentionStrength: common.UInt8,
        OpenDynamicTestEnable: common.Bool,
        CurrentCompsentionEnable: common.Bool,
        ConstantCurrentInflectionPoint: common.UInt8,
        DynamicEnergySavingEn: common.Bool,
        LineEliminationLength: common.UInt8,
        PerDriverMode: common.UInt8,
        PerDriverTimeSetting: common.UInt8,
        OpentestThresholdValue: common.UInt8,
        CurrentCompsentionGear: common.UInt8,
        WakeUpSettings: common.UInt8,
    }),
], 'ChipCS2066ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2066ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2066.decompiled.cs:7863
 */
export const ChipCS2066ExtendProperty = t.intersection([
    ChipCS2066ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCS2066ExtendProperty') }),
], 'ChipCS2066ExtendProperty');
//# sourceMappingURL=ChipCS2066ExtendProperty.js.map
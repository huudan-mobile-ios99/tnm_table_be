import * as t from 'io-ts';
export declare const ChipICND2210RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterList: t.ArrayC<t.Type<number, number, unknown>>;
    RRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    GRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    BRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    RShadowEliminationLevel: t.Type<number, number, unknown>;
    GShadowEliminationLevel: t.Type<number, number, unknown>;
    BShadowEliminationLevel: t.Type<number, number, unknown>;
    RShadowEliminationTime: t.Type<number, number, unknown>;
    GShadowEliminationTime: t.Type<number, number, unknown>;
    BShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshuniformity: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    ShadowEliminationEhancedEn: t.Type<boolean, boolean, unknown>;
    RLowGrayOffset: t.Type<number, number, unknown>;
    GLowGrayOffset: t.Type<number, number, unknown>;
    BLowGrayOffset: t.Type<number, number, unknown>;
    FirstLineDarkEn: t.Type<boolean, boolean, unknown>;
    RLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    CouplingAdjustEnhacneModeEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationOne: t.Type<number, number, unknown>;
    GCouplingOptimizationOne: t.Type<number, number, unknown>;
    BCouplingOptimizationOne: t.Type<number, number, unknown>;
    RCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    GCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    BCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationTwo: t.Type<number, number, unknown>;
    GCouplingOptimizationTwo: t.Type<number, number, unknown>;
    BCouplingOptimizationTwo: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RKneePointVoltage: t.Type<number, number, unknown>;
    GKneePointVoltage: t.Type<number, number, unknown>;
    BKneePointVoltage: t.Type<number, number, unknown>;
    LineShadowEliminationLevel: t.Type<number, number, unknown>;
    LineShadowEliminationMode: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    BlackScreenSavingEn: t.Type<boolean, boolean, unknown>;
    RCurrentGain: t.Type<number, number, unknown>;
    GCurrentGain: t.Type<number, number, unknown>;
    BCurrentGain: t.Type<number, number, unknown>;
    RCurrentAmplitude: t.Type<number, number, unknown>;
    GCurrentAmplitude: t.Type<number, number, unknown>;
    BCurrentAmplitude: t.Type<number, number, unknown>;
    RefreshGroupNum: t.Type<number, number, unknown>;
    RowGrayLevel: t.Type<number, number, unknown>;
    ScanCountOfChipOne: t.Type<number, number, unknown>;
    ScanCountOfChipTwo: t.Type<number, number, unknown>;
    ScanCountOfChipThree: t.Type<number, number, unknown>;
    ScanCountOfChipFour: t.Type<number, number, unknown>;
    Line_Len: t.Type<number, number, unknown>;
    Row_Len: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2210RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2210.decompiled.cs:45
 */
export declare const ChipICND2210RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LENGTH: t.Type<number, number, unknown>;
    RegisterList: t.ArrayC<t.Type<number, number, unknown>>;
    RRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    GRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    BRemovePointCurrentAmplitude: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
}>, t.PartialC<{
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    RShadowEliminationLevel: t.Type<number, number, unknown>;
    GShadowEliminationLevel: t.Type<number, number, unknown>;
    BShadowEliminationLevel: t.Type<number, number, unknown>;
    RShadowEliminationTime: t.Type<number, number, unknown>;
    GShadowEliminationTime: t.Type<number, number, unknown>;
    BShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshuniformity: t.Type<number, number, unknown>;
    ShadowEliminationEn: t.Type<boolean, boolean, unknown>;
    ShadowEliminationEhancedEn: t.Type<boolean, boolean, unknown>;
    RLowGrayOffset: t.Type<number, number, unknown>;
    GLowGrayOffset: t.Type<number, number, unknown>;
    BLowGrayOffset: t.Type<number, number, unknown>;
    FirstLineDarkEn: t.Type<boolean, boolean, unknown>;
    RLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsention: t.Type<number, number, unknown>;
    RLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    GLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    BLowGrayFirstLineDarkCompsentionTime: t.Type<number, number, unknown>;
    CouplingAdjustEnhacneModeEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationOne: t.Type<number, number, unknown>;
    GCouplingOptimizationOne: t.Type<number, number, unknown>;
    BCouplingOptimizationOne: t.Type<number, number, unknown>;
    RCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    GCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    BCouplingOptimizationTwoEn: t.Type<boolean, boolean, unknown>;
    RCouplingOptimizationTwo: t.Type<number, number, unknown>;
    GCouplingOptimizationTwo: t.Type<number, number, unknown>;
    BCouplingOptimizationTwo: t.Type<number, number, unknown>;
    RSlowlyOpen: t.Type<number, number, unknown>;
    GSlowlyOpen: t.Type<number, number, unknown>;
    BSlowlyOpen: t.Type<number, number, unknown>;
    RKneePointVoltage: t.Type<number, number, unknown>;
    GKneePointVoltage: t.Type<number, number, unknown>;
    BKneePointVoltage: t.Type<number, number, unknown>;
    LineShadowEliminationLevel: t.Type<number, number, unknown>;
    LineShadowEliminationMode: t.Type<number, number, unknown>;
    FailureEliminationEn: t.Type<boolean, boolean, unknown>;
    BlackScreenSavingEn: t.Type<boolean, boolean, unknown>;
    RCurrentGain: t.Type<number, number, unknown>;
    GCurrentGain: t.Type<number, number, unknown>;
    BCurrentGain: t.Type<number, number, unknown>;
    RCurrentAmplitude: t.Type<number, number, unknown>;
    GCurrentAmplitude: t.Type<number, number, unknown>;
    BCurrentAmplitude: t.Type<number, number, unknown>;
    RefreshGroupNum: t.Type<number, number, unknown>;
    RowGrayLevel: t.Type<number, number, unknown>;
    ScanCountOfChipOne: t.Type<number, number, unknown>;
    ScanCountOfChipTwo: t.Type<number, number, unknown>;
    ScanCountOfChipThree: t.Type<number, number, unknown>;
    ScanCountOfChipFour: t.Type<number, number, unknown>;
    Line_Len: t.Type<number, number, unknown>;
    Row_Len: t.Type<number, number, unknown>;
    GclkFreqP: t.Type<number, number, unknown>;
    GclkFreqM: t.Type<number, number, unknown>;
    GclkFreqN: t.Type<number, number, unknown>;
    SpecialDataLen: t.Type<number, number, unknown>;
    SpecialRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2210RGBVExtendProperty">;
}>]>;
export interface ChipICND2210RGBVExtendProperty extends t.TypeOf<typeof ChipICND2210RGBVExtendProperty> {
}

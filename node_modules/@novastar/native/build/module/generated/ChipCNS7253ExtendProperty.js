import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipCNS7253ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RegFirst: common.UInt16,
        RegSecond: common.UInt16,
        RegThird: common.UInt16,
        RegFourth: common.UInt16,
        OPEN_DET: common.Bool,
        SCAN_LINE: common.UInt8,
        PWM_OPT: common.UInt8,
        GCLK_DOUBLE: common.Bool,
        PWM_GROUP: common.UInt16,
        PWM_REV: common.Bool,
        PartNumPerRefValue: common.UInt8,
        ADJ: common.UInt8,
        IGAIN: common.UInt16,
        ADJ_Enable: common.Bool,
        KeenPointVoltage: common.UInt8,
        FirstLineOffsetCompensation: common.UInt8,
        PWM_ALL: common.UInt8,
        PWM_ALL_Enable: common.Bool,
        FirstLineOffsetCompensation_Enable: common.Bool,
        OPEN_RST: common.Bool,
    }),
], 'ChipCNS7253ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCNS7253ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCNS7253.decompiled.cs:87
 */
export const ChipCNS7253ExtendProperty = t.intersection([
    ChipCNS7253ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCNS7253ExtendProperty') }),
], 'ChipCNS7253ExtendProperty');
//# sourceMappingURL=ChipCNS7253ExtendProperty.js.map
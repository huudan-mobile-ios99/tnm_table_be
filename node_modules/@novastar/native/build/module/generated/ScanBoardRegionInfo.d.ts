import * as t from 'io-ts';
import { CabinetCorrectLocationSize } from './CabinetCorrectLocationSize';
import { DviSelectModeEnum } from './DviSelectMode';
/**
 * @category Codecs
 * @desc Codec for interface {@link ScanBoardRegionInfo}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:53392
 */
export declare const ScanBoardRegionInfo: t.IntersectionC<[t.TypeC<{
    DviSelect: t.Type<DviSelectModeEnum, "HDMI" | "DVI" | "SDI" | "DP" | "Dual_DVI" | "HDBaseT" | "LVDS", unknown>;
    DVIIndex: t.Type<number, number, unknown>;
    Width: t.Type<number, number, unknown>;
    Height: t.Type<number, number, unknown>;
    TagInfoColor: t.StringC;
}>, t.PartialC<{
    XInPort: t.Type<number, number, unknown>;
    YInPort: t.Type<number, number, unknown>;
    SenderIndex: t.Type<number, number, unknown>;
    PortIndex: t.Type<number, number, unknown>;
    ConnectIndex: t.Type<number, number, unknown>;
    X: t.Type<number, number, unknown>;
    Y: t.Type<number, number, unknown>;
    IsHasMrvID: t.Type<boolean, boolean, unknown>;
    MrvID: t.StringC;
    FreeRoutConnect: t.Type<number, number, unknown>;
    MrvIDObject: t.UnknownRecordC;
    CabinetCorrectLocationSize: t.PartialC<{
        IsValid: t.Type<boolean, boolean, unknown>;
        StartCol: t.Type<number, number, unknown>;
        StartRow: t.Type<number, number, unknown>;
        Width: t.Type<number, number, unknown>;
        Height: t.Type<number, number, unknown>;
    }>;
    RowIndexInScreen: t.Type<number, number, unknown>;
    ColIndexInScreen: t.Type<number, number, unknown>;
    TagInfo: t.Type<boolean, boolean, unknown>;
}>]>;
export interface ScanBoardRegionInfo extends t.TypeOf<typeof ScanBoardRegionInfo> {
    DviSelect: DviSelectModeEnum;
    CabinetCorrectLocationSize?: CabinetCorrectLocationSize;
}

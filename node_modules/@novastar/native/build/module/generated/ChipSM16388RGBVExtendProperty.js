import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipSM16388ExtendProperty } from './ChipSM16388ExtendProperty';
export const ChipSM16388RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsAdvancedMode: common.Bool_true,
        CurrentGainGrade: common.UInt8_2,
    }),
    t.partial({
        RedExtendProperty: ChipSM16388ExtendProperty,
        GreenExtendProperty: ChipSM16388ExtendProperty,
        BlueExtendProperty: ChipSM16388ExtendProperty,
        VRedExtendProperty: ChipSM16388ExtendProperty,
        IsUseNewModule: common.Bool,
        SubFields: common.UInt8,
        ScanCount: common.UInt8,
        FailureEliminationEn: common.Bool,
        FrequencyDoublingEn: common.Bool,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
    }),
], 'ChipSM16388RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16388RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16388.decompiled.cs:6903
 */
export const ChipSM16388RGBVExtendProperty = t.intersection([
    ChipSM16388RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSM16388RGBVExtendProperty') }),
], 'ChipSM16388RGBVExtendProperty');
//# sourceMappingURL=ChipSM16388RGBVExtendProperty.js.map
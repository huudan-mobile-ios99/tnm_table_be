import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipAXS6018RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        WeightValueConfig: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        FirstRegData: common.buffer_8,
        SecondRegData: common.buffer_8,
        ThirdRegData: common.buffer_8,
        FourthRegData: common.buffer_6,
        FifthRegData: common.buffer_6,
        SixthRegData: common.buffer_6,
        FirstRegisterAddr: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthRegisterAddr: common.Int32,
        FifthRegisterAddr: common.Int32,
        SixthRegisterAddr: common.Int32,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FifthDataLen: common.Int32,
        FifthStartIndex: common.Int32,
        SixthDataLen: common.Int32,
        SixthStartIndex: common.Int32,
        IsUseNewModule: common.Bool,
        FirstLineDark: common.UInt8,
        ChargingOften: common.UInt8,
        LineShadowTime: common.UInt8,
        ShadowChargingMode: common.UInt8,
        AdditionalField: common.UInt8,
        HighGrayGain: common.UInt8,
        MultilevelCurrent: common.Bool,
        BlackLine: common.UInt8,
        DischargeTime: common.UInt8,
        DischargeR: common.Bool,
        DischargeG: common.Bool,
        DischargeB: common.Bool,
        RextR: common.UInt8,
        RextG: common.UInt8,
        RextB: common.UInt8,
        TubeDischargeEnable: common.Bool,
        LineTubeDischargeEnable: common.Bool,
        Contrast: common.UInt8,
        GammaGloablBright: common.UInt8,
        GammaRBright: common.UInt8,
        GammaGBright: common.UInt8,
        GammaBBright: common.UInt8,
        LineCP: common.UInt8,
        CtrlEndPoint: common.UInt8,
    }),
], 'ChipAXS6018RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipAXS6018RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipAXS6018.decompiled.cs:2231
 */
export const ChipAXS6018RGBVExtendProperty = t.intersection([
    ChipAXS6018RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipAXS6018RGBVExtendProperty') }),
], 'ChipAXS6018RGBVExtendProperty');
//# sourceMappingURL=ChipAXS6018RGBVExtendProperty.js.map
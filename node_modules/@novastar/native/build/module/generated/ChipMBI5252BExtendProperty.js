import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipMBI5252BExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_14,
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        DarkBlockCompensationOne: common.UInt8,
        DarkBlockCompensationTwo: common.UInt8,
        DarkBlockCompensationThree: common.UInt8,
        FirstSweepElimination: common.UInt8,
        UnderEliminateGhost: common.UInt8,
        GrayHorizontalStripesEliminateEn: common.Bool,
        LowAshColorCastCompensation: common.UInt8,
        AdvancedRLowAshColorCastCompensation1: common.UInt8,
        AdvancedRLowAshColorCastCompensation2: common.UInt8,
        AdvancedRLowAshColorCastCompensation3: common.UInt8,
        GradientCompensation: common.UInt8,
        GradientCompensation1: common.UInt8,
        DislodgeBadPointsGrade: common.UInt8,
        CurrentGain: common.UInt8,
    }),
], 'ChipMBI5252BExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5252BExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5252B.decompiled.cs:1235
 */
export const ChipMBI5252BExtendProperty = t.intersection([
    ChipMBI5252BExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipMBI5252BExtendProperty') }),
], 'ChipMBI5252BExtendProperty');
//# sourceMappingURL=ChipMBI5252BExtendProperty.js.map
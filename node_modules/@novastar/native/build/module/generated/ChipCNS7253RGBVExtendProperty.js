import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipCNS7253ExtendProperty } from './ChipCNS7253ExtendProperty';
export const ChipCNS7253RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsAdvancedMode: common.Bool_true,
    }),
    t.partial({
        CNS7253_R: ChipCNS7253ExtendProperty,
        CNS7253_G: ChipCNS7253ExtendProperty,
        CNS7253_B: ChipCNS7253ExtendProperty,
        CNS7253_V: ChipCNS7253ExtendProperty,
        IsUseNewModule: common.Bool,
        IsStarSwipPoint: common.Bool,
        FirstDataLen: common.Int32,
        FirstStartIndex: common.Int32,
        FirstRegisterAddr: common.Int32,
        SecondDataLen: common.Int32,
        SecondStartIndex: common.Int32,
        SecondRegisterAddr: common.Int32,
        ThirdDataLen: common.Int32,
        ThirdDataStartIndex: common.Int32,
        ThirdRegisterAddr: common.Int32,
        FourthDataLen: common.Int32,
        FourthStartIndex: common.Int32,
        FourthRegisterAddr: common.Int32,
    }),
], 'ChipCNS7253RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCNS7253RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCNS7253.decompiled.cs:362
 */
export const ChipCNS7253RGBVExtendProperty = t.intersection([
    ChipCNS7253RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCNS7253RGBVExtendProperty') }),
], 'ChipCNS7253RGBVExtendProperty');
//# sourceMappingURL=ChipCNS7253RGBVExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipFM6182ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RegValueConfigFirst: common.UInt16_63,
        RegValueConfigSecond: common.UInt16_63,
    }),
    t.partial({
        CurrentLowCompsention: common.Int32,
        LowCompsention: common.Int32,
        FirstCompsentionOne: common.Int32,
        ErrorDetection: common.Int32,
        GhostElimination: common.Int32,
        DetectionEable: common.Int32,
        FirstCompsentionTwo: common.Int32,
        CurrentPoint: common.Int32,
        OpenUpTime: common.Int32,
        PDMOpenTime: common.Int32,
        ParityTimeSet: common.Int32,
    }),
], 'ChipFM6182ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6182ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:42673
 */
export const ChipFM6182ExtendProperty = t.intersection([
    ChipFM6182ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6182ExtendProperty') }),
], 'ChipFM6182ExtendProperty');
//# sourceMappingURL=ChipFM6182ExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
/**
 * @category Codecs
 * @desc Codec for interface {@link ChipSUM2032ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:48419
 */
export const ChipSUM2032ExtendProperty = t.intersection([
    t.type({
        RColumnGhostCancelingMode: common.UInt8_56,
        GColumnGhostCancelingMode: common.UInt8_56,
        BColumnGhostCancelingMode: common.UInt8_56,
        VRColumnGhostCancelingMode: common.UInt8_56,
        RColumnGhostCanceling: common.UInt8_7,
        GColumnGhostCanceling: common.UInt8_5,
        BColumnGhostCanceling: common.UInt8_3,
        VRColumnGhostCanceling: common.UInt8_7,
        RLowGrayMode: common.UInt8_7,
        GLowGrayMode: common.UInt8_1,
        BLowGrayMode: common.UInt8_1,
        VRLowGrayMode: common.UInt8_7,
        RLowGrayCompensation: common.UInt8_1,
        GLowGrayCompensation: common.UInt8_4,
        BLowGrayCompensation: common.UInt8_4,
        VRLowGrayCompensation: common.UInt8_1,
    }),
    t.partial({}),
], 'ChipSUM2032ExtendProperty');
//# sourceMappingURL=ChipSUM2032ExtendProperty.js.map
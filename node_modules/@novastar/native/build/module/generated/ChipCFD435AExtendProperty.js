import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipCFD435AExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        FirstRegValue: common.UInt16,
        SecondRegValue: common.UInt16,
        ThirdRegValue: common.UInt16,
        FourthRegValue: common.UInt16,
        LowAshEnhanceUniformity: common.UInt8,
        LineBlankStrength: common.UInt8,
        LineBlankEnhanceModeEn: common.Bool,
        CouplingStrengthAdjust: common.UInt8,
        OpenTestPointAdjust: common.UInt8,
        CouplingOptimizationEn: common.Bool,
        LowGrayCompsentionTimeSettingMode: common.UInt8,
        CouplingRangeAdjust: common.UInt8,
        PerDriverEnable: common.Bool,
        OpenProtectEnable: common.Bool,
        ScanMode: common.UInt8,
        CurrentGear: common.UInt8,
        LowGrayCompsentionStrength: common.UInt8,
        OpenDynamicTestEnable: common.Bool,
        CurrentCompsentionEnable: common.Bool,
        ConstantCurrentInflectionPoint: common.UInt8,
        DynamicEnergySavingEn: common.Bool,
        LineEliminationLength: common.UInt8,
        OutputResponse: common.UInt8,
        PerDriverMode: common.UInt8,
        PerDriverTimeSetting: common.UInt8,
        OpentestThresholdValue: common.UInt8,
        LowGrayGoodLevel: common.UInt8,
        SetWeakup: common.UInt8,
    }),
], 'ChipCFD435AExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipCFD435AExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCFD435A.decompiled.cs:6093
 */
export const ChipCFD435AExtendProperty = t.intersection([
    ChipCFD435AExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipCFD435AExtendProperty') }),
], 'ChipCFD435AExtendProperty');
//# sourceMappingURL=ChipCFD435AExtendProperty.js.map
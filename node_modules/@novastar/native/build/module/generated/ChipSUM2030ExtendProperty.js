import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipSUM2030ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        IsOpenCircuitProtection: common.Bool_true,
    }),
    t.partial({
        IsCustomSecondChipReg: common.Bool,
        RedRegLowValue: common.UInt8,
        RedRegHighValue: common.UInt8,
        GreenRegLowValue: common.UInt8,
        GreenRegHighValue: common.UInt8,
        BlueRegLowValue: common.UInt8,
        BlueRegHighValue: common.UInt8,
        VRedRegLowValue: common.UInt8,
        VRedRegHighValue: common.UInt8,
    }),
], 'ChipSUM2030ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSUM2030ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:47546
 */
export const ChipSUM2030ExtendProperty = t.intersection([
    ChipSUM2030ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSUM2030ExtendProperty') }),
], 'ChipSUM2030ExtendProperty');
//# sourceMappingURL=ChipSUM2030ExtendProperty.js.map
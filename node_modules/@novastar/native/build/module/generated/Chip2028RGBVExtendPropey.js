import * as t from 'io-ts';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipSUM2028ExtendProperty } from './ChipSUM2028ExtendProperty';
export const Chip2028RGBVExtendPropeyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RedProperty: ChipSUM2028ExtendProperty,
        GreenProperty: ChipSUM2028ExtendProperty,
        BlueProperty: ChipSUM2028ExtendProperty,
        VRedProperty: ChipSUM2028ExtendProperty,
    }),
], 'Chip2028RGBVExtendPropeyBase');
/**
 * @category Codecs
 * @desc Codec for {@link Chip2028RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:47971
 */
export const Chip2028RGBVExtendPropey = t.intersection([
    Chip2028RGBVExtendPropeyBase,
    t.partial({ '@_xsi:type': t.literal('Chip2028RGBVExtendPropey') }),
], 'Chip2028RGBVExtendPropey');
//# sourceMappingURL=Chip2028RGBVExtendPropey.js.map
import * as t from 'io-ts';
export declare const ChipFM6565ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LEN: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
    LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
    SlowlyOpen: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6565ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6565.decompiled.cs:1100
 */
export declare const ChipFM6565ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    REG_LEN: t.Type<number, number, unknown>;
    RegisterArray: t.ArrayC<t.Type<number, number, unknown>>;
}>, t.PartialC<{
    ShadowEliminationLevel: t.Type<number, number, unknown>;
    ShadowEliminationTime: t.Type<number, number, unknown>;
    LowAshColorCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTimeFineTuningEn: t.Type<boolean, boolean, unknown>;
    LowAshFirstLineDarkCompensation: t.Type<number, number, unknown>;
    LowAshFirstLineDarkCompensationTime: t.Type<number, number, unknown>;
    CouplingOptimization1: t.Type<number, number, unknown>;
    CouplingOptimization2: t.Type<number, number, unknown>;
    CouplingOptimization2_Enable: t.Type<boolean, boolean, unknown>;
    SlowlyOpen: t.Type<number, number, unknown>;
    InflectionPointVoltage: t.Type<number, number, unknown>;
    CurrentGain: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipFM6565ExtendProperty">;
}>]>;
export interface ChipFM6565ExtendProperty extends t.TypeOf<typeof ChipFM6565ExtendProperty> {
}

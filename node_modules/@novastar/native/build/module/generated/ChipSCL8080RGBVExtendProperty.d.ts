import * as t from 'io-ts';
import { ChipSCL8080ExtendProperty } from './ChipSCL8080ExtendProperty';
export declare const ChipSCL8080RGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    ScanType: t.Type<number, number, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipSCL8080RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSCL8080.decompiled.cs:412
 */
export declare const ChipSCL8080RGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
        RegValueConfigFirst: t.Type<number, number, unknown>;
        RegValueConfigSecond: t.Type<number, number, unknown>;
        RegValueConfigThird: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipSCL8080ExtendProperty">;
    }>]>;
    ScanType: t.Type<number, number, unknown>;
    ChipLibVersion: t.Type<number, number, unknown>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
    SecondDataLen: t.Type<number, number, unknown>;
    SecondStartIndex: t.Type<number, number, unknown>;
    SecondRegisterAddr: t.Type<number, number, unknown>;
    ThirdRegisterAddr: t.Type<number, number, unknown>;
    ThirdDataLen: t.Type<number, number, unknown>;
    ThirdDataStartIndex: t.Type<number, number, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipSCL8080RGBVExtendProperty">;
}>]>;
export interface ChipSCL8080RGBVExtendProperty extends t.TypeOf<typeof ChipSCL8080RGBVExtendProperty> {
    RedProperty?: ChipSCL8080ExtendProperty;
    GreenProperty?: ChipSCL8080ExtendProperty;
    BlueProperty?: ChipSCL8080ExtendProperty;
    VRedProperty?: ChipSCL8080ExtendProperty;
}

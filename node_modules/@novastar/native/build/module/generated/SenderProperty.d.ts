import * as t from 'io-ts';
import { AudioControlModeEnum } from './AudioControlMode';
import { DviSelectModeEnum } from './DviSelectMode';
import { HDEnableModeEnum } from './HDEnableMode';
import { SourceSelectLoadModeEnum } from './SourceSelectLoadMode';
import { VedioSelectModeEnum } from './VedioSelectMode';
/**
 * @category Codecs
 * @desc Codec for interface {@link SenderProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:53072
 */
export declare const SenderProperty: t.IntersectionC<[t.TypeC<{
    FieldRate: t.Type<number, number, unknown>;
    DviSelect: t.Type<DviSelectModeEnum, "HDMI" | "DVI" | "SDI" | "DP" | "Dual_DVI" | "HDBaseT" | "LVDS", unknown>;
    AudioControl: t.Type<AudioControlModeEnum, "HDMI" | "External", unknown>;
    HDEnable: t.Type<HDEnableModeEnum, "Bit12" | "Bit10" | "Bit8", unknown>;
    LoadSelect: t.Type<SourceSelectLoadModeEnum, "HighLoad" | "BackUpLoad", unknown>;
    VedioSelect: t.Type<VedioSelectModeEnum, "Manual" | "Auto", unknown>;
}>, t.PartialC<{
    CompanyID: t.Type<number, number, unknown>;
    ModalID: t.Type<number, number, unknown>;
    SN: t.StringC;
    IsSerdes: t.Type<boolean, boolean, unknown>;
    Is3DEnable: t.Type<boolean, boolean, unknown>;
}>]>;
export interface SenderProperty extends t.TypeOf<typeof SenderProperty> {
    DviSelect: DviSelectModeEnum;
    AudioControl: AudioControlModeEnum;
    HDEnable: HDEnableModeEnum;
    LoadSelect: SourceSelectLoadModeEnum;
    VedioSelect: VedioSelectModeEnum;
}

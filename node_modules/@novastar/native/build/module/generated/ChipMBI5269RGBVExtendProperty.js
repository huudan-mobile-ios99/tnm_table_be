import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
import { ChipMBI5269ExtendProperty } from './ChipMBI5269ExtendProperty';
export const ChipMBI5269RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_21,
    }),
    t.partial({
        RedProperty: ChipMBI5269ExtendProperty,
        GreenProperty: ChipMBI5269ExtendProperty,
        BlueProperty: ChipMBI5269ExtendProperty,
        VRedProperty: ChipMBI5269ExtendProperty,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        SubField: common.UInt8,
        GrayDepth: common.UInt8,
        ScanCount: common.UInt8,
        HighAshouplingLevel: common.UInt8,
        HighAshouplingFront: common.UInt8,
        CompsentionTime: common.UInt16,
        FailureLEDElimination: common.Bool,
        GradientTransitionOptimizationTime: common.UInt16,
        P: common.UInt8,
        M: common.UInt8,
        N: common.UInt8,
        Div: common.UInt8,
        VrextVoltageEnable: common.Bool,
        IsAdvancedMode: common.Bool,
        DefaultRegisterType: common.UInt8,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
    }),
], 'ChipMBI5269RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipMBI5269RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipMBI5269.decompiled.cs:5919
 */
export const ChipMBI5269RGBVExtendProperty = t.intersection([
    ChipMBI5269RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipMBI5269RGBVExtendProperty') }),
], 'ChipMBI5269RGBVExtendProperty');
//# sourceMappingURL=ChipMBI5269RGBVExtendProperty.js.map
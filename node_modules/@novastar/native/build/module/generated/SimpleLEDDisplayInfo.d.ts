import * as t from 'io-ts';
import { LEDDisplyTypeEnum } from './LEDDisplyType';
import { ScreenAdjustParams } from './ScreenAdjustParams';
import { VirtualModeTypeEnum } from './VirtualModeType';
/**
 * @category Codecs
 * @desc Codec for interface {@link SimpleLEDDisplayInfo}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:53801
 */
export declare const SimpleLEDDisplayInfo: t.IntersectionC<[t.TypeC<{
    PixelColsInScanBd: t.Type<number, number, unknown>;
    PixelRowsInScanBd: t.Type<number, number, unknown>;
    PortScanBdInfoList: t.ArrayC<t.PartialC<{
        ConnectType: t.Type<import("./ScanBoardConnectType").ScanBoardConnectTypeEnum, "LeftTop_Horizontal" | "LeftBottom_Horizontal" | "RightTop_Horizontal" | "RightBottom_Horizontal" | "LeftTop_Vertical" | "LeftBottom_Vertical" | "RightTop_Vertical" | "RightBottom_Vertical", unknown>;
        PortIndex: t.Type<number, number, unknown>;
        ScanBdBegColNo: t.Type<number, number, unknown>;
        ScanBdBegRowNo: t.Type<number, number, unknown>;
        ScanBdEndColNo: t.Type<number, number, unknown>;
        ScanBdEndRowNo: t.Type<number, number, unknown>;
    }>>;
}>, t.PartialC<{
    X: t.Type<number, number, unknown>;
    Y: t.Type<number, number, unknown>;
    ScanBdCols: t.Type<number, number, unknown>;
    ScanBdRows: t.Type<number, number, unknown>;
    SenderIndex: t.Type<number, number, unknown>;
    IsOpen18Bit: t.Type<boolean, boolean, unknown>;
    IsOpenClearview: t.Type<boolean, boolean, unknown>;
    Type: t.Type<LEDDisplyTypeEnum, "SimpleSingleType" | "StandardType" | "ComplexType", unknown>;
    VirtualMode: t.Type<VirtualModeTypeEnum, "Unknown" | "Disable" | "Led4Mode1" | "Led4Mode2" | "Led3" | "Led31", unknown>;
    PortCols: t.Type<number, number, unknown>;
    PortRows: t.Type<number, number, unknown>;
    ScannerCount: t.Type<number, number, unknown>;
    ScrAdjustParams: t.IntersectionC<[t.TypeC<{
        ScreenXScale: t.Type<number, number, unknown>;
        ScreenYScale: t.Type<number, number, unknown>;
        VirtualMap: t.Type<number, number, unknown>;
        ScreenName: t.StringC;
    }>, t.PartialC<{
        ScreenXZoomType: t.Type<import("./ZoomType").ZoomTypeEnum, "None" | "Enlarge" | "Reduce", unknown>;
        ScreenYZoomType: t.Type<import("./ZoomType").ZoomTypeEnum, "None" | "Enlarge" | "Reduce", unknown>;
        ThreeD: t.Type<number, number, unknown>;
    }>]>;
}>]>;
export interface SimpleLEDDisplayInfo extends t.TypeOf<typeof SimpleLEDDisplayInfo> {
    Type?: LEDDisplyTypeEnum;
    VirtualMode?: VirtualModeTypeEnum;
    ScrAdjustParams?: ScreenAdjustParams;
}

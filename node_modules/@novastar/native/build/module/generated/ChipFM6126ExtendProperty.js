import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipFM6126ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RWhiteBalance: common.Int32_16,
        GWhiteBalance: common.Int32_16,
        BWhiteBalance: common.Int32_16,
        RedRegValueConfigFirst: common.UInt16_65474,
        GreenRegValueConfigFirst: common.UInt16_65474,
        BlueRegValueConfigFirst: common.UInt16_65474,
        RedRegValueConfigSecond: common.UInt16_30818,
        GreenRegValueConfigSecond: common.UInt16_28770,
        BlueRegValueConfigSecond: common.UInt16_26722,
        HandUpdata: common.Bool_true,
    }),
    t.partial({
        IsAdvancedMode: common.Bool,
        RGainPoint: common.Int32,
        GGainPoint: common.Int32,
        BGainPoint: common.Int32,
        RConstantCurrent: common.Int32,
        GConstantCurrent: common.Int32,
        BConstantCurrent: common.Int32,
        ROESignalSelect: common.Int32,
        GOESignalSelect: common.Int32,
        BOESignalSelect: common.Int32,
        REnableSignalSelect: common.Bool,
        GEnableSignalSelect: common.Bool,
        BEnableSignalSelect: common.Bool,
        RDelayTime: common.Int32,
        GDelayTime: common.Int32,
        BDelayTime: common.Int32,
        RBlankingSignalSelect: common.Int32,
        GBlankingSignalSelect: common.Int32,
        BBlankingSignalSelect: common.Int32,
        RFallingTimeSelect: common.Int32,
        GFallingTimeSelect: common.Int32,
        BFallingTimeSelect: common.Int32,
        RLATCHSelect: common.Int32,
        GLATCHSelect: common.Int32,
        BLATCHSelect: common.Int32,
        RAMSelect: common.Int32,
        GAMSelect: common.Int32,
        BAMSelect: common.Int32,
        RAMSignalSelect: common.Bool,
        GAMSignalSelect: common.Bool,
        BAMSignalSelect: common.Bool,
        RCurrentRangSelect: common.Int32,
        GCurrentRangSelect: common.Int32,
        BCurrentRangSelect: common.Int32,
        RCLKtoSDOSelect: common.Int32,
        GCLKtoSDOSelect: common.Int32,
        BCLKtoSDOSelect: common.Int32,
        ROEWidthSelect: common.Int32,
        GOEWidthSelect: common.Int32,
        BOEWidthSelect: common.Int32,
        VRedRegValueConfigFirst: common.UInt16,
        VRedRegValueConfigSecond: common.UInt16,
        BlankingMode: common.Int32,
    }),
], 'ChipFM6126ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6126ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:30095
 */
export const ChipFM6126ExtendProperty = t.intersection([
    ChipFM6126ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6126ExtendProperty') }),
], 'ChipFM6126ExtendProperty');
//# sourceMappingURL=ChipFM6126ExtendProperty.js.map
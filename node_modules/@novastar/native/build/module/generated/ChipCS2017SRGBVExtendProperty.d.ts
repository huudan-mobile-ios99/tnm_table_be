import * as t from 'io-ts';
import { ChipCS2017SExtendProperty } from './ChipCS2017SExtendProperty';
export declare const ChipCS2017SRGBVExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipCS2017SRGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipCS2017S.decompiled.cs:219
 */
export declare const ChipCS2017SRGBVExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    GreenProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    BlueProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    VRedProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
        FirstRegistor: t.Type<number, number, unknown>;
    }>, t.PartialC<{
        LineEliminationEnable: t.Type<boolean, boolean, unknown>;
        ShadowEliminationLevel: t.Type<number, number, unknown>;
        ResponseSpeed: t.Type<number, number, unknown>;
        WorkMode: t.Type<number, number, unknown>;
        SetCurrentPosition: t.Type<number, number, unknown>;
        InflectionCurrent: t.Type<number, number, unknown>;
        DMAWriteMode: t.Type<number, number, unknown>;
        CurrentGain: t.Type<number, number, unknown>;
    }>]>, t.PartialC<{
        '@_xsi:type': t.LiteralC<"ChipCS2017SExtendProperty">;
    }>]>;
    IsAdvancedMode: t.Type<boolean, boolean, unknown>;
    IsUseNewModule: t.Type<boolean, boolean, unknown>;
    ConfigDataLen: t.Type<number, number, unknown>;
    FirstDataLen: t.Type<number, number, unknown>;
    FirstStartIndex: t.Type<number, number, unknown>;
    FirstRegisterAddr: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipCS2017SRGBVExtendProperty">;
}>]>;
export interface ChipCS2017SRGBVExtendProperty extends t.TypeOf<typeof ChipCS2017SRGBVExtendProperty> {
    RedProperty?: ChipCS2017SExtendProperty;
    GreenProperty?: ChipCS2017SExtendProperty;
    BlueProperty?: ChipCS2017SExtendProperty;
    VRedProperty?: ChipCS2017SExtendProperty;
}

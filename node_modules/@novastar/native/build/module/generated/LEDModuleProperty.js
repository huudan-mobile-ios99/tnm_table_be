import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipType } from './ChipType';
import { DataDirectionType } from './DataDirectionType';
import { DecodeType } from './DecodeType';
import MaxValue from './MaxValue';
import { OEPolarityType } from './OEPolarityType';
import { ScanType } from './ScanType';
import { ScreenDriveType } from './ScreenDriveType';
/**
 * @category Codecs
 * @desc Codec for interface {@link LEDModuleProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:23639
 */
export const LEDModuleProperty = t.intersection([
    t.type({
        ModuleVersion: common.string_20,
        ModulePixelCols: common.Int32_16,
        ModulePixelRows: common.Int32_8,
        ScanType: common.withDefault(ScanType, 'Scan_2'),
        OEPolarity: common.withDefault(OEPolarityType, 'LowEnable'),
        DecType: common.withDefault(DecodeType, 'Decode138'),
        DataGroup: common.UInt8_2,
        TotalPointInTable: common.Int32_128,
        SerialColorNum: common.UInt8_3,
        SerialDotsNumPerColor: common.UInt8_1,
        ChipMinLawRepeatNumber: common.Int32_1,
        DriverChipType: common.withDefault(ChipType, 'Chip_MBI5036'),
    }),
    t.partial({
        Name: t.string,
        DataDirectType: DataDirectionType,
        DataGroupSequence: common.buffer_MAX_MODULEDATAGROUP,
        ScanABCDCode: new common.BufferFromBase64('ScanABCDCode', MaxValue.MAX_SCAN),
        NewScanABCDCode: new common.BufferFromBase64('NewScanABCDCode', MaxValue.MAX_SCAN_NEW),
        ScanABCDCodeSpecila: new common.BufferFromBase64('ScanABCDCodeSpecila', MaxValue.MAX_SCANSPECIAL),
        RGBCode: common.buffer_COLOR_COUNT,
        PointTableData: new common.BufferFromBase64('PointTableData', 256),
        RowsCtrlByDataGroup: common.buffer_MAX_MODULEDATAGROUP,
        ScreenDriveType,
        LineBias: common.Int32,
        StartPositionOfDataGroup: common.buffer_MAX_MODULEDATAGROUP,
        SerialRGBCode: common.buffer_COLOR_COUNT,
        ChannelEnableData: common.buffer_2,
        ChannelData: common.buffer_2,
        ChipNumber: common.UInt8,
        DriverChipTypeExtend: common.UInt8,
        DriverTypePro: common.UInt8,
        DecodeTypePro: common.UInt8,
    }),
], 'LEDModuleProperty');
//# sourceMappingURL=LEDModuleProperty.js.map
import * as t from 'io-ts';
export declare const Chip9373ExtendPropetyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    BFirstScancompensation: t.Type<number, number, unknown>;
    BlueVanishingRating: t.Type<number, number, unknown>;
    CrossEn: t.Type<boolean, boolean, unknown>;
    GCurrentCompensationThird: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    GreenVanishingRating: t.Type<number, number, unknown>;
    RCurrentCompensationThird: t.Type<number, number, unknown>;
    RedVanishingRating: t.Type<number, number, unknown>;
    VRCurrentCompensationThird: t.Type<number, number, unknown>;
    VRedVanishingRating: t.Type<number, number, unknown>;
}>, t.PartialC<{
    BCompensationMode: t.Type<number, number, unknown>;
    BCurrentCompensationFirst: t.Type<number, number, unknown>;
    BCurrentCompensationSec: t.Type<number, number, unknown>;
    BCurrentCompensationThird: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    GclkMutiRate: t.Type<boolean, boolean, unknown>;
    GCompensationMode: t.Type<number, number, unknown>;
    GCurrentCompensationFirst: t.Type<number, number, unknown>;
    GCurrentCompensationSec: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    RCompensationMode: t.Type<number, number, unknown>;
    RCurrentCompensationFirst: t.Type<number, number, unknown>;
    RCurrentCompensationSec: t.Type<number, number, unknown>;
    RCurrentCompensationFo: t.Type<number, number, unknown>;
    GCurrentCompensationFo: t.Type<number, number, unknown>;
    BCurrentCompensationFo: t.Type<number, number, unknown>;
    RFirstScancompensation: t.Type<number, number, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    VRCurrentCompensationFirst: t.Type<number, number, unknown>;
    VRCurrentCompensationSec: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip9373ExtendPropety}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:28631
 */
export declare const Chip9373ExtendPropety: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    BFirstScancompensation: t.Type<number, number, unknown>;
    BlueVanishingRating: t.Type<number, number, unknown>;
    CrossEn: t.Type<boolean, boolean, unknown>;
    GCurrentCompensationThird: t.Type<number, number, unknown>;
    GFirstScancompensation: t.Type<number, number, unknown>;
    GrayDepth: t.Type<number, number, unknown>;
    GreenVanishingRating: t.Type<number, number, unknown>;
    RCurrentCompensationThird: t.Type<number, number, unknown>;
    RedVanishingRating: t.Type<number, number, unknown>;
    VRCurrentCompensationThird: t.Type<number, number, unknown>;
    VRedVanishingRating: t.Type<number, number, unknown>;
}>, t.PartialC<{
    BCompensationMode: t.Type<number, number, unknown>;
    BCurrentCompensationFirst: t.Type<number, number, unknown>;
    BCurrentCompensationSec: t.Type<number, number, unknown>;
    BCurrentCompensationThird: t.Type<number, number, unknown>;
    BLowGrayValue: t.Type<number, number, unknown>;
    GclkMutiRate: t.Type<boolean, boolean, unknown>;
    GCompensationMode: t.Type<number, number, unknown>;
    GCurrentCompensationFirst: t.Type<number, number, unknown>;
    GCurrentCompensationSec: t.Type<number, number, unknown>;
    GLowGrayValue: t.Type<number, number, unknown>;
    RCompensationMode: t.Type<number, number, unknown>;
    RCurrentCompensationFirst: t.Type<number, number, unknown>;
    RCurrentCompensationSec: t.Type<number, number, unknown>;
    RCurrentCompensationFo: t.Type<number, number, unknown>;
    GCurrentCompensationFo: t.Type<number, number, unknown>;
    BCurrentCompensationFo: t.Type<number, number, unknown>;
    RFirstScancompensation: t.Type<number, number, unknown>;
    RLowGrayValue: t.Type<number, number, unknown>;
    VRCurrentCompensationFirst: t.Type<number, number, unknown>;
    VRCurrentCompensationSec: t.Type<number, number, unknown>;
    VRFirstScancompensation: t.Type<number, number, unknown>;
    VRLowGrayValue: t.Type<number, number, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip9373ExtendPropety">;
}>]>;
export interface Chip9373ExtendPropety extends t.TypeOf<typeof Chip9373ExtendPropety> {
}

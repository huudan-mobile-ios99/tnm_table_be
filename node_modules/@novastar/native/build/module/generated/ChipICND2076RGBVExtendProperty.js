import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipICND2076RGBVExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_12,
        RegisterList: common.XMLArray(common.UInt64, 'ulong'),
        RRemovePointCurrentAmplitude: common.UInt8_2,
        GRemovePointCurrentAmplitude: common.UInt8_16,
        BRemovePointCurrentAmplitude: common.UInt8_16,
    }),
    t.partial({
        IsUseNewModule: common.Bool,
        SpecialDataLen: common.Int32,
        SpecialRegisterAddr: common.UInt32,
        RShadowEliminationLevel: common.UInt8,
        GShadowEliminationLevel: common.UInt8,
        BShadowEliminationLevel: common.UInt8,
        RShadowEliminationTime: common.UInt8,
        GShadowEliminationTime: common.UInt8,
        BShadowEliminationTime: common.UInt8,
        LowAshuniformity: common.UInt8,
        RLowGrayOffset: common.UInt8,
        GLowGrayOffset: common.UInt8,
        BLowGrayOffset: common.UInt8,
        RFirstLineDarkCompsentionTime: common.UInt8,
        GFirstLineDarkCompsentionTime: common.UInt8,
        BFirstLineDarkCompsentionTime: common.UInt8,
        RLowGrayFirstLineDarkCompsention: common.UInt8,
        GLowGrayFirstLineDarkCompsention: common.UInt8,
        BLowGrayFirstLineDarkCompsention: common.UInt8,
        RLowGrayFirstLineDarkCompsentionFineTuning: common.UInt8,
        GLowGrayFirstLineDarkCompsentionFineTuning: common.UInt8,
        BLowGrayFirstLineDarkCompsentionFineTuning: common.UInt8,
        RLowGrayFirstLineDarkCompsentionEn: common.Bool,
        GLowGrayFirstLineDarkCompsentionEn: common.Bool,
        BLowGrayFirstLineDarkCompsentionEn: common.Bool,
        CouplingAdjustEnhacneModeEn: common.Bool,
        CouplingOptimizationOne: common.UInt8,
        RCouplingOptimizationTwoEn: common.Bool,
        GCouplingOptimizationTwoEn: common.Bool,
        BCouplingOptimizationTwoEn: common.Bool,
        RCouplingOptimizationTwo: common.UInt8,
        GCouplingOptimizationTwo: common.UInt8,
        BCouplingOptimizationTwo: common.UInt8,
        RSlowlyOpen: common.UInt8,
        GSlowlyOpen: common.UInt8,
        BSlowlyOpen: common.UInt8,
        RKneePointVoltage: common.UInt8,
        GKneePointVoltage: common.UInt8,
        BKneePointVoltage: common.UInt8,
        RCurrentGain: common.UInt8,
        GCurrentGain: common.UInt8,
        BCurrentGain: common.UInt8,
        RCurrentAmplitude: common.UInt8,
        GCurrentAmplitude: common.UInt8,
        BCurrentAmplitude: common.UInt8,
        IsAdvancedMode: common.Bool,
        GclkNumPerScan: common.UInt8,
        ScanCount: common.UInt8,
        RefNumPerVs: common.UInt8,
        GclkFreqP: common.UInt8,
        GclkFreqM: common.UInt8,
        GclkFreqN: common.UInt8,
        FailureEliminationEn: common.Bool,
    }),
], 'ChipICND2076RGBVExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2076RGBVExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2076.decompiled.cs:86
 */
export const ChipICND2076RGBVExtendProperty = t.intersection([
    ChipICND2076RGBVExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipICND2076RGBVExtendProperty') }),
], 'ChipICND2076RGBVExtendProperty');
//# sourceMappingURL=ChipICND2076RGBVExtendProperty.js.map
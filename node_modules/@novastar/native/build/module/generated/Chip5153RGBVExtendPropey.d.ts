import * as t from 'io-ts';
import { Chip5153ExtendProperty } from './Chip5153ExtendProperty';
export declare const Chip5153RGBVExtendPropeyBase: t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    GreenProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    BlueProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    VRedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link Chip5153RGBVExtendPropey}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:28577
 */
export declare const Chip5153RGBVExtendPropey: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.PartialC<{
    RedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    GreenProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    BlueProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
    VRedProperty: t.PartialC<{
        EliminateAfterLow: t.Type<number, number, unknown>;
        FirstSweepEliminationMaster: t.Type<number, number, unknown>;
        FirstSweepEliminationMedium: t.Type<boolean, boolean, unknown>;
        FirstSweepEliminationSecond: t.Type<number, number, unknown>;
        LowAshColorCompensationOne: t.Type<number, number, unknown>;
        LowAshColorCompensationTwo: t.Type<number, number, unknown>;
        LowAshEnhanceUniformity: t.Type<boolean, boolean, unknown>;
        GrayHorizontalStripesEliminate: t.Type<boolean, boolean, unknown>;
        EnhancedModeOne: t.Type<boolean, boolean, unknown>;
        SlowOpen: t.Type<boolean, boolean, unknown>;
        SwapErrorPoint: t.Type<number, number, unknown>;
        EnhancedModeTwo: t.Type<boolean, boolean, unknown>;
        RedRegValueConfigThird: t.Type<number, number, unknown>;
        GreenRegValueConfigThird: t.Type<number, number, unknown>;
        BlueRegValueConfigThird: t.Type<number, number, unknown>;
        VRedRegValueConfigThird: t.Type<number, number, unknown>;
    }>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"Chip5153RGBVExtendPropey">;
}>]>;
export interface Chip5153RGBVExtendPropey extends t.TypeOf<typeof Chip5153RGBVExtendPropey> {
    RedProperty?: Chip5153ExtendProperty;
    GreenProperty?: Chip5153ExtendProperty;
    BlueProperty?: Chip5153ExtendProperty;
    VRedProperty?: Chip5153ExtendProperty;
}

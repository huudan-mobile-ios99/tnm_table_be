import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipTLC6983ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        RegisterArray: new common.BufferFromBase64('RegisterArray', 96),
        RegArrayUI: new common.BufferFromBase64('RegArrayUI', 96),
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        IsPowerSavingMode1: common.Bool,
        PowerSavingMode2: common.UInt8,
        IsBadPoints: common.Bool,
        RLowGrayGradientAdj: common.UInt8,
        GLowGrayGradientAdj: common.UInt8,
        BLowGrayGradientAdj: common.UInt8,
        RLowGrayBrightCompensation: common.UInt8,
        GLowGrayBrightCompensation: common.UInt8,
        BLowGrayBrightCompensation: common.UInt8,
        BlackFieldRegulation: common.UInt8,
        RCouplingParameterAdj1: common.UInt8,
        GCouplingParameterAdj1: common.UInt8,
        BCouplingParameterAdj1: common.UInt8,
        RCouplingParameterAdj2: common.UInt8,
        GCouplingParameterAdj2: common.UInt8,
        BCouplingParameterAdj2: common.UInt8,
        IsRCouplingParameterAdj2: common.Bool,
        IsGCouplingParameterAdj2: common.Bool,
        IsBCouplingParameterAdj2: common.Bool,
        RLowAshColorCastCompensation: common.UInt8,
        GLowAshColorCastCompensation: common.UInt8,
        BLowAshColorCastCompensation: common.UInt8,
        Is256FrameRateMode: common.Bool,
        RGain: common.UInt8,
        GGain: common.UInt8,
        BGain: common.UInt8,
        GlobalGain: common.UInt8,
        ShortDetectionLevel: common.UInt8,
        MaxCurrentValue: common.UInt8,
        RSlowlyOpen: common.UInt8,
        GSlowlyOpen: common.UInt8,
        BSlowlyOpen: common.UInt8,
        RQuickTurnOff: common.UInt8,
        GQuickTurnOff: common.UInt8,
        BQuickTurnOff: common.UInt8,
        FirstLineDarkAdj: common.UInt8,
        IsCouplingParameterAdj3: common.Bool,
        CouplingParameterAdj4: common.UInt8,
        IsCouplingParameterAdj4: common.Bool,
    }),
], 'ChipTLC6983ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipTLC6983ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipTLC6983.decompiled.cs:4332
 */
export const ChipTLC6983ExtendProperty = t.intersection([
    ChipTLC6983ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipTLC6983ExtendProperty') }),
], 'ChipTLC6983ExtendProperty');
//# sourceMappingURL=ChipTLC6983ExtendProperty.js.map
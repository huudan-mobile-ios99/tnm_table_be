import * as t from 'io-ts';
export declare const ChipICND2100ExtendPropertyBase: t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    TurningPointVoltage: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvanceModel: t.Type<boolean, boolean, unknown>;
    IsEliminateShadow: t.Type<boolean, boolean, unknown>;
}>]>;
/**
 * @category Codecs
 * @desc Codec for {@link ChipICND2100ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipICND2100.decompiled.cs:745
 */
export declare const ChipICND2100ExtendProperty: t.IntersectionC<[t.IntersectionC<[t.PartialC<{}>, t.TypeC<{
    TurningPointVoltage: t.Type<number, number, unknown>;
    RedRegValueConfigFirst: t.Type<number, number, unknown>;
    GreenRegValueConfigFirst: t.Type<number, number, unknown>;
    BlueRegValueConfigFirst: t.Type<number, number, unknown>;
    VRedRegValueConfigFirst: t.Type<number, number, unknown>;
}>, t.PartialC<{
    IsAdvanceModel: t.Type<boolean, boolean, unknown>;
    IsEliminateShadow: t.Type<boolean, boolean, unknown>;
}>]>, t.PartialC<{
    '@_xsi:type': t.LiteralC<"ChipICND2100ExtendProperty">;
}>]>;
export interface ChipICND2100ExtendProperty extends t.TypeOf<typeof ChipICND2100ExtendProperty> {
}

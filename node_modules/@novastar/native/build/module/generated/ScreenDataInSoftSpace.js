import * as t from 'io-ts';
import * as common from '../lib/common';
import { CabinetInDevice } from './CabinetInDevice';
import { DviSelectMode } from './DviSelectMode';
import { LEDDisplyType } from './LEDDisplyType';
import { OnePortLoadInfo } from './OnePortLoadInfo';
import { VirtualModeType } from './VirtualModeType';
/**
 * @category Codecs
 * @desc Codec for interface {@link ScreenDataInSoftSpace}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.CommonInfoAccessor.decompiled.cs:1019
 */
export const ScreenDataInSoftSpace = t.intersection([
    t.type({
        UUID: common.string_empty,
        DviSelect: common.withDefault(DviSelectMode, 'DVI'),
        OnePortLoadInfo: common.XMLArray(OnePortLoadInfo, 'OnePortLoadInfo'),
        CabinetInDevice: common.XMLArray(CabinetInDevice, 'CabinetInDevice'),
    }),
    t.partial({
        ScrType: LEDDisplyType,
        VirMode: VirtualModeType,
        ScrX: common.Int32,
        ScrY: common.Int32,
        CabinetCol: common.UInt16,
        CabinetRow: common.UInt16,
        PortCols: common.UInt8,
        PortRows: common.UInt8,
        DeviceID: common.UInt8,
        CabinetWidth: common.UInt16,
        CabinetHeight: common.UInt16,
        ScreenIndex: common.Int32,
        DVIlist: t.record(common.Int32, common.PointFromString),
    }),
], 'ScreenDataInSoftSpace');
//# sourceMappingURL=ScreenDataInSoftSpace.js.map
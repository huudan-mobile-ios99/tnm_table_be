import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipSM16389ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LENGTH: common.Int32_34,
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        EnergyPattern: common.UInt8,
        LowGrayHomogeneity: common.UInt8,
        CouplingOptimize2: common.Int32,
        BlankingTime1: common.UInt8,
        FirstLineCompensation: common.UInt8,
        LowGrayOptimize2: common.UInt8,
        OpenTest: common.Bool,
        EliminateOpenCrossGrade: common.UInt8,
        CouplingEnhancePattern: common.Bool,
        LowGrayOptimize1: common.UInt8,
        LowGrayAcrossStripeOptimize: common.UInt8,
        CouplingGrade: common.UInt8,
        Gain: common.Int32,
        BlankingGrade1: common.UInt8,
        FirstLineDarkCompensationGrade: common.UInt8,
        BlankingOpen2: common.Bool,
        BlankingGrade2: common.UInt8,
        BlankingOpen3: common.Bool,
        BlankingGrade3: common.UInt8,
        CouplingOptimize1: common.UInt8,
    }),
], 'ChipSM16389ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSM16389ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipSM16389.decompiled.cs:1029
 */
export const ChipSM16389ExtendProperty = t.intersection([
    ChipSM16389ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSM16389ExtendProperty') }),
], 'ChipSM16389ExtendProperty');
//# sourceMappingURL=ChipSM16389ExtendProperty.js.map
import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipSUM2033BaseExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.partial({
        CompensationLevel: common.UInt8,
        CompensationMode: common.UInt8,
        OpenCircuitProtection: common.Bool,
        CurrentWork: common.Bool,
        SystemRetainsSecond: common.Int32,
        ConstantSettings: common.UInt8,
        CurrentSynchronou: common.UInt8,
        OpenCircuitCheck: common.UInt8,
        VanishingMode: common.UInt8,
        GCLKFrequency: common.UInt8,
        SystemRetainsThird: common.Int32,
    }),
], 'ChipSUM2033BaseExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipSUM2033BaseExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:49312
 */
export const ChipSUM2033BaseExtendProperty = t.intersection([
    ChipSUM2033BaseExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipSUM2033BaseExtendProperty') }),
], 'ChipSUM2033BaseExtendProperty');
//# sourceMappingURL=ChipSUM2033BaseExtendProperty.js.map
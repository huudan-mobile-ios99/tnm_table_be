import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipFM6565ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        REG_LEN: common.Int32_48,
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        ShadowEliminationLevel: common.UInt8,
        ShadowEliminationTime: common.UInt8,
        LowAshColorCompensation: common.UInt8,
        LowAshFirstLineDarkCompensationTimeFineTuningEn: common.Bool,
        LowAshFirstLineDarkCompensation: common.UInt8,
        LowAshFirstLineDarkCompensationTime: common.UInt8,
        CouplingOptimization1: common.UInt8,
        CouplingOptimization2: common.UInt8,
        CouplingOptimization2_Enable: common.Bool,
        SlowlyOpen: common.UInt8,
        InflectionPointVoltage: common.UInt8,
        CurrentGain: common.UInt16,
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
    }),
], 'ChipFM6565ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipFM6565ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipFM6565.decompiled.cs:1100
 */
export const ChipFM6565ExtendProperty = t.intersection([
    ChipFM6565ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipFM6565ExtendProperty') }),
], 'ChipFM6565ExtendProperty');
//# sourceMappingURL=ChipFM6565ExtendProperty.js.map
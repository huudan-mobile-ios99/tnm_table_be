import * as t from 'io-ts';
import * as common from '../lib/common';
import { ChipBaseExtendPropey } from './ChipBaseExtendPropey';
export const ChipDP3265ExtendPropertyBase = t.intersection([
    ChipBaseExtendPropey,
    t.type({
        RegisterArray: common.XMLArray(common.UInt16, 'ushort'),
    }),
    t.partial({
        IsUseNewModule: common.Bool,
        ChipLibVersion: common.UInt8,
        ConstantCurrentOutputInflectionPointGrade: common.UInt8,
        LowGreyPittingOptimization: common.UInt8,
        GammaSmoothingLevel: common.UInt8,
        ShadowEliminationLevelEnable: common.Bool,
        ShadowEliminationLevel: common.UInt8,
        ShadowEliminationTime: common.UInt8,
        ShadowEliminationMoment: common.UInt8,
        CouplingOptimizationEnable: common.Bool,
        CouplingOptimizationEnhance: common.Bool,
        CouplingOptimizationGrade: common.UInt8,
        CoupledOptimization1: common.UInt8,
        CouplingCoefficient: common.UInt8,
        CurrentGain: common.UInt16,
    }),
], 'ChipDP3265ExtendPropertyBase');
/**
 * @category Codecs
 * @desc Codec for {@link ChipDP3265ExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.ChipDP3265.decompiled.cs:6887
 */
export const ChipDP3265ExtendProperty = t.intersection([
    ChipDP3265ExtendPropertyBase,
    t.partial({ '@_xsi:type': t.literal('ChipDP3265ExtendProperty') }),
], 'ChipDP3265ExtendProperty');
//# sourceMappingURL=ChipDP3265ExtendProperty.js.map
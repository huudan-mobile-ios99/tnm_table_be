import * as t from 'io-ts';
import * as common from '../lib/common';
import { Chip16159ExtendProperty } from './Chip16159ExtendProperty';
/**
 * @category Codecs
 * @desc Codec for interface {@link Chip16159RGBExtendProperty}
 * @see Automatically generated from ../decompiled/Nova.LCT.GigabitSystem.DataClass.decompiled.cs:48942
 */
export const Chip16159RGBExtendProperty = t.intersection([
    t.type({
        RedRegValueConfigFirst: common.UInt16_32569,
        GreenRegValueConfigFirst: common.UInt16_32569,
        BlueRegValueConfigFirst: common.UInt16_32569,
        VRedRegValueConfigFirst: common.UInt16_32569,
        RedRegValueConfigSecond: common.UInt16_62465,
        GreenRegValueConfigSecond: common.UInt16_58369,
        BlueRegValueConfigSecond: common.UInt16_58369,
        VRedRegValueConfigSecond: common.UInt16_62465,
        RedRegValueConfigThird: common.UInt16_30976,
        GreenRegValueConfigThird: common.UInt16_30976,
        BlueRegValueConfigThird: common.UInt16_30976,
        VRedRegValueConfigThird: common.UInt16_30976,
    }),
    t.partial({
        RedProperty: Chip16159ExtendProperty,
        GreenProperty: Chip16159ExtendProperty,
        BlueProperty: Chip16159ExtendProperty,
        VRedProperty: Chip16159ExtendProperty,
        IsOpenTest: common.Bool,
        OpenTestGrade: common.UInt8,
    }),
], 'Chip16159RGBExtendProperty');
//# sourceMappingURL=Chip16159RGBExtendProperty.js.map